#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace gender.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="gender")]
	public partial class genderDbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUserSocial(UserSocial instance);
    partial void UpdateUserSocial(UserSocial instance);
    partial void DeleteUserSocial(UserSocial instance);
    partial void InsertUserRole(UserRole instance);
    partial void UpdateUserRole(UserRole instance);
    partial void DeleteUserRole(UserRole instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertLink(Link instance);
    partial void UpdateLink(Link instance);
    partial void DeleteLink(Link instance);
    partial void InsertContact(Contact instance);
    partial void UpdateContact(Contact instance);
    partial void DeleteContact(Contact instance);
    partial void InsertBlog(Blog instance);
    partial void UpdateBlog(Blog instance);
    partial void DeleteBlog(Blog instance);
    partial void InsertNotice(Notice instance);
    partial void UpdateNotice(Notice instance);
    partial void DeleteNotice(Notice instance);
    partial void InsertNoticeDistribution(NoticeDistribution instance);
    partial void UpdateNoticeDistribution(NoticeDistribution instance);
    partial void DeleteNoticeDistribution(NoticeDistribution instance);
    partial void InsertArticleSubject(ArticleSubject instance);
    partial void UpdateArticleSubject(ArticleSubject instance);
    partial void DeleteArticleSubject(ArticleSubject instance);
    partial void InsertBlogPostComment(BlogPostComment instance);
    partial void UpdateBlogPostComment(BlogPostComment instance);
    partial void DeleteBlogPostComment(BlogPostComment instance);
    partial void InsertBlogPostSubject(BlogPostSubject instance);
    partial void UpdateBlogPostSubject(BlogPostSubject instance);
    partial void DeleteBlogPostSubject(BlogPostSubject instance);
    partial void InsertBlogPostEvent(BlogPostEvent instance);
    partial void UpdateBlogPostEvent(BlogPostEvent instance);
    partial void DeleteBlogPostEvent(BlogPostEvent instance);
    partial void InsertBlogPostOrganization(BlogPostOrganization instance);
    partial void UpdateBlogPostOrganization(BlogPostOrganization instance);
    partial void DeleteBlogPostOrganization(BlogPostOrganization instance);
    partial void InsertBlogPostPerson(BlogPostPerson instance);
    partial void UpdateBlogPostPerson(BlogPostPerson instance);
    partial void DeleteBlogPostPerson(BlogPostPerson instance);
    partial void InsertBlogPostRegion(BlogPostRegion instance);
    partial void UpdateBlogPostRegion(BlogPostRegion instance);
    partial void DeleteBlogPostRegion(BlogPostRegion instance);
    partial void InsertDocumentAccess(DocumentAccess instance);
    partial void UpdateDocumentAccess(DocumentAccess instance);
    partial void DeleteDocumentAccess(DocumentAccess instance);
    partial void InsertDocumentFile(DocumentFile instance);
    partial void UpdateDocumentFile(DocumentFile instance);
    partial void DeleteDocumentFile(DocumentFile instance);
    partial void InsertDocumentLike(DocumentLike instance);
    partial void UpdateDocumentLike(DocumentLike instance);
    partial void DeleteDocumentLike(DocumentLike instance);
    partial void InsertDocumentLink(DocumentLink instance);
    partial void UpdateDocumentLink(DocumentLink instance);
    partial void DeleteDocumentLink(DocumentLink instance);
    partial void InsertDocumentOrganization(DocumentOrganization instance);
    partial void UpdateDocumentOrganization(DocumentOrganization instance);
    partial void DeleteDocumentOrganization(DocumentOrganization instance);
    partial void InsertDocumentComment(DocumentComment instance);
    partial void UpdateDocumentComment(DocumentComment instance);
    partial void DeleteDocumentComment(DocumentComment instance);
    partial void InsertEventAccess(EventAccess instance);
    partial void UpdateEventAccess(EventAccess instance);
    partial void DeleteEventAccess(EventAccess instance);
    partial void InsertEventSubject(EventSubject instance);
    partial void UpdateEventSubject(EventSubject instance);
    partial void DeleteEventSubject(EventSubject instance);
    partial void InsertEventComment(EventComment instance);
    partial void UpdateEventComment(EventComment instance);
    partial void DeleteEventComment(EventComment instance);
    partial void InsertEventFile(EventFile instance);
    partial void UpdateEventFile(EventFile instance);
    partial void DeleteEventFile(EventFile instance);
    partial void InsertEventLike(EventLike instance);
    partial void UpdateEventLike(EventLike instance);
    partial void DeleteEventLike(EventLike instance);
    partial void InsertEventLink(EventLink instance);
    partial void UpdateEventLink(EventLink instance);
    partial void DeleteEventLink(EventLink instance);
    partial void InsertEventOrganization(EventOrganization instance);
    partial void UpdateEventOrganization(EventOrganization instance);
    partial void DeleteEventOrganization(EventOrganization instance);
    partial void InsertEventPerson(EventPerson instance);
    partial void UpdateEventPerson(EventPerson instance);
    partial void DeleteEventPerson(EventPerson instance);
    partial void InsertEventRegion(EventRegion instance);
    partial void UpdateEventRegion(EventRegion instance);
    partial void DeleteEventRegion(EventRegion instance);
    partial void InsertImageAccess(ImageAccess instance);
    partial void UpdateImageAccess(ImageAccess instance);
    partial void DeleteImageAccess(ImageAccess instance);
    partial void InsertImageSubject(ImageSubject instance);
    partial void UpdateImageSubject(ImageSubject instance);
    partial void DeleteImageSubject(ImageSubject instance);
    partial void InsertImageComment(ImageComment instance);
    partial void UpdateImageComment(ImageComment instance);
    partial void DeleteImageComment(ImageComment instance);
    partial void InsertImageLike(ImageLike instance);
    partial void UpdateImageLike(ImageLike instance);
    partial void DeleteImageLike(ImageLike instance);
    partial void InsertImageLink(ImageLink instance);
    partial void UpdateImageLink(ImageLink instance);
    partial void DeleteImageLink(ImageLink instance);
    partial void InsertImagePerson(ImagePerson instance);
    partial void UpdateImagePerson(ImagePerson instance);
    partial void DeleteImagePerson(ImagePerson instance);
    partial void InsertImageRegion(ImageRegion instance);
    partial void UpdateImageRegion(ImageRegion instance);
    partial void DeleteImageRegion(ImageRegion instance);
    partial void InsertOrganizationAccess(OrganizationAccess instance);
    partial void UpdateOrganizationAccess(OrganizationAccess instance);
    partial void DeleteOrganizationAccess(OrganizationAccess instance);
    partial void InsertOrganizationSubject(OrganizationSubject instance);
    partial void UpdateOrganizationSubject(OrganizationSubject instance);
    partial void DeleteOrganizationSubject(OrganizationSubject instance);
    partial void InsertOrganizationContact(OrganizationContact instance);
    partial void UpdateOrganizationContact(OrganizationContact instance);
    partial void DeleteOrganizationContact(OrganizationContact instance);
    partial void InsertOrganizationLike(OrganizationLike instance);
    partial void UpdateOrganizationLike(OrganizationLike instance);
    partial void DeleteOrganizationLike(OrganizationLike instance);
    partial void InsertOrganizationLink(OrganizationLink instance);
    partial void UpdateOrganizationLink(OrganizationLink instance);
    partial void DeleteOrganizationLink(OrganizationLink instance);
    partial void InsertOrganizationRegion(OrganizationRegion instance);
    partial void UpdateOrganizationRegion(OrganizationRegion instance);
    partial void DeleteOrganizationRegion(OrganizationRegion instance);
    partial void InsertPersonAccess(PersonAccess instance);
    partial void UpdatePersonAccess(PersonAccess instance);
    partial void DeletePersonAccess(PersonAccess instance);
    partial void InsertPersonSubject(PersonSubject instance);
    partial void UpdatePersonSubject(PersonSubject instance);
    partial void DeletePersonSubject(PersonSubject instance);
    partial void InsertPersonContact(PersonContact instance);
    partial void UpdatePersonContact(PersonContact instance);
    partial void DeletePersonContact(PersonContact instance);
    partial void InsertPersonLink(PersonLink instance);
    partial void UpdatePersonLink(PersonLink instance);
    partial void DeletePersonLink(PersonLink instance);
    partial void InsertPersonOrganization(PersonOrganization instance);
    partial void UpdatePersonOrganization(PersonOrganization instance);
    partial void DeletePersonOrganization(PersonOrganization instance);
    partial void InsertPublicationAccess(PublicationAccess instance);
    partial void UpdatePublicationAccess(PublicationAccess instance);
    partial void DeletePublicationAccess(PublicationAccess instance);
    partial void InsertPublicationSubject(PublicationSubject instance);
    partial void UpdatePublicationSubject(PublicationSubject instance);
    partial void DeletePublicationSubject(PublicationSubject instance);
    partial void InsertPublicationComment(PublicationComment instance);
    partial void UpdatePublicationComment(PublicationComment instance);
    partial void DeletePublicationComment(PublicationComment instance);
    partial void InsertPublicationFile(PublicationFile instance);
    partial void UpdatePublicationFile(PublicationFile instance);
    partial void DeletePublicationFile(PublicationFile instance);
    partial void InsertPublicationLike(PublicationLike instance);
    partial void UpdatePublicationLike(PublicationLike instance);
    partial void DeletePublicationLike(PublicationLike instance);
    partial void InsertPublicationLink(PublicationLink instance);
    partial void UpdatePublicationLink(PublicationLink instance);
    partial void DeletePublicationLink(PublicationLink instance);
    partial void InsertPublicationOrganization(PublicationOrganization instance);
    partial void UpdatePublicationOrganization(PublicationOrganization instance);
    partial void DeletePublicationOrganization(PublicationOrganization instance);
    partial void InsertPublicationPerson(PublicationPerson instance);
    partial void UpdatePublicationPerson(PublicationPerson instance);
    partial void DeletePublicationPerson(PublicationPerson instance);
    partial void InsertPublicationRegion(PublicationRegion instance);
    partial void UpdatePublicationRegion(PublicationRegion instance);
    partial void DeletePublicationRegion(PublicationRegion instance);
    partial void InsertStudyMaterialSubject(StudyMaterialSubject instance);
    partial void UpdateStudyMaterialSubject(StudyMaterialSubject instance);
    partial void DeleteStudyMaterialSubject(StudyMaterialSubject instance);
    partial void InsertStudyMaterialComment(StudyMaterialComment instance);
    partial void UpdateStudyMaterialComment(StudyMaterialComment instance);
    partial void DeleteStudyMaterialComment(StudyMaterialComment instance);
    partial void InsertStudyMaterialFile(StudyMaterialFile instance);
    partial void UpdateStudyMaterialFile(StudyMaterialFile instance);
    partial void DeleteStudyMaterialFile(StudyMaterialFile instance);
    partial void InsertStudyMaterialLike(StudyMaterialLike instance);
    partial void UpdateStudyMaterialLike(StudyMaterialLike instance);
    partial void DeleteStudyMaterialLike(StudyMaterialLike instance);
    partial void InsertStudyMaterialLink(StudyMaterialLink instance);
    partial void UpdateStudyMaterialLink(StudyMaterialLink instance);
    partial void DeleteStudyMaterialLink(StudyMaterialLink instance);
    partial void InsertStudyMaterialPerson(StudyMaterialPerson instance);
    partial void UpdateStudyMaterialPerson(StudyMaterialPerson instance);
    partial void DeleteStudyMaterialPerson(StudyMaterialPerson instance);
    partial void InsertStudyMaterialRegion(StudyMaterialRegion instance);
    partial void UpdateStudyMaterialRegion(StudyMaterialRegion instance);
    partial void DeleteStudyMaterialRegion(StudyMaterialRegion instance);
    partial void InsertWebLinkAccess(WebLinkAccess instance);
    partial void UpdateWebLinkAccess(WebLinkAccess instance);
    partial void DeleteWebLinkAccess(WebLinkAccess instance);
    partial void InsertWebLinkSubject(WebLinkSubject instance);
    partial void UpdateWebLinkSubject(WebLinkSubject instance);
    partial void DeleteWebLinkSubject(WebLinkSubject instance);
    partial void InsertWebLinkComment(WebLinkComment instance);
    partial void UpdateWebLinkComment(WebLinkComment instance);
    partial void DeleteWebLinkComment(WebLinkComment instance);
    partial void InsertWebLinkLike(WebLinkLike instance);
    partial void UpdateWebLinkLike(WebLinkLike instance);
    partial void DeleteWebLinkLike(WebLinkLike instance);
    partial void InsertWebLinkRegion(WebLinkRegion instance);
    partial void UpdateWebLinkRegion(WebLinkRegion instance);
    partial void DeleteWebLinkRegion(WebLinkRegion instance);
    partial void InsertStudyMaterialOrganization(StudyMaterialOrganization instance);
    partial void UpdateStudyMaterialOrganization(StudyMaterialOrganization instance);
    partial void DeleteStudyMaterialOrganization(StudyMaterialOrganization instance);
    partial void InsertFile(File instance);
    partial void UpdateFile(File instance);
    partial void DeleteFile(File instance);
    partial void InsertArticle(Article instance);
    partial void UpdateArticle(Article instance);
    partial void DeleteArticle(Article instance);
    partial void InsertDocument(Document instance);
    partial void UpdateDocument(Document instance);
    partial void DeleteDocument(Document instance);
    partial void InsertSubject(Subject instance);
    partial void UpdateSubject(Subject instance);
    partial void DeleteSubject(Subject instance);
    partial void InsertImage(Image instance);
    partial void UpdateImage(Image instance);
    partial void DeleteImage(Image instance);
    partial void InsertStudyMaterial(StudyMaterial instance);
    partial void UpdateStudyMaterial(StudyMaterial instance);
    partial void DeleteStudyMaterial(StudyMaterial instance);
    partial void InsertWebLink(WebLink instance);
    partial void UpdateWebLink(WebLink instance);
    partial void DeleteWebLink(WebLink instance);
    partial void InsertPersonRegion(PersonRegion instance);
    partial void UpdatePersonRegion(PersonRegion instance);
    partial void DeletePersonRegion(PersonRegion instance);
    partial void InsertDocumentSubject(DocumentSubject instance);
    partial void UpdateDocumentSubject(DocumentSubject instance);
    partial void DeleteDocumentSubject(DocumentSubject instance);
    partial void InsertDocumentRegion(DocumentRegion instance);
    partial void UpdateDocumentRegion(DocumentRegion instance);
    partial void DeleteDocumentRegion(DocumentRegion instance);
    partial void InsertStudyMaterialAccess(StudyMaterialAccess instance);
    partial void UpdateStudyMaterialAccess(StudyMaterialAccess instance);
    partial void DeleteStudyMaterialAccess(StudyMaterialAccess instance);
    partial void InsertRecordRedirect(RecordRedirect instance);
    partial void UpdateRecordRedirect(RecordRedirect instance);
    partial void DeleteRecordRedirect(RecordRedirect instance);
    partial void InsertArticleRecordRedirect(ArticleRecordRedirect instance);
    partial void UpdateArticleRecordRedirect(ArticleRecordRedirect instance);
    partial void DeleteArticleRecordRedirect(ArticleRecordRedirect instance);
    partial void InsertBlogPostRecordRedirect(BlogPostRecordRedirect instance);
    partial void UpdateBlogPostRecordRedirect(BlogPostRecordRedirect instance);
    partial void DeleteBlogPostRecordRedirect(BlogPostRecordRedirect instance);
    partial void InsertDocumentRecordRedirect(DocumentRecordRedirect instance);
    partial void UpdateDocumentRecordRedirect(DocumentRecordRedirect instance);
    partial void DeleteDocumentRecordRedirect(DocumentRecordRedirect instance);
    partial void InsertEventRecordRedirect(EventRecordRedirect instance);
    partial void UpdateEventRecordRedirect(EventRecordRedirect instance);
    partial void DeleteEventRecordRedirect(EventRecordRedirect instance);
    partial void InsertImageRecordRedirect(ImageRecordRedirect instance);
    partial void UpdateImageRecordRedirect(ImageRecordRedirect instance);
    partial void DeleteImageRecordRedirect(ImageRecordRedirect instance);
    partial void InsertOrganizationRecordRedirect(OrganizationRecordRedirect instance);
    partial void UpdateOrganizationRecordRedirect(OrganizationRecordRedirect instance);
    partial void DeleteOrganizationRecordRedirect(OrganizationRecordRedirect instance);
    partial void InsertPersonRecordRedirect(PersonRecordRedirect instance);
    partial void UpdatePersonRecordRedirect(PersonRecordRedirect instance);
    partial void DeletePersonRecordRedirect(PersonRecordRedirect instance);
    partial void InsertPublicationRecordRedirect(PublicationRecordRedirect instance);
    partial void UpdatePublicationRecordRedirect(PublicationRecordRedirect instance);
    partial void DeletePublicationRecordRedirect(PublicationRecordRedirect instance);
    partial void InsertStudyMaterialRecordRedirect(StudyMaterialRecordRedirect instance);
    partial void UpdateStudyMaterialRecordRedirect(StudyMaterialRecordRedirect instance);
    partial void DeleteStudyMaterialRecordRedirect(StudyMaterialRecordRedirect instance);
    partial void InsertWebLinkRecordRedirect(WebLinkRecordRedirect instance);
    partial void UpdateWebLinkRecordRedirect(WebLinkRecordRedirect instance);
    partial void DeleteWebLinkRecordRedirect(WebLinkRecordRedirect instance);
    partial void InsertRedirect(Redirect instance);
    partial void UpdateRedirect(Redirect instance);
    partial void DeleteRedirect(Redirect instance);
    partial void InsertUserEmail(UserEmail instance);
    partial void UpdateUserEmail(UserEmail instance);
    partial void DeleteUserEmail(UserEmail instance);
    partial void InsertSetting(Setting instance);
    partial void UpdateSetting(Setting instance);
    partial void DeleteSetting(Setting instance);
    partial void InsertCommentLike(CommentLike instance);
    partial void UpdateCommentLike(CommentLike instance);
    partial void DeleteCommentLike(CommentLike instance);
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertPage(Page instance);
    partial void UpdatePage(Page instance);
    partial void DeletePage(Page instance);
    partial void InsertPublication(Publication instance);
    partial void UpdatePublication(Publication instance);
    partial void DeletePublication(Publication instance);
    partial void InsertRegion(Region instance);
    partial void UpdateRegion(Region instance);
    partial void DeleteRegion(Region instance);
    partial void InsertBlogPost(BlogPost instance);
    partial void UpdateBlogPost(BlogPost instance);
    partial void DeleteBlogPost(BlogPost instance);
    partial void InsertPublicationSubscription(PublicationSubscription instance);
    partial void UpdatePublicationSubscription(PublicationSubscription instance);
    partial void DeletePublicationSubscription(PublicationSubscription instance);
    partial void InsertEventSubscription(EventSubscription instance);
    partial void UpdateEventSubscription(EventSubscription instance);
    partial void DeleteEventSubscription(EventSubscription instance);
    partial void InsertImageSubscription(ImageSubscription instance);
    partial void UpdateImageSubscription(ImageSubscription instance);
    partial void DeleteImageSubscription(ImageSubscription instance);
    partial void InsertBlogPostSubscription(BlogPostSubscription instance);
    partial void UpdateBlogPostSubscription(BlogPostSubscription instance);
    partial void DeleteBlogPostSubscription(BlogPostSubscription instance);
    partial void InsertWebLinkSubscription(WebLinkSubscription instance);
    partial void UpdateWebLinkSubscription(WebLinkSubscription instance);
    partial void DeleteWebLinkSubscription(WebLinkSubscription instance);
    partial void InsertStudyMaterialSubscription(StudyMaterialSubscription instance);
    partial void UpdateStudyMaterialSubscription(StudyMaterialSubscription instance);
    partial void DeleteStudyMaterialSubscription(StudyMaterialSubscription instance);
    partial void InsertDocumentSubscription(DocumentSubscription instance);
    partial void UpdateDocumentSubscription(DocumentSubscription instance);
    partial void DeleteDocumentSubscription(DocumentSubscription instance);
    partial void InsertSubjectSubscription(SubjectSubscription instance);
    partial void UpdateSubjectSubscription(SubjectSubscription instance);
    partial void DeleteSubjectSubscription(SubjectSubscription instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertBlogPostLike(BlogPostLike instance);
    partial void UpdateBlogPostLike(BlogPostLike instance);
    partial void DeleteBlogPostLike(BlogPostLike instance);
    partial void InsertPerson(Person instance);
    partial void UpdatePerson(Person instance);
    partial void DeletePerson(Person instance);
    partial void InsertBlogParser(BlogParser instance);
    partial void UpdateBlogParser(BlogParser instance);
    partial void DeleteBlogParser(BlogParser instance);
    partial void InsertUpdateRecord(UpdateRecord instance);
    partial void UpdateUpdateRecord(UpdateRecord instance);
    partial void DeleteUpdateRecord(UpdateRecord instance);
    partial void InsertInvite(Invite instance);
    partial void UpdateInvite(Invite instance);
    partial void DeleteInvite(Invite instance);
    partial void InsertSubscriptionTemplate(SubscriptionTemplate instance);
    partial void UpdateSubscriptionTemplate(SubscriptionTemplate instance);
    partial void DeleteSubscriptionTemplate(SubscriptionTemplate instance);
    partial void InsertSubscriptionPart(SubscriptionPart instance);
    partial void UpdateSubscriptionPart(SubscriptionPart instance);
    partial void DeleteSubscriptionPart(SubscriptionPart instance);
    partial void InsertDistribution(Distribution instance);
    partial void UpdateDistribution(Distribution instance);
    partial void DeleteDistribution(Distribution instance);
    partial void InsertMail(Mail instance);
    partial void UpdateMail(Mail instance);
    partial void DeleteMail(Mail instance);
    partial void InsertEvent(Event instance);
    partial void UpdateEvent(Event instance);
    partial void DeleteEvent(Event instance);
    partial void InsertOrganization(Organization instance);
    partial void UpdateOrganization(Organization instance);
    partial void DeleteOrganization(Organization instance);
    #endregion
		
		public genderDbDataContext() : 
				base(global::gender.Model.Properties.Settings.Default.genderConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public genderDbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public genderDbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public genderDbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public genderDbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<UserSocial> UserSocials
		{
			get
			{
				return this.GetTable<UserSocial>();
			}
		}
		
		public System.Data.Linq.Table<UserRole> UserRoles
		{
			get
			{
				return this.GetTable<UserRole>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Link> Links
		{
			get
			{
				return this.GetTable<Link>();
			}
		}
		
		public System.Data.Linq.Table<Contact> Contacts
		{
			get
			{
				return this.GetTable<Contact>();
			}
		}
		
		public System.Data.Linq.Table<Blog> Blogs
		{
			get
			{
				return this.GetTable<Blog>();
			}
		}
		
		public System.Data.Linq.Table<Notice> Notices
		{
			get
			{
				return this.GetTable<Notice>();
			}
		}
		
		public System.Data.Linq.Table<NoticeDistribution> NoticeDistributions
		{
			get
			{
				return this.GetTable<NoticeDistribution>();
			}
		}
		
		public System.Data.Linq.Table<ArticleSubject> ArticleSubjects
		{
			get
			{
				return this.GetTable<ArticleSubject>();
			}
		}
		
		public System.Data.Linq.Table<BlogPostComment> BlogPostComments
		{
			get
			{
				return this.GetTable<BlogPostComment>();
			}
		}
		
		public System.Data.Linq.Table<BlogPostSubject> BlogPostSubjects
		{
			get
			{
				return this.GetTable<BlogPostSubject>();
			}
		}
		
		public System.Data.Linq.Table<BlogPostEvent> BlogPostEvents
		{
			get
			{
				return this.GetTable<BlogPostEvent>();
			}
		}
		
		public System.Data.Linq.Table<BlogPostOrganization> BlogPostOrganizations
		{
			get
			{
				return this.GetTable<BlogPostOrganization>();
			}
		}
		
		public System.Data.Linq.Table<BlogPostPerson> BlogPostPersons
		{
			get
			{
				return this.GetTable<BlogPostPerson>();
			}
		}
		
		public System.Data.Linq.Table<BlogPostRegion> BlogPostRegions
		{
			get
			{
				return this.GetTable<BlogPostRegion>();
			}
		}
		
		public System.Data.Linq.Table<DocumentAccess> DocumentAccesses
		{
			get
			{
				return this.GetTable<DocumentAccess>();
			}
		}
		
		public System.Data.Linq.Table<DocumentFile> DocumentFiles
		{
			get
			{
				return this.GetTable<DocumentFile>();
			}
		}
		
		public System.Data.Linq.Table<DocumentLike> DocumentLikes
		{
			get
			{
				return this.GetTable<DocumentLike>();
			}
		}
		
		public System.Data.Linq.Table<DocumentLink> DocumentLinks
		{
			get
			{
				return this.GetTable<DocumentLink>();
			}
		}
		
		public System.Data.Linq.Table<DocumentOrganization> DocumentOrganizations
		{
			get
			{
				return this.GetTable<DocumentOrganization>();
			}
		}
		
		public System.Data.Linq.Table<DocumentComment> DocumentComments
		{
			get
			{
				return this.GetTable<DocumentComment>();
			}
		}
		
		public System.Data.Linq.Table<EventAccess> EventAccesses
		{
			get
			{
				return this.GetTable<EventAccess>();
			}
		}
		
		public System.Data.Linq.Table<EventSubject> EventSubjects
		{
			get
			{
				return this.GetTable<EventSubject>();
			}
		}
		
		public System.Data.Linq.Table<EventComment> EventComments
		{
			get
			{
				return this.GetTable<EventComment>();
			}
		}
		
		public System.Data.Linq.Table<EventFile> EventFiles
		{
			get
			{
				return this.GetTable<EventFile>();
			}
		}
		
		public System.Data.Linq.Table<EventLike> EventLikes
		{
			get
			{
				return this.GetTable<EventLike>();
			}
		}
		
		public System.Data.Linq.Table<EventLink> EventLinks
		{
			get
			{
				return this.GetTable<EventLink>();
			}
		}
		
		public System.Data.Linq.Table<EventOrganization> EventOrganizations
		{
			get
			{
				return this.GetTable<EventOrganization>();
			}
		}
		
		public System.Data.Linq.Table<EventPerson> EventPersons
		{
			get
			{
				return this.GetTable<EventPerson>();
			}
		}
		
		public System.Data.Linq.Table<EventRegion> EventRegions
		{
			get
			{
				return this.GetTable<EventRegion>();
			}
		}
		
		public System.Data.Linq.Table<ImageAccess> ImageAccesses
		{
			get
			{
				return this.GetTable<ImageAccess>();
			}
		}
		
		public System.Data.Linq.Table<ImageSubject> ImageSubjects
		{
			get
			{
				return this.GetTable<ImageSubject>();
			}
		}
		
		public System.Data.Linq.Table<ImageComment> ImageComments
		{
			get
			{
				return this.GetTable<ImageComment>();
			}
		}
		
		public System.Data.Linq.Table<ImageLike> ImageLikes
		{
			get
			{
				return this.GetTable<ImageLike>();
			}
		}
		
		public System.Data.Linq.Table<ImageLink> ImageLinks
		{
			get
			{
				return this.GetTable<ImageLink>();
			}
		}
		
		public System.Data.Linq.Table<ImagePerson> ImagePersons
		{
			get
			{
				return this.GetTable<ImagePerson>();
			}
		}
		
		public System.Data.Linq.Table<ImageRegion> ImageRegions
		{
			get
			{
				return this.GetTable<ImageRegion>();
			}
		}
		
		public System.Data.Linq.Table<OrganizationAccess> OrganizationAccesses
		{
			get
			{
				return this.GetTable<OrganizationAccess>();
			}
		}
		
		public System.Data.Linq.Table<OrganizationSubject> OrganizationSubjects
		{
			get
			{
				return this.GetTable<OrganizationSubject>();
			}
		}
		
		public System.Data.Linq.Table<OrganizationContact> OrganizationContacts
		{
			get
			{
				return this.GetTable<OrganizationContact>();
			}
		}
		
		public System.Data.Linq.Table<OrganizationLike> OrganizationLikes
		{
			get
			{
				return this.GetTable<OrganizationLike>();
			}
		}
		
		public System.Data.Linq.Table<OrganizationLink> OrganizationLinks
		{
			get
			{
				return this.GetTable<OrganizationLink>();
			}
		}
		
		public System.Data.Linq.Table<OrganizationRegion> OrganizationRegions
		{
			get
			{
				return this.GetTable<OrganizationRegion>();
			}
		}
		
		public System.Data.Linq.Table<PersonAccess> PersonAccesses
		{
			get
			{
				return this.GetTable<PersonAccess>();
			}
		}
		
		public System.Data.Linq.Table<PersonSubject> PersonSubjects
		{
			get
			{
				return this.GetTable<PersonSubject>();
			}
		}
		
		public System.Data.Linq.Table<PersonContact> PersonContacts
		{
			get
			{
				return this.GetTable<PersonContact>();
			}
		}
		
		public System.Data.Linq.Table<PersonLink> PersonLinks
		{
			get
			{
				return this.GetTable<PersonLink>();
			}
		}
		
		public System.Data.Linq.Table<PersonOrganization> PersonOrganizations
		{
			get
			{
				return this.GetTable<PersonOrganization>();
			}
		}
		
		public System.Data.Linq.Table<PublicationAccess> PublicationAccesses
		{
			get
			{
				return this.GetTable<PublicationAccess>();
			}
		}
		
		public System.Data.Linq.Table<PublicationSubject> PublicationSubjects
		{
			get
			{
				return this.GetTable<PublicationSubject>();
			}
		}
		
		public System.Data.Linq.Table<PublicationComment> PublicationComments
		{
			get
			{
				return this.GetTable<PublicationComment>();
			}
		}
		
		public System.Data.Linq.Table<PublicationFile> PublicationFiles
		{
			get
			{
				return this.GetTable<PublicationFile>();
			}
		}
		
		public System.Data.Linq.Table<PublicationLike> PublicationLikes
		{
			get
			{
				return this.GetTable<PublicationLike>();
			}
		}
		
		public System.Data.Linq.Table<PublicationLink> PublicationLinks
		{
			get
			{
				return this.GetTable<PublicationLink>();
			}
		}
		
		public System.Data.Linq.Table<PublicationOrganization> PublicationOrganizations
		{
			get
			{
				return this.GetTable<PublicationOrganization>();
			}
		}
		
		public System.Data.Linq.Table<PublicationPerson> PublicationPersons
		{
			get
			{
				return this.GetTable<PublicationPerson>();
			}
		}
		
		public System.Data.Linq.Table<PublicationRegion> PublicationRegions
		{
			get
			{
				return this.GetTable<PublicationRegion>();
			}
		}
		
		public System.Data.Linq.Table<StudyMaterialSubject> StudyMaterialSubjects
		{
			get
			{
				return this.GetTable<StudyMaterialSubject>();
			}
		}
		
		public System.Data.Linq.Table<StudyMaterialComment> StudyMaterialComments
		{
			get
			{
				return this.GetTable<StudyMaterialComment>();
			}
		}
		
		public System.Data.Linq.Table<StudyMaterialFile> StudyMaterialFiles
		{
			get
			{
				return this.GetTable<StudyMaterialFile>();
			}
		}
		
		public System.Data.Linq.Table<StudyMaterialLike> StudyMaterialLikes
		{
			get
			{
				return this.GetTable<StudyMaterialLike>();
			}
		}
		
		public System.Data.Linq.Table<StudyMaterialLink> StudyMaterialLinks
		{
			get
			{
				return this.GetTable<StudyMaterialLink>();
			}
		}
		
		public System.Data.Linq.Table<StudyMaterialPerson> StudyMaterialPersons
		{
			get
			{
				return this.GetTable<StudyMaterialPerson>();
			}
		}
		
		public System.Data.Linq.Table<StudyMaterialRegion> StudyMaterialRegions
		{
			get
			{
				return this.GetTable<StudyMaterialRegion>();
			}
		}
		
		public System.Data.Linq.Table<WebLinkAccess> WebLinkAccesses
		{
			get
			{
				return this.GetTable<WebLinkAccess>();
			}
		}
		
		public System.Data.Linq.Table<WebLinkSubject> WebLinkSubjects
		{
			get
			{
				return this.GetTable<WebLinkSubject>();
			}
		}
		
		public System.Data.Linq.Table<WebLinkComment> WebLinkComments
		{
			get
			{
				return this.GetTable<WebLinkComment>();
			}
		}
		
		public System.Data.Linq.Table<WebLinkLike> WebLinkLikes
		{
			get
			{
				return this.GetTable<WebLinkLike>();
			}
		}
		
		public System.Data.Linq.Table<WebLinkRegion> WebLinkRegions
		{
			get
			{
				return this.GetTable<WebLinkRegion>();
			}
		}
		
		public System.Data.Linq.Table<StudyMaterialOrganization> StudyMaterialOrganizations
		{
			get
			{
				return this.GetTable<StudyMaterialOrganization>();
			}
		}
		
		public System.Data.Linq.Table<File> Files
		{
			get
			{
				return this.GetTable<File>();
			}
		}
		
		public System.Data.Linq.Table<Article> Articles
		{
			get
			{
				return this.GetTable<Article>();
			}
		}
		
		public System.Data.Linq.Table<Document> Documents
		{
			get
			{
				return this.GetTable<Document>();
			}
		}
		
		public System.Data.Linq.Table<Subject> Subjects
		{
			get
			{
				return this.GetTable<Subject>();
			}
		}
		
		public System.Data.Linq.Table<Image> Images
		{
			get
			{
				return this.GetTable<Image>();
			}
		}
		
		public System.Data.Linq.Table<StudyMaterial> StudyMaterials
		{
			get
			{
				return this.GetTable<StudyMaterial>();
			}
		}
		
		public System.Data.Linq.Table<WebLink> WebLinks
		{
			get
			{
				return this.GetTable<WebLink>();
			}
		}
		
		public System.Data.Linq.Table<PersonRegion> PersonRegions
		{
			get
			{
				return this.GetTable<PersonRegion>();
			}
		}
		
		public System.Data.Linq.Table<DocumentSubject> DocumentSubjects
		{
			get
			{
				return this.GetTable<DocumentSubject>();
			}
		}
		
		public System.Data.Linq.Table<DocumentRegion> DocumentRegions
		{
			get
			{
				return this.GetTable<DocumentRegion>();
			}
		}
		
		public System.Data.Linq.Table<StudyMaterialAccess> StudyMaterialAccesses
		{
			get
			{
				return this.GetTable<StudyMaterialAccess>();
			}
		}
		
		public System.Data.Linq.Table<RecordRedirect> RecordRedirects
		{
			get
			{
				return this.GetTable<RecordRedirect>();
			}
		}
		
		public System.Data.Linq.Table<ArticleRecordRedirect> ArticleRecordRedirects
		{
			get
			{
				return this.GetTable<ArticleRecordRedirect>();
			}
		}
		
		public System.Data.Linq.Table<BlogPostRecordRedirect> BlogPostRecordRedirects
		{
			get
			{
				return this.GetTable<BlogPostRecordRedirect>();
			}
		}
		
		public System.Data.Linq.Table<DocumentRecordRedirect> DocumentRecordRedirects
		{
			get
			{
				return this.GetTable<DocumentRecordRedirect>();
			}
		}
		
		public System.Data.Linq.Table<EventRecordRedirect> EventRecordRedirects
		{
			get
			{
				return this.GetTable<EventRecordRedirect>();
			}
		}
		
		public System.Data.Linq.Table<ImageRecordRedirect> ImageRecordRedirects
		{
			get
			{
				return this.GetTable<ImageRecordRedirect>();
			}
		}
		
		public System.Data.Linq.Table<OrganizationRecordRedirect> OrganizationRecordRedirects
		{
			get
			{
				return this.GetTable<OrganizationRecordRedirect>();
			}
		}
		
		public System.Data.Linq.Table<PersonRecordRedirect> PersonRecordRedirects
		{
			get
			{
				return this.GetTable<PersonRecordRedirect>();
			}
		}
		
		public System.Data.Linq.Table<PublicationRecordRedirect> PublicationRecordRedirects
		{
			get
			{
				return this.GetTable<PublicationRecordRedirect>();
			}
		}
		
		public System.Data.Linq.Table<StudyMaterialRecordRedirect> StudyMaterialRecordRedirects
		{
			get
			{
				return this.GetTable<StudyMaterialRecordRedirect>();
			}
		}
		
		public System.Data.Linq.Table<WebLinkRecordRedirect> WebLinkRecordRedirects
		{
			get
			{
				return this.GetTable<WebLinkRecordRedirect>();
			}
		}
		
		public System.Data.Linq.Table<Redirect> Redirects
		{
			get
			{
				return this.GetTable<Redirect>();
			}
		}
		
		public System.Data.Linq.Table<UserEmail> UserEmails
		{
			get
			{
				return this.GetTable<UserEmail>();
			}
		}
		
		public System.Data.Linq.Table<Setting> Settings
		{
			get
			{
				return this.GetTable<Setting>();
			}
		}
		
		public System.Data.Linq.Table<CommentLike> CommentLikes
		{
			get
			{
				return this.GetTable<CommentLike>();
			}
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<Page> Pages
		{
			get
			{
				return this.GetTable<Page>();
			}
		}
		
		public System.Data.Linq.Table<Publication> Publications
		{
			get
			{
				return this.GetTable<Publication>();
			}
		}
		
		public System.Data.Linq.Table<Region> Regions
		{
			get
			{
				return this.GetTable<Region>();
			}
		}
		
		public System.Data.Linq.Table<BlogPost> BlogPosts
		{
			get
			{
				return this.GetTable<BlogPost>();
			}
		}
		
		public System.Data.Linq.Table<PublicationSubscription> PublicationSubscriptions
		{
			get
			{
				return this.GetTable<PublicationSubscription>();
			}
		}
		
		public System.Data.Linq.Table<EventSubscription> EventSubscriptions
		{
			get
			{
				return this.GetTable<EventSubscription>();
			}
		}
		
		public System.Data.Linq.Table<ImageSubscription> ImageSubscriptions
		{
			get
			{
				return this.GetTable<ImageSubscription>();
			}
		}
		
		public System.Data.Linq.Table<BlogPostSubscription> BlogPostSubscriptions
		{
			get
			{
				return this.GetTable<BlogPostSubscription>();
			}
		}
		
		public System.Data.Linq.Table<WebLinkSubscription> WebLinkSubscriptions
		{
			get
			{
				return this.GetTable<WebLinkSubscription>();
			}
		}
		
		public System.Data.Linq.Table<StudyMaterialSubscription> StudyMaterialSubscriptions
		{
			get
			{
				return this.GetTable<StudyMaterialSubscription>();
			}
		}
		
		public System.Data.Linq.Table<DocumentSubscription> DocumentSubscriptions
		{
			get
			{
				return this.GetTable<DocumentSubscription>();
			}
		}
		
		public System.Data.Linq.Table<SubjectSubscription> SubjectSubscriptions
		{
			get
			{
				return this.GetTable<SubjectSubscription>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<BlogPostLike> BlogPostLikes
		{
			get
			{
				return this.GetTable<BlogPostLike>();
			}
		}
		
		public System.Data.Linq.Table<Person> Persons
		{
			get
			{
				return this.GetTable<Person>();
			}
		}
		
		public System.Data.Linq.Table<BlogParser> BlogParsers
		{
			get
			{
				return this.GetTable<BlogParser>();
			}
		}
		
		public System.Data.Linq.Table<UpdateRecord> UpdateRecords
		{
			get
			{
				return this.GetTable<UpdateRecord>();
			}
		}
		
		public System.Data.Linq.Table<Invite> Invites
		{
			get
			{
				return this.GetTable<Invite>();
			}
		}
		
		public System.Data.Linq.Table<SubscriptionTemplate> SubscriptionTemplates
		{
			get
			{
				return this.GetTable<SubscriptionTemplate>();
			}
		}
		
		public System.Data.Linq.Table<SubscriptionPart> SubscriptionParts
		{
			get
			{
				return this.GetTable<SubscriptionPart>();
			}
		}
		
		public System.Data.Linq.Table<Distribution> Distributions
		{
			get
			{
				return this.GetTable<Distribution>();
			}
		}
		
		public System.Data.Linq.Table<Mail> Mails
		{
			get
			{
				return this.GetTable<Mail>();
			}
		}
		
		public System.Data.Linq.Table<Event> Events
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		public System.Data.Linq.Table<Organization> Organizations
		{
			get
			{
				return this.GetTable<Organization>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserSocial")]
	public partial class UserSocial : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private int _Provider;
		
		private string _Link;
		
		private string _Identified;
		
		private string _UserInfo;
		
		private string _JsonResource;
		
		private System.Nullable<System.DateTime> _ExpiredBy;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnProviderChanging(int value);
    partial void OnProviderChanged();
    partial void OnLinkChanging(string value);
    partial void OnLinkChanged();
    partial void OnIdentifiedChanging(string value);
    partial void OnIdentifiedChanged();
    partial void OnUserInfoChanging(string value);
    partial void OnUserInfoChanged();
    partial void OnJsonResourceChanging(string value);
    partial void OnJsonResourceChanged();
    partial void OnExpiredByChanging(System.Nullable<System.DateTime> value);
    partial void OnExpiredByChanged();
    #endregion
		
		public UserSocial()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Provider", DbType="Int NOT NULL")]
		public int Provider
		{
			get
			{
				return this._Provider;
			}
			set
			{
				if ((this._Provider != value))
				{
					this.OnProviderChanging(value);
					this.SendPropertyChanging();
					this._Provider = value;
					this.SendPropertyChanged("Provider");
					this.OnProviderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Link", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Link
		{
			get
			{
				return this._Link;
			}
			set
			{
				if ((this._Link != value))
				{
					this.OnLinkChanging(value);
					this.SendPropertyChanging();
					this._Link = value;
					this.SendPropertyChanged("Link");
					this.OnLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Identified", DbType="NVarChar(MAX)")]
		public string Identified
		{
			get
			{
				return this._Identified;
			}
			set
			{
				if ((this._Identified != value))
				{
					this.OnIdentifiedChanging(value);
					this.SendPropertyChanging();
					this._Identified = value;
					this.SendPropertyChanged("Identified");
					this.OnIdentifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserInfo", DbType="NVarChar(MAX)")]
		public string UserInfo
		{
			get
			{
				return this._UserInfo;
			}
			set
			{
				if ((this._UserInfo != value))
				{
					this.OnUserInfoChanging(value);
					this.SendPropertyChanging();
					this._UserInfo = value;
					this.SendPropertyChanged("UserInfo");
					this.OnUserInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JsonResource", DbType="NVarChar(MAX)")]
		public string JsonResource
		{
			get
			{
				return this._JsonResource;
			}
			set
			{
				if ((this._JsonResource != value))
				{
					this.OnJsonResourceChanging(value);
					this.SendPropertyChanging();
					this._JsonResource = value;
					this.SendPropertyChanged("JsonResource");
					this.OnJsonResourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpiredBy", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExpiredBy
		{
			get
			{
				return this._ExpiredBy;
			}
			set
			{
				if ((this._ExpiredBy != value))
				{
					this.OnExpiredByChanging(value);
					this.SendPropertyChanging();
					this._ExpiredBy = value;
					this.SendPropertyChanged("ExpiredBy");
					this.OnExpiredByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserSocial", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserSocials.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserSocials.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRole")]
	public partial class UserRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _RoleID;
		
		private int _UserID;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public UserRole()
		{
			this._Role = default(EntityRef<Role>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL")]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserRole", Storage="_Role", ThisKey="RoleID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.UserRoles.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.UserRoles.Add(this);
						this._RoleID = value.ID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRole", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserRoles.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserRoles.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Code;
		
		private string _Name;
		
		private EntitySet<UserRole> _UserRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Role()
		{
			this._UserRoles = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRoles), new Action<UserRole>(this.detach_UserRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserRole", Storage="_UserRoles", ThisKey="ID", OtherKey="RoleID")]
		public EntitySet<UserRole> UserRoles
		{
			get
			{
				return this._UserRoles;
			}
			set
			{
				this._UserRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Link")]
	public partial class Link : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Url;
		
		private string _Icon;
		
		private string _Title;
		
		private EntitySet<DocumentLink> _DocumentLinks;
		
		private EntitySet<EventLink> _EventLinks;
		
		private EntitySet<ImageLink> _ImageLinks;
		
		private EntitySet<OrganizationLink> _OrganizationLinks;
		
		private EntitySet<PersonLink> _PersonLinks;
		
		private EntitySet<PublicationLink> _PublicationLinks;
		
		private EntitySet<StudyMaterialLink> _StudyMaterialLinks;
		
		private EntitySet<BlogPost> _BlogPosts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnIconChanging(string value);
    partial void OnIconChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public Link()
		{
			this._DocumentLinks = new EntitySet<DocumentLink>(new Action<DocumentLink>(this.attach_DocumentLinks), new Action<DocumentLink>(this.detach_DocumentLinks));
			this._EventLinks = new EntitySet<EventLink>(new Action<EventLink>(this.attach_EventLinks), new Action<EventLink>(this.detach_EventLinks));
			this._ImageLinks = new EntitySet<ImageLink>(new Action<ImageLink>(this.attach_ImageLinks), new Action<ImageLink>(this.detach_ImageLinks));
			this._OrganizationLinks = new EntitySet<OrganizationLink>(new Action<OrganizationLink>(this.attach_OrganizationLinks), new Action<OrganizationLink>(this.detach_OrganizationLinks));
			this._PersonLinks = new EntitySet<PersonLink>(new Action<PersonLink>(this.attach_PersonLinks), new Action<PersonLink>(this.detach_PersonLinks));
			this._PublicationLinks = new EntitySet<PublicationLink>(new Action<PublicationLink>(this.attach_PublicationLinks), new Action<PublicationLink>(this.detach_PublicationLinks));
			this._StudyMaterialLinks = new EntitySet<StudyMaterialLink>(new Action<StudyMaterialLink>(this.attach_StudyMaterialLinks), new Action<StudyMaterialLink>(this.detach_StudyMaterialLinks));
			this._BlogPosts = new EntitySet<BlogPost>(new Action<BlogPost>(this.attach_BlogPosts), new Action<BlogPost>(this.detach_BlogPosts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Icon", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Icon
		{
			get
			{
				return this._Icon;
			}
			set
			{
				if ((this._Icon != value))
				{
					this.OnIconChanging(value);
					this.SendPropertyChanging();
					this._Icon = value;
					this.SendPropertyChanged("Icon");
					this.OnIconChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Link_DocumentLink", Storage="_DocumentLinks", ThisKey="ID", OtherKey="LinkID")]
		public EntitySet<DocumentLink> DocumentLinks
		{
			get
			{
				return this._DocumentLinks;
			}
			set
			{
				this._DocumentLinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Link_EventLink", Storage="_EventLinks", ThisKey="ID", OtherKey="LinkID")]
		public EntitySet<EventLink> EventLinks
		{
			get
			{
				return this._EventLinks;
			}
			set
			{
				this._EventLinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Link_ImageLink", Storage="_ImageLinks", ThisKey="ID", OtherKey="LinkID")]
		public EntitySet<ImageLink> ImageLinks
		{
			get
			{
				return this._ImageLinks;
			}
			set
			{
				this._ImageLinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Link_OrganizationLink", Storage="_OrganizationLinks", ThisKey="ID", OtherKey="LinkID")]
		public EntitySet<OrganizationLink> OrganizationLinks
		{
			get
			{
				return this._OrganizationLinks;
			}
			set
			{
				this._OrganizationLinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Link_PersonLink", Storage="_PersonLinks", ThisKey="ID", OtherKey="LinkID")]
		public EntitySet<PersonLink> PersonLinks
		{
			get
			{
				return this._PersonLinks;
			}
			set
			{
				this._PersonLinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Link_PublicationLink", Storage="_PublicationLinks", ThisKey="ID", OtherKey="LinkID")]
		public EntitySet<PublicationLink> PublicationLinks
		{
			get
			{
				return this._PublicationLinks;
			}
			set
			{
				this._PublicationLinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Link_StudyMaterialLink", Storage="_StudyMaterialLinks", ThisKey="ID", OtherKey="LinkID")]
		public EntitySet<StudyMaterialLink> StudyMaterialLinks
		{
			get
			{
				return this._StudyMaterialLinks;
			}
			set
			{
				this._StudyMaterialLinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Link_BlogPost", Storage="_BlogPosts", ThisKey="ID", OtherKey="LinkID")]
		public EntitySet<BlogPost> BlogPosts
		{
			get
			{
				return this._BlogPosts;
			}
			set
			{
				this._BlogPosts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DocumentLinks(DocumentLink entity)
		{
			this.SendPropertyChanging();
			entity.Link = this;
		}
		
		private void detach_DocumentLinks(DocumentLink entity)
		{
			this.SendPropertyChanging();
			entity.Link = null;
		}
		
		private void attach_EventLinks(EventLink entity)
		{
			this.SendPropertyChanging();
			entity.Link = this;
		}
		
		private void detach_EventLinks(EventLink entity)
		{
			this.SendPropertyChanging();
			entity.Link = null;
		}
		
		private void attach_ImageLinks(ImageLink entity)
		{
			this.SendPropertyChanging();
			entity.Link = this;
		}
		
		private void detach_ImageLinks(ImageLink entity)
		{
			this.SendPropertyChanging();
			entity.Link = null;
		}
		
		private void attach_OrganizationLinks(OrganizationLink entity)
		{
			this.SendPropertyChanging();
			entity.Link = this;
		}
		
		private void detach_OrganizationLinks(OrganizationLink entity)
		{
			this.SendPropertyChanging();
			entity.Link = null;
		}
		
		private void attach_PersonLinks(PersonLink entity)
		{
			this.SendPropertyChanging();
			entity.Link = this;
		}
		
		private void detach_PersonLinks(PersonLink entity)
		{
			this.SendPropertyChanging();
			entity.Link = null;
		}
		
		private void attach_PublicationLinks(PublicationLink entity)
		{
			this.SendPropertyChanging();
			entity.Link = this;
		}
		
		private void detach_PublicationLinks(PublicationLink entity)
		{
			this.SendPropertyChanging();
			entity.Link = null;
		}
		
		private void attach_StudyMaterialLinks(StudyMaterialLink entity)
		{
			this.SendPropertyChanging();
			entity.Link = this;
		}
		
		private void detach_StudyMaterialLinks(StudyMaterialLink entity)
		{
			this.SendPropertyChanging();
			entity.Link = null;
		}
		
		private void attach_BlogPosts(BlogPost entity)
		{
			this.SendPropertyChanging();
			entity.Link = this;
		}
		
		private void detach_BlogPosts(BlogPost entity)
		{
			this.SendPropertyChanging();
			entity.Link = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contact")]
	public partial class Contact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _Type;
		
		private string _Value;
		
		private EntitySet<OrganizationContact> _OrganizationContacts;
		
		private EntitySet<PersonContact> _PersonContacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public Contact()
		{
			this._OrganizationContacts = new EntitySet<OrganizationContact>(new Action<OrganizationContact>(this.attach_OrganizationContacts), new Action<OrganizationContact>(this.detach_OrganizationContacts));
			this._PersonContacts = new EntitySet<PersonContact>(new Action<PersonContact>(this.attach_PersonContacts), new Action<PersonContact>(this.detach_PersonContacts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_OrganizationContact", Storage="_OrganizationContacts", ThisKey="ID", OtherKey="ContactID")]
		public EntitySet<OrganizationContact> OrganizationContacts
		{
			get
			{
				return this._OrganizationContacts;
			}
			set
			{
				this._OrganizationContacts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_PersonContact", Storage="_PersonContacts", ThisKey="ID", OtherKey="ContactID")]
		public EntitySet<PersonContact> PersonContacts
		{
			get
			{
				return this._PersonContacts;
			}
			set
			{
				this._PersonContacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrganizationContacts(OrganizationContact entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_OrganizationContacts(OrganizationContact entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_PersonContacts(PersonContact entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_PersonContacts(PersonContact entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Blog")]
	public partial class Blog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private System.DateTime _LastUpdate;
		
		private EntitySet<BlogPost> _BlogPosts;
		
		private EntitySet<BlogParser> _BlogParsers;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnLastUpdateChanging(System.DateTime value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public Blog()
		{
			this._BlogPosts = new EntitySet<BlogPost>(new Action<BlogPost>(this.attach_BlogPosts), new Action<BlogPost>(this.detach_BlogPosts));
			this._BlogParsers = new EntitySet<BlogParser>(new Action<BlogParser>(this.attach_BlogParsers), new Action<BlogParser>(this.detach_BlogParsers));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Blog_BlogPost", Storage="_BlogPosts", ThisKey="ID", OtherKey="BlogID")]
		public EntitySet<BlogPost> BlogPosts
		{
			get
			{
				return this._BlogPosts;
			}
			set
			{
				this._BlogPosts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Blog_BlogParser", Storage="_BlogParsers", ThisKey="ID", OtherKey="BlogID")]
		public EntitySet<BlogParser> BlogParsers
		{
			get
			{
				return this._BlogParsers;
			}
			set
			{
				this._BlogParsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Blog", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Blogs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Blogs.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BlogPosts(BlogPost entity)
		{
			this.SendPropertyChanging();
			entity.Blog = this;
		}
		
		private void detach_BlogPosts(BlogPost entity)
		{
			this.SendPropertyChanging();
			entity.Blog = null;
		}
		
		private void attach_BlogParsers(BlogParser entity)
		{
			this.SendPropertyChanging();
			entity.Blog = this;
		}
		
		private void detach_BlogParsers(BlogParser entity)
		{
			this.SendPropertyChanging();
			entity.Blog = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Notice")]
	public partial class Notice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _NoticeDistributionID;
		
		private System.Nullable<int> _SenderID;
		
		private int _ReceiverID;
		
		private System.DateTime _AddedDate;
		
		private System.Nullable<System.DateTime> _ReadedDate;
		
		private string _Header;
		
		private string _Text;
		
		private int _Type;
		
		private EntityRef<NoticeDistribution> _NoticeDistribution;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNoticeDistributionIDChanging(System.Nullable<int> value);
    partial void OnNoticeDistributionIDChanged();
    partial void OnSenderIDChanging(System.Nullable<int> value);
    partial void OnSenderIDChanged();
    partial void OnReceiverIDChanging(int value);
    partial void OnReceiverIDChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnReadedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReadedDateChanged();
    partial void OnHeaderChanging(string value);
    partial void OnHeaderChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    #endregion
		
		public Notice()
		{
			this._NoticeDistribution = default(EntityRef<NoticeDistribution>);
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoticeDistributionID", DbType="Int")]
		public System.Nullable<int> NoticeDistributionID
		{
			get
			{
				return this._NoticeDistributionID;
			}
			set
			{
				if ((this._NoticeDistributionID != value))
				{
					if (this._NoticeDistribution.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNoticeDistributionIDChanging(value);
					this.SendPropertyChanging();
					this._NoticeDistributionID = value;
					this.SendPropertyChanged("NoticeDistributionID");
					this.OnNoticeDistributionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SenderID", DbType="Int")]
		public System.Nullable<int> SenderID
		{
			get
			{
				return this._SenderID;
			}
			set
			{
				if ((this._SenderID != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSenderIDChanging(value);
					this.SendPropertyChanging();
					this._SenderID = value;
					this.SendPropertyChanged("SenderID");
					this.OnSenderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiverID", DbType="Int NOT NULL")]
		public int ReceiverID
		{
			get
			{
				return this._ReceiverID;
			}
			set
			{
				if ((this._ReceiverID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceiverIDChanging(value);
					this.SendPropertyChanging();
					this._ReceiverID = value;
					this.SendPropertyChanged("ReceiverID");
					this.OnReceiverIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReadedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ReadedDate
		{
			get
			{
				return this._ReadedDate;
			}
			set
			{
				if ((this._ReadedDate != value))
				{
					this.OnReadedDateChanging(value);
					this.SendPropertyChanging();
					this._ReadedDate = value;
					this.SendPropertyChanged("ReadedDate");
					this.OnReadedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Header", DbType="NVarChar(500)")]
		public string Header
		{
			get
			{
				return this._Header;
			}
			set
			{
				if ((this._Header != value))
				{
					this.OnHeaderChanging(value);
					this.SendPropertyChanging();
					this._Header = value;
					this.SendPropertyChanged("Header");
					this.OnHeaderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NoticeDistribution_Notice", Storage="_NoticeDistribution", ThisKey="NoticeDistributionID", OtherKey="ID", IsForeignKey=true)]
		public NoticeDistribution NoticeDistribution
		{
			get
			{
				return this._NoticeDistribution.Entity;
			}
			set
			{
				NoticeDistribution previousValue = this._NoticeDistribution.Entity;
				if (((previousValue != value) 
							|| (this._NoticeDistribution.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NoticeDistribution.Entity = null;
						previousValue.Notices.Remove(this);
					}
					this._NoticeDistribution.Entity = value;
					if ((value != null))
					{
						value.Notices.Add(this);
						this._NoticeDistributionID = value.ID;
					}
					else
					{
						this._NoticeDistributionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("NoticeDistribution");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Notice", Storage="_User", ThisKey="ReceiverID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Notices.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Notices.Add(this);
						this._ReceiverID = value.ID;
					}
					else
					{
						this._ReceiverID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Notice1", Storage="_User1", ThisKey="SenderID", OtherKey="ID", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Notices1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Notices1.Add(this);
						this._SenderID = value.ID;
					}
					else
					{
						this._SenderID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NoticeDistribution")]
	public partial class NoticeDistribution : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private System.DateTime _AddedDate;
		
		private string _Header;
		
		private string _Text;
		
		private EntitySet<Notice> _Notices;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnHeaderChanging(string value);
    partial void OnHeaderChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public NoticeDistribution()
		{
			this._Notices = new EntitySet<Notice>(new Action<Notice>(this.attach_Notices), new Action<Notice>(this.detach_Notices));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Header", DbType="NVarChar(500)")]
		public string Header
		{
			get
			{
				return this._Header;
			}
			set
			{
				if ((this._Header != value))
				{
					this.OnHeaderChanging(value);
					this.SendPropertyChanging();
					this._Header = value;
					this.SendPropertyChanged("Header");
					this.OnHeaderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NoticeDistribution_Notice", Storage="_Notices", ThisKey="ID", OtherKey="NoticeDistributionID")]
		public EntitySet<Notice> Notices
		{
			get
			{
				return this._Notices;
			}
			set
			{
				this._Notices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_NoticeDistribution", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.NoticeDistributions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.NoticeDistributions.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Notices(Notice entity)
		{
			this.SendPropertyChanging();
			entity.NoticeDistribution = this;
		}
		
		private void detach_Notices(Notice entity)
		{
			this.SendPropertyChanging();
			entity.NoticeDistribution = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ArticleSubject")]
	public partial class ArticleSubject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ArticleID;
		
		private int _SubjectID;
		
		private EntityRef<Article> _Article;
		
		private EntityRef<Subject> _Subject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnArticleIDChanging(int value);
    partial void OnArticleIDChanged();
    partial void OnSubjectIDChanging(int value);
    partial void OnSubjectIDChanged();
    #endregion
		
		public ArticleSubject()
		{
			this._Article = default(EntityRef<Article>);
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArticleID", DbType="Int NOT NULL")]
		public int ArticleID
		{
			get
			{
				return this._ArticleID;
			}
			set
			{
				if ((this._ArticleID != value))
				{
					if (this._Article.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArticleIDChanging(value);
					this.SendPropertyChanging();
					this._ArticleID = value;
					this.SendPropertyChanged("ArticleID");
					this.OnArticleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectID", DbType="Int NOT NULL")]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Article_ArticleSubject", Storage="_Article", ThisKey="ArticleID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Article Article
		{
			get
			{
				return this._Article.Entity;
			}
			set
			{
				Article previousValue = this._Article.Entity;
				if (((previousValue != value) 
							|| (this._Article.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Article.Entity = null;
						previousValue.ArticleSubjects.Remove(this);
					}
					this._Article.Entity = value;
					if ((value != null))
					{
						value.ArticleSubjects.Add(this);
						this._ArticleID = value.ID;
					}
					else
					{
						this._ArticleID = default(int);
					}
					this.SendPropertyChanged("Article");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_ArticleSubject", Storage="_Subject", ThisKey="SubjectID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.ArticleSubjects.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.ArticleSubjects.Add(this);
						this._SubjectID = value.ID;
					}
					else
					{
						this._SubjectID = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BlogPostComment")]
	public partial class BlogPostComment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _BlogPostID;
		
		private int _CommentID;
		
		private EntityRef<Comment> _Comment;
		
		private EntityRef<BlogPost> _BlogPost;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnBlogPostIDChanging(int value);
    partial void OnBlogPostIDChanged();
    partial void OnCommentIDChanging(int value);
    partial void OnCommentIDChanged();
    #endregion
		
		public BlogPostComment()
		{
			this._Comment = default(EntityRef<Comment>);
			this._BlogPost = default(EntityRef<BlogPost>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlogPostID", DbType="Int NOT NULL")]
		public int BlogPostID
		{
			get
			{
				return this._BlogPostID;
			}
			set
			{
				if ((this._BlogPostID != value))
				{
					if (this._BlogPost.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogPostIDChanging(value);
					this.SendPropertyChanging();
					this._BlogPostID = value;
					this.SendPropertyChanged("BlogPostID");
					this.OnBlogPostIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentID", DbType="Int NOT NULL")]
		public int CommentID
		{
			get
			{
				return this._CommentID;
			}
			set
			{
				if ((this._CommentID != value))
				{
					if (this._Comment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommentIDChanging(value);
					this.SendPropertyChanging();
					this._CommentID = value;
					this.SendPropertyChanged("CommentID");
					this.OnCommentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_BlogPostComment", Storage="_Comment", ThisKey="CommentID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Comment Comment
		{
			get
			{
				return this._Comment.Entity;
			}
			set
			{
				Comment previousValue = this._Comment.Entity;
				if (((previousValue != value) 
							|| (this._Comment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Comment.Entity = null;
						previousValue.BlogPostComments.Remove(this);
					}
					this._Comment.Entity = value;
					if ((value != null))
					{
						value.BlogPostComments.Add(this);
						this._CommentID = value.ID;
					}
					else
					{
						this._CommentID = default(int);
					}
					this.SendPropertyChanged("Comment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogPost_BlogPostComment", Storage="_BlogPost", ThisKey="BlogPostID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public BlogPost BlogPost
		{
			get
			{
				return this._BlogPost.Entity;
			}
			set
			{
				BlogPost previousValue = this._BlogPost.Entity;
				if (((previousValue != value) 
							|| (this._BlogPost.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BlogPost.Entity = null;
						previousValue.BlogPostComments.Remove(this);
					}
					this._BlogPost.Entity = value;
					if ((value != null))
					{
						value.BlogPostComments.Add(this);
						this._BlogPostID = value.ID;
					}
					else
					{
						this._BlogPostID = default(int);
					}
					this.SendPropertyChanged("BlogPost");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BlogPostSubject")]
	public partial class BlogPostSubject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _BlogPostID;
		
		private int _SubjectID;
		
		private EntityRef<Subject> _Subject;
		
		private EntityRef<BlogPost> _BlogPost;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnBlogPostIDChanging(int value);
    partial void OnBlogPostIDChanged();
    partial void OnSubjectIDChanging(int value);
    partial void OnSubjectIDChanged();
    #endregion
		
		public BlogPostSubject()
		{
			this._Subject = default(EntityRef<Subject>);
			this._BlogPost = default(EntityRef<BlogPost>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlogPostID", DbType="Int NOT NULL")]
		public int BlogPostID
		{
			get
			{
				return this._BlogPostID;
			}
			set
			{
				if ((this._BlogPostID != value))
				{
					if (this._BlogPost.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogPostIDChanging(value);
					this.SendPropertyChanging();
					this._BlogPostID = value;
					this.SendPropertyChanged("BlogPostID");
					this.OnBlogPostIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectID", DbType="Int NOT NULL")]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_BlogPostSubject", Storage="_Subject", ThisKey="SubjectID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.BlogPostSubjects.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.BlogPostSubjects.Add(this);
						this._SubjectID = value.ID;
					}
					else
					{
						this._SubjectID = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogPost_BlogPostSubject", Storage="_BlogPost", ThisKey="BlogPostID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public BlogPost BlogPost
		{
			get
			{
				return this._BlogPost.Entity;
			}
			set
			{
				BlogPost previousValue = this._BlogPost.Entity;
				if (((previousValue != value) 
							|| (this._BlogPost.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BlogPost.Entity = null;
						previousValue.BlogPostSubjects.Remove(this);
					}
					this._BlogPost.Entity = value;
					if ((value != null))
					{
						value.BlogPostSubjects.Add(this);
						this._BlogPostID = value.ID;
					}
					else
					{
						this._BlogPostID = default(int);
					}
					this.SendPropertyChanged("BlogPost");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BlogPostEvent")]
	public partial class BlogPostEvent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _BlogPostID;
		
		private int _EventID;
		
		private EntityRef<BlogPost> _BlogPost;
		
		private EntityRef<Event> _Event;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnBlogPostIDChanging(int value);
    partial void OnBlogPostIDChanged();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    #endregion
		
		public BlogPostEvent()
		{
			this._BlogPost = default(EntityRef<BlogPost>);
			this._Event = default(EntityRef<Event>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlogPostID", DbType="Int NOT NULL")]
		public int BlogPostID
		{
			get
			{
				return this._BlogPostID;
			}
			set
			{
				if ((this._BlogPostID != value))
				{
					if (this._BlogPost.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogPostIDChanging(value);
					this.SendPropertyChanging();
					this._BlogPostID = value;
					this.SendPropertyChanged("BlogPostID");
					this.OnBlogPostIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", DbType="Int NOT NULL")]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogPost_BlogPostEvent", Storage="_BlogPost", ThisKey="BlogPostID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public BlogPost BlogPost
		{
			get
			{
				return this._BlogPost.Entity;
			}
			set
			{
				BlogPost previousValue = this._BlogPost.Entity;
				if (((previousValue != value) 
							|| (this._BlogPost.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BlogPost.Entity = null;
						previousValue.BlogPostEvents.Remove(this);
					}
					this._BlogPost.Entity = value;
					if ((value != null))
					{
						value.BlogPostEvents.Add(this);
						this._BlogPostID = value.ID;
					}
					else
					{
						this._BlogPostID = default(int);
					}
					this.SendPropertyChanged("BlogPost");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_BlogPostEvent", Storage="_Event", ThisKey="EventID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.BlogPostEvents.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.BlogPostEvents.Add(this);
						this._EventID = value.ID;
					}
					else
					{
						this._EventID = default(int);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BlogPostOrganization")]
	public partial class BlogPostOrganization : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _BlogPostID;
		
		private int _OrganizationID;
		
		private EntityRef<BlogPost> _BlogPost;
		
		private EntityRef<Organization> _Organization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnBlogPostIDChanging(int value);
    partial void OnBlogPostIDChanged();
    partial void OnOrganizationIDChanging(int value);
    partial void OnOrganizationIDChanged();
    #endregion
		
		public BlogPostOrganization()
		{
			this._BlogPost = default(EntityRef<BlogPost>);
			this._Organization = default(EntityRef<Organization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlogPostID", DbType="Int NOT NULL")]
		public int BlogPostID
		{
			get
			{
				return this._BlogPostID;
			}
			set
			{
				if ((this._BlogPostID != value))
				{
					if (this._BlogPost.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogPostIDChanging(value);
					this.SendPropertyChanging();
					this._BlogPostID = value;
					this.SendPropertyChanged("BlogPostID");
					this.OnBlogPostIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationID", DbType="Int NOT NULL")]
		public int OrganizationID
		{
			get
			{
				return this._OrganizationID;
			}
			set
			{
				if ((this._OrganizationID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganizationIDChanging(value);
					this.SendPropertyChanging();
					this._OrganizationID = value;
					this.SendPropertyChanged("OrganizationID");
					this.OnOrganizationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogPost_BlogPostOrganization", Storage="_BlogPost", ThisKey="BlogPostID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public BlogPost BlogPost
		{
			get
			{
				return this._BlogPost.Entity;
			}
			set
			{
				BlogPost previousValue = this._BlogPost.Entity;
				if (((previousValue != value) 
							|| (this._BlogPost.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BlogPost.Entity = null;
						previousValue.BlogPostOrganizations.Remove(this);
					}
					this._BlogPost.Entity = value;
					if ((value != null))
					{
						value.BlogPostOrganizations.Add(this);
						this._BlogPostID = value.ID;
					}
					else
					{
						this._BlogPostID = default(int);
					}
					this.SendPropertyChanged("BlogPost");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_BlogPostOrganization", Storage="_Organization", ThisKey="OrganizationID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.BlogPostOrganizations.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.BlogPostOrganizations.Add(this);
						this._OrganizationID = value.ID;
					}
					else
					{
						this._OrganizationID = default(int);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BlogPostPerson")]
	public partial class BlogPostPerson : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _BlogPostID;
		
		private int _PersonID;
		
		private EntityRef<BlogPost> _BlogPost;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnBlogPostIDChanging(int value);
    partial void OnBlogPostIDChanged();
    partial void OnPersonIDChanging(int value);
    partial void OnPersonIDChanged();
    #endregion
		
		public BlogPostPerson()
		{
			this._BlogPost = default(EntityRef<BlogPost>);
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlogPostID", DbType="Int NOT NULL")]
		public int BlogPostID
		{
			get
			{
				return this._BlogPostID;
			}
			set
			{
				if ((this._BlogPostID != value))
				{
					if (this._BlogPost.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogPostIDChanging(value);
					this.SendPropertyChanging();
					this._BlogPostID = value;
					this.SendPropertyChanged("BlogPostID");
					this.OnBlogPostIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", DbType="Int NOT NULL")]
		public int PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogPost_BlogPostPerson", Storage="_BlogPost", ThisKey="BlogPostID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public BlogPost BlogPost
		{
			get
			{
				return this._BlogPost.Entity;
			}
			set
			{
				BlogPost previousValue = this._BlogPost.Entity;
				if (((previousValue != value) 
							|| (this._BlogPost.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BlogPost.Entity = null;
						previousValue.BlogPostPersons.Remove(this);
					}
					this._BlogPost.Entity = value;
					if ((value != null))
					{
						value.BlogPostPersons.Add(this);
						this._BlogPostID = value.ID;
					}
					else
					{
						this._BlogPostID = default(int);
					}
					this.SendPropertyChanged("BlogPost");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_BlogPostPerson", Storage="_Person", ThisKey="PersonID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.BlogPostPersons.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.BlogPostPersons.Add(this);
						this._PersonID = value.ID;
					}
					else
					{
						this._PersonID = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BlogPostRegion")]
	public partial class BlogPostRegion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _BlogPostID;
		
		private int _RegionID;
		
		private EntityRef<Region> _Region;
		
		private EntityRef<BlogPost> _BlogPost;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnBlogPostIDChanging(int value);
    partial void OnBlogPostIDChanged();
    partial void OnRegionIDChanging(int value);
    partial void OnRegionIDChanged();
    #endregion
		
		public BlogPostRegion()
		{
			this._Region = default(EntityRef<Region>);
			this._BlogPost = default(EntityRef<BlogPost>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlogPostID", DbType="Int NOT NULL")]
		public int BlogPostID
		{
			get
			{
				return this._BlogPostID;
			}
			set
			{
				if ((this._BlogPostID != value))
				{
					if (this._BlogPost.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogPostIDChanging(value);
					this.SendPropertyChanging();
					this._BlogPostID = value;
					this.SendPropertyChanged("BlogPostID");
					this.OnBlogPostIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionID", DbType="Int NOT NULL")]
		public int RegionID
		{
			get
			{
				return this._RegionID;
			}
			set
			{
				if ((this._RegionID != value))
				{
					if (this._Region.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegionIDChanging(value);
					this.SendPropertyChanging();
					this._RegionID = value;
					this.SendPropertyChanged("RegionID");
					this.OnRegionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_BlogPostRegion", Storage="_Region", ThisKey="RegionID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Region Region
		{
			get
			{
				return this._Region.Entity;
			}
			set
			{
				Region previousValue = this._Region.Entity;
				if (((previousValue != value) 
							|| (this._Region.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Region.Entity = null;
						previousValue.BlogPostRegions.Remove(this);
					}
					this._Region.Entity = value;
					if ((value != null))
					{
						value.BlogPostRegions.Add(this);
						this._RegionID = value.ID;
					}
					else
					{
						this._RegionID = default(int);
					}
					this.SendPropertyChanged("Region");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogPost_BlogPostRegion", Storage="_BlogPost", ThisKey="BlogPostID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public BlogPost BlogPost
		{
			get
			{
				return this._BlogPost.Entity;
			}
			set
			{
				BlogPost previousValue = this._BlogPost.Entity;
				if (((previousValue != value) 
							|| (this._BlogPost.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BlogPost.Entity = null;
						previousValue.BlogPostRegions.Remove(this);
					}
					this._BlogPost.Entity = value;
					if ((value != null))
					{
						value.BlogPostRegions.Add(this);
						this._BlogPostID = value.ID;
					}
					else
					{
						this._BlogPostID = default(int);
					}
					this.SendPropertyChanged("BlogPost");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocumentAccess")]
	public partial class DocumentAccess : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _DocumentID;
		
		private int _UserID;
		
		private EntityRef<Document> _Document;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDocumentIDChanging(int value);
    partial void OnDocumentIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public DocumentAccess()
		{
			this._Document = default(EntityRef<Document>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentID", DbType="Int NOT NULL")]
		public int DocumentID
		{
			get
			{
				return this._DocumentID;
			}
			set
			{
				if ((this._DocumentID != value))
				{
					if (this._Document.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentID = value;
					this.SendPropertyChanged("DocumentID");
					this.OnDocumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_DocumentAccess", Storage="_Document", ThisKey="DocumentID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Document Document
		{
			get
			{
				return this._Document.Entity;
			}
			set
			{
				Document previousValue = this._Document.Entity;
				if (((previousValue != value) 
							|| (this._Document.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Document.Entity = null;
						previousValue.DocumentAccesses.Remove(this);
					}
					this._Document.Entity = value;
					if ((value != null))
					{
						value.DocumentAccesses.Add(this);
						this._DocumentID = value.ID;
					}
					else
					{
						this._DocumentID = default(int);
					}
					this.SendPropertyChanged("Document");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_DocumentAccess", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.DocumentAccesses.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.DocumentAccesses.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocumentFile")]
	public partial class DocumentFile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _DocumentID;
		
		private int _FileID;
		
		private EntityRef<File> _File;
		
		private EntityRef<Document> _Document;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDocumentIDChanging(int value);
    partial void OnDocumentIDChanged();
    partial void OnFileIDChanging(int value);
    partial void OnFileIDChanged();
    #endregion
		
		public DocumentFile()
		{
			this._File = default(EntityRef<File>);
			this._Document = default(EntityRef<Document>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentID", DbType="Int NOT NULL")]
		public int DocumentID
		{
			get
			{
				return this._DocumentID;
			}
			set
			{
				if ((this._DocumentID != value))
				{
					if (this._Document.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentID = value;
					this.SendPropertyChanged("DocumentID");
					this.OnDocumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileID", DbType="Int NOT NULL")]
		public int FileID
		{
			get
			{
				return this._FileID;
			}
			set
			{
				if ((this._FileID != value))
				{
					if (this._File.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileIDChanging(value);
					this.SendPropertyChanging();
					this._FileID = value;
					this.SendPropertyChanged("FileID");
					this.OnFileIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="File_DocumentFile", Storage="_File", ThisKey="FileID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public File File
		{
			get
			{
				return this._File.Entity;
			}
			set
			{
				File previousValue = this._File.Entity;
				if (((previousValue != value) 
							|| (this._File.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._File.Entity = null;
						previousValue.DocumentFiles.Remove(this);
					}
					this._File.Entity = value;
					if ((value != null))
					{
						value.DocumentFiles.Add(this);
						this._FileID = value.ID;
					}
					else
					{
						this._FileID = default(int);
					}
					this.SendPropertyChanged("File");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_DocumentFile", Storage="_Document", ThisKey="DocumentID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Document Document
		{
			get
			{
				return this._Document.Entity;
			}
			set
			{
				Document previousValue = this._Document.Entity;
				if (((previousValue != value) 
							|| (this._Document.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Document.Entity = null;
						previousValue.DocumentFiles.Remove(this);
					}
					this._Document.Entity = value;
					if ((value != null))
					{
						value.DocumentFiles.Add(this);
						this._DocumentID = value.ID;
					}
					else
					{
						this._DocumentID = default(int);
					}
					this.SendPropertyChanged("Document");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocumentLike")]
	public partial class DocumentLike : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _DocumentID;
		
		private int _UserID;
		
		private bool _IsLike;
		
		private EntityRef<Document> _Document;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDocumentIDChanging(int value);
    partial void OnDocumentIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnIsLikeChanging(bool value);
    partial void OnIsLikeChanged();
    #endregion
		
		public DocumentLike()
		{
			this._Document = default(EntityRef<Document>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentID", DbType="Int NOT NULL")]
		public int DocumentID
		{
			get
			{
				return this._DocumentID;
			}
			set
			{
				if ((this._DocumentID != value))
				{
					if (this._Document.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentID = value;
					this.SendPropertyChanged("DocumentID");
					this.OnDocumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLike", DbType="Bit NOT NULL")]
		public bool IsLike
		{
			get
			{
				return this._IsLike;
			}
			set
			{
				if ((this._IsLike != value))
				{
					this.OnIsLikeChanging(value);
					this.SendPropertyChanging();
					this._IsLike = value;
					this.SendPropertyChanged("IsLike");
					this.OnIsLikeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_DocumentLike", Storage="_Document", ThisKey="DocumentID", OtherKey="ID", IsForeignKey=true)]
		public Document Document
		{
			get
			{
				return this._Document.Entity;
			}
			set
			{
				Document previousValue = this._Document.Entity;
				if (((previousValue != value) 
							|| (this._Document.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Document.Entity = null;
						previousValue.DocumentLikes.Remove(this);
					}
					this._Document.Entity = value;
					if ((value != null))
					{
						value.DocumentLikes.Add(this);
						this._DocumentID = value.ID;
					}
					else
					{
						this._DocumentID = default(int);
					}
					this.SendPropertyChanged("Document");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_DocumentLike", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.DocumentLikes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.DocumentLikes.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocumentLink")]
	public partial class DocumentLink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _DocumentID;
		
		private int _LinkID;
		
		private EntityRef<Link> _Link;
		
		private EntityRef<Document> _Document;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDocumentIDChanging(int value);
    partial void OnDocumentIDChanged();
    partial void OnLinkIDChanging(int value);
    partial void OnLinkIDChanged();
    #endregion
		
		public DocumentLink()
		{
			this._Link = default(EntityRef<Link>);
			this._Document = default(EntityRef<Document>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentID", DbType="Int NOT NULL")]
		public int DocumentID
		{
			get
			{
				return this._DocumentID;
			}
			set
			{
				if ((this._DocumentID != value))
				{
					if (this._Document.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentID = value;
					this.SendPropertyChanged("DocumentID");
					this.OnDocumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkID", DbType="Int NOT NULL")]
		public int LinkID
		{
			get
			{
				return this._LinkID;
			}
			set
			{
				if ((this._LinkID != value))
				{
					if (this._Link.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLinkIDChanging(value);
					this.SendPropertyChanging();
					this._LinkID = value;
					this.SendPropertyChanged("LinkID");
					this.OnLinkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Link_DocumentLink", Storage="_Link", ThisKey="LinkID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Link Link
		{
			get
			{
				return this._Link.Entity;
			}
			set
			{
				Link previousValue = this._Link.Entity;
				if (((previousValue != value) 
							|| (this._Link.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Link.Entity = null;
						previousValue.DocumentLinks.Remove(this);
					}
					this._Link.Entity = value;
					if ((value != null))
					{
						value.DocumentLinks.Add(this);
						this._LinkID = value.ID;
					}
					else
					{
						this._LinkID = default(int);
					}
					this.SendPropertyChanged("Link");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_DocumentLink", Storage="_Document", ThisKey="DocumentID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Document Document
		{
			get
			{
				return this._Document.Entity;
			}
			set
			{
				Document previousValue = this._Document.Entity;
				if (((previousValue != value) 
							|| (this._Document.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Document.Entity = null;
						previousValue.DocumentLinks.Remove(this);
					}
					this._Document.Entity = value;
					if ((value != null))
					{
						value.DocumentLinks.Add(this);
						this._DocumentID = value.ID;
					}
					else
					{
						this._DocumentID = default(int);
					}
					this.SendPropertyChanged("Document");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocumentOrganization")]
	public partial class DocumentOrganization : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _DocumentID;
		
		private int _OrganizationID;
		
		private EntityRef<Document> _Document;
		
		private EntityRef<Organization> _Organization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDocumentIDChanging(int value);
    partial void OnDocumentIDChanged();
    partial void OnOrganizationIDChanging(int value);
    partial void OnOrganizationIDChanged();
    #endregion
		
		public DocumentOrganization()
		{
			this._Document = default(EntityRef<Document>);
			this._Organization = default(EntityRef<Organization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentID", DbType="Int NOT NULL")]
		public int DocumentID
		{
			get
			{
				return this._DocumentID;
			}
			set
			{
				if ((this._DocumentID != value))
				{
					if (this._Document.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentID = value;
					this.SendPropertyChanged("DocumentID");
					this.OnDocumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationID", DbType="Int NOT NULL")]
		public int OrganizationID
		{
			get
			{
				return this._OrganizationID;
			}
			set
			{
				if ((this._OrganizationID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganizationIDChanging(value);
					this.SendPropertyChanging();
					this._OrganizationID = value;
					this.SendPropertyChanged("OrganizationID");
					this.OnOrganizationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_DocumentOrganization", Storage="_Document", ThisKey="DocumentID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Document Document
		{
			get
			{
				return this._Document.Entity;
			}
			set
			{
				Document previousValue = this._Document.Entity;
				if (((previousValue != value) 
							|| (this._Document.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Document.Entity = null;
						previousValue.DocumentOrganizations.Remove(this);
					}
					this._Document.Entity = value;
					if ((value != null))
					{
						value.DocumentOrganizations.Add(this);
						this._DocumentID = value.ID;
					}
					else
					{
						this._DocumentID = default(int);
					}
					this.SendPropertyChanged("Document");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_DocumentOrganization", Storage="_Organization", ThisKey="OrganizationID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.DocumentOrganizations.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.DocumentOrganizations.Add(this);
						this._OrganizationID = value.ID;
					}
					else
					{
						this._OrganizationID = default(int);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocumentComment")]
	public partial class DocumentComment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _DocumentID;
		
		private int _CommentID;
		
		private EntityRef<Document> _Document;
		
		private EntityRef<Comment> _Comment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDocumentIDChanging(int value);
    partial void OnDocumentIDChanged();
    partial void OnCommentIDChanging(int value);
    partial void OnCommentIDChanged();
    #endregion
		
		public DocumentComment()
		{
			this._Document = default(EntityRef<Document>);
			this._Comment = default(EntityRef<Comment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentID", DbType="Int NOT NULL")]
		public int DocumentID
		{
			get
			{
				return this._DocumentID;
			}
			set
			{
				if ((this._DocumentID != value))
				{
					if (this._Document.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentID = value;
					this.SendPropertyChanged("DocumentID");
					this.OnDocumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentID", DbType="Int NOT NULL")]
		public int CommentID
		{
			get
			{
				return this._CommentID;
			}
			set
			{
				if ((this._CommentID != value))
				{
					if (this._Comment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommentIDChanging(value);
					this.SendPropertyChanging();
					this._CommentID = value;
					this.SendPropertyChanged("CommentID");
					this.OnCommentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_DocumentComment", Storage="_Document", ThisKey="DocumentID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Document Document
		{
			get
			{
				return this._Document.Entity;
			}
			set
			{
				Document previousValue = this._Document.Entity;
				if (((previousValue != value) 
							|| (this._Document.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Document.Entity = null;
						previousValue.DocumentComments.Remove(this);
					}
					this._Document.Entity = value;
					if ((value != null))
					{
						value.DocumentComments.Add(this);
						this._DocumentID = value.ID;
					}
					else
					{
						this._DocumentID = default(int);
					}
					this.SendPropertyChanged("Document");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_DocumentComment", Storage="_Comment", ThisKey="CommentID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Comment Comment
		{
			get
			{
				return this._Comment.Entity;
			}
			set
			{
				Comment previousValue = this._Comment.Entity;
				if (((previousValue != value) 
							|| (this._Comment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Comment.Entity = null;
						previousValue.DocumentComments.Remove(this);
					}
					this._Comment.Entity = value;
					if ((value != null))
					{
						value.DocumentComments.Add(this);
						this._CommentID = value.ID;
					}
					else
					{
						this._CommentID = default(int);
					}
					this.SendPropertyChanged("Comment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventAccess")]
	public partial class EventAccess : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _EventID;
		
		private int _UserID;
		
		private EntityRef<User> _User;
		
		private EntityRef<Event> _Event;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public EventAccess()
		{
			this._User = default(EntityRef<User>);
			this._Event = default(EntityRef<Event>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", DbType="Int NOT NULL")]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_EventAccess", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.EventAccesses.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.EventAccesses.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventAccess", Storage="_Event", ThisKey="EventID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.EventAccesses.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.EventAccesses.Add(this);
						this._EventID = value.ID;
					}
					else
					{
						this._EventID = default(int);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventSubject")]
	public partial class EventSubject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _EventID;
		
		private int _SubjectID;
		
		private EntityRef<Subject> _Subject;
		
		private EntityRef<Event> _Event;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnSubjectIDChanging(int value);
    partial void OnSubjectIDChanged();
    #endregion
		
		public EventSubject()
		{
			this._Subject = default(EntityRef<Subject>);
			this._Event = default(EntityRef<Event>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", DbType="Int NOT NULL")]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectID", DbType="Int NOT NULL")]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_EventSubject", Storage="_Subject", ThisKey="SubjectID", OtherKey="ID", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.EventSubjects.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.EventSubjects.Add(this);
						this._SubjectID = value.ID;
					}
					else
					{
						this._SubjectID = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventSubject", Storage="_Event", ThisKey="EventID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.EventSubjects.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.EventSubjects.Add(this);
						this._EventID = value.ID;
					}
					else
					{
						this._EventID = default(int);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventComment")]
	public partial class EventComment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _EventID;
		
		private int _CommentID;
		
		private EntityRef<Comment> _Comment;
		
		private EntityRef<Event> _Event;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnCommentIDChanging(int value);
    partial void OnCommentIDChanged();
    #endregion
		
		public EventComment()
		{
			this._Comment = default(EntityRef<Comment>);
			this._Event = default(EntityRef<Event>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", DbType="Int NOT NULL")]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentID", DbType="Int NOT NULL")]
		public int CommentID
		{
			get
			{
				return this._CommentID;
			}
			set
			{
				if ((this._CommentID != value))
				{
					if (this._Comment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommentIDChanging(value);
					this.SendPropertyChanging();
					this._CommentID = value;
					this.SendPropertyChanged("CommentID");
					this.OnCommentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_EventComment", Storage="_Comment", ThisKey="CommentID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Comment Comment
		{
			get
			{
				return this._Comment.Entity;
			}
			set
			{
				Comment previousValue = this._Comment.Entity;
				if (((previousValue != value) 
							|| (this._Comment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Comment.Entity = null;
						previousValue.EventComments.Remove(this);
					}
					this._Comment.Entity = value;
					if ((value != null))
					{
						value.EventComments.Add(this);
						this._CommentID = value.ID;
					}
					else
					{
						this._CommentID = default(int);
					}
					this.SendPropertyChanged("Comment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventComment", Storage="_Event", ThisKey="EventID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.EventComments.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.EventComments.Add(this);
						this._EventID = value.ID;
					}
					else
					{
						this._EventID = default(int);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventFile")]
	public partial class EventFile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _EventID;
		
		private int _FileID;
		
		private EntityRef<File> _File;
		
		private EntityRef<Event> _Event;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnFileIDChanging(int value);
    partial void OnFileIDChanged();
    #endregion
		
		public EventFile()
		{
			this._File = default(EntityRef<File>);
			this._Event = default(EntityRef<Event>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", DbType="Int NOT NULL")]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileID", DbType="Int NOT NULL")]
		public int FileID
		{
			get
			{
				return this._FileID;
			}
			set
			{
				if ((this._FileID != value))
				{
					if (this._File.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileIDChanging(value);
					this.SendPropertyChanging();
					this._FileID = value;
					this.SendPropertyChanged("FileID");
					this.OnFileIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="File_EventFile", Storage="_File", ThisKey="FileID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public File File
		{
			get
			{
				return this._File.Entity;
			}
			set
			{
				File previousValue = this._File.Entity;
				if (((previousValue != value) 
							|| (this._File.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._File.Entity = null;
						previousValue.EventFiles.Remove(this);
					}
					this._File.Entity = value;
					if ((value != null))
					{
						value.EventFiles.Add(this);
						this._FileID = value.ID;
					}
					else
					{
						this._FileID = default(int);
					}
					this.SendPropertyChanged("File");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventFile", Storage="_Event", ThisKey="EventID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.EventFiles.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.EventFiles.Add(this);
						this._EventID = value.ID;
					}
					else
					{
						this._EventID = default(int);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventLike")]
	public partial class EventLike : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _EventID;
		
		private int _UserID;
		
		private bool _IsLike;
		
		private EntityRef<User> _User;
		
		private EntityRef<Event> _Event;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnIsLikeChanging(bool value);
    partial void OnIsLikeChanged();
    #endregion
		
		public EventLike()
		{
			this._User = default(EntityRef<User>);
			this._Event = default(EntityRef<Event>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", DbType="Int NOT NULL")]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLike", DbType="Bit NOT NULL")]
		public bool IsLike
		{
			get
			{
				return this._IsLike;
			}
			set
			{
				if ((this._IsLike != value))
				{
					this.OnIsLikeChanging(value);
					this.SendPropertyChanging();
					this._IsLike = value;
					this.SendPropertyChanged("IsLike");
					this.OnIsLikeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_EventLike", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.EventLikes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.EventLikes.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventLike", Storage="_Event", ThisKey="EventID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.EventLikes.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.EventLikes.Add(this);
						this._EventID = value.ID;
					}
					else
					{
						this._EventID = default(int);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventLink")]
	public partial class EventLink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _EventID;
		
		private int _LinkID;
		
		private EntityRef<Link> _Link;
		
		private EntityRef<Event> _Event;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnLinkIDChanging(int value);
    partial void OnLinkIDChanged();
    #endregion
		
		public EventLink()
		{
			this._Link = default(EntityRef<Link>);
			this._Event = default(EntityRef<Event>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", DbType="Int NOT NULL")]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkID", DbType="Int NOT NULL")]
		public int LinkID
		{
			get
			{
				return this._LinkID;
			}
			set
			{
				if ((this._LinkID != value))
				{
					if (this._Link.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLinkIDChanging(value);
					this.SendPropertyChanging();
					this._LinkID = value;
					this.SendPropertyChanged("LinkID");
					this.OnLinkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Link_EventLink", Storage="_Link", ThisKey="LinkID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Link Link
		{
			get
			{
				return this._Link.Entity;
			}
			set
			{
				Link previousValue = this._Link.Entity;
				if (((previousValue != value) 
							|| (this._Link.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Link.Entity = null;
						previousValue.EventLinks.Remove(this);
					}
					this._Link.Entity = value;
					if ((value != null))
					{
						value.EventLinks.Add(this);
						this._LinkID = value.ID;
					}
					else
					{
						this._LinkID = default(int);
					}
					this.SendPropertyChanged("Link");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventLink", Storage="_Event", ThisKey="EventID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.EventLinks.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.EventLinks.Add(this);
						this._EventID = value.ID;
					}
					else
					{
						this._EventID = default(int);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventOrganization")]
	public partial class EventOrganization : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _EventID;
		
		private int _OrganizationID;
		
		private EntityRef<Event> _Event;
		
		private EntityRef<Organization> _Organization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnOrganizationIDChanging(int value);
    partial void OnOrganizationIDChanged();
    #endregion
		
		public EventOrganization()
		{
			this._Event = default(EntityRef<Event>);
			this._Organization = default(EntityRef<Organization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", DbType="Int NOT NULL")]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationID", DbType="Int NOT NULL")]
		public int OrganizationID
		{
			get
			{
				return this._OrganizationID;
			}
			set
			{
				if ((this._OrganizationID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganizationIDChanging(value);
					this.SendPropertyChanging();
					this._OrganizationID = value;
					this.SendPropertyChanged("OrganizationID");
					this.OnOrganizationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventOrganization", Storage="_Event", ThisKey="EventID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.EventOrganizations.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.EventOrganizations.Add(this);
						this._EventID = value.ID;
					}
					else
					{
						this._EventID = default(int);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_EventOrganization", Storage="_Organization", ThisKey="OrganizationID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.EventOrganizations.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.EventOrganizations.Add(this);
						this._OrganizationID = value.ID;
					}
					else
					{
						this._OrganizationID = default(int);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventPerson")]
	public partial class EventPerson : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _EventID;
		
		private int _PersonID;
		
		private EntityRef<Person> _Person;
		
		private EntityRef<Event> _Event;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnPersonIDChanging(int value);
    partial void OnPersonIDChanged();
    #endregion
		
		public EventPerson()
		{
			this._Person = default(EntityRef<Person>);
			this._Event = default(EntityRef<Event>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", DbType="Int NOT NULL")]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", DbType="Int NOT NULL")]
		public int PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_EventPerson", Storage="_Person", ThisKey="PersonID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.EventPersons.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.EventPersons.Add(this);
						this._PersonID = value.ID;
					}
					else
					{
						this._PersonID = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventPerson", Storage="_Event", ThisKey="EventID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.EventPersons.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.EventPersons.Add(this);
						this._EventID = value.ID;
					}
					else
					{
						this._EventID = default(int);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventRegion")]
	public partial class EventRegion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _EventID;
		
		private int _RegionID;
		
		private EntityRef<Region> _Region;
		
		private EntityRef<Event> _Event;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnRegionIDChanging(int value);
    partial void OnRegionIDChanged();
    #endregion
		
		public EventRegion()
		{
			this._Region = default(EntityRef<Region>);
			this._Event = default(EntityRef<Event>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", DbType="Int NOT NULL")]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionID", DbType="Int NOT NULL")]
		public int RegionID
		{
			get
			{
				return this._RegionID;
			}
			set
			{
				if ((this._RegionID != value))
				{
					if (this._Region.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegionIDChanging(value);
					this.SendPropertyChanging();
					this._RegionID = value;
					this.SendPropertyChanged("RegionID");
					this.OnRegionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_EventRegion", Storage="_Region", ThisKey="RegionID", OtherKey="ID", IsForeignKey=true)]
		public Region Region
		{
			get
			{
				return this._Region.Entity;
			}
			set
			{
				Region previousValue = this._Region.Entity;
				if (((previousValue != value) 
							|| (this._Region.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Region.Entity = null;
						previousValue.EventRegions.Remove(this);
					}
					this._Region.Entity = value;
					if ((value != null))
					{
						value.EventRegions.Add(this);
						this._RegionID = value.ID;
					}
					else
					{
						this._RegionID = default(int);
					}
					this.SendPropertyChanged("Region");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventRegion", Storage="_Event", ThisKey="EventID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.EventRegions.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.EventRegions.Add(this);
						this._EventID = value.ID;
					}
					else
					{
						this._EventID = default(int);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ImageAccess")]
	public partial class ImageAccess : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ImageID;
		
		private int _UserID;
		
		private EntityRef<Image> _Image;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnImageIDChanging(int value);
    partial void OnImageIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public ImageAccess()
		{
			this._Image = default(EntityRef<Image>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageID", DbType="Int NOT NULL")]
		public int ImageID
		{
			get
			{
				return this._ImageID;
			}
			set
			{
				if ((this._ImageID != value))
				{
					if (this._Image.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnImageIDChanging(value);
					this.SendPropertyChanging();
					this._ImageID = value;
					this.SendPropertyChanged("ImageID");
					this.OnImageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Image_ImageAccess", Storage="_Image", ThisKey="ImageID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Image Image
		{
			get
			{
				return this._Image.Entity;
			}
			set
			{
				Image previousValue = this._Image.Entity;
				if (((previousValue != value) 
							|| (this._Image.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Image.Entity = null;
						previousValue.ImageAccesses.Remove(this);
					}
					this._Image.Entity = value;
					if ((value != null))
					{
						value.ImageAccesses.Add(this);
						this._ImageID = value.ID;
					}
					else
					{
						this._ImageID = default(int);
					}
					this.SendPropertyChanged("Image");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ImageAccess", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ImageAccesses.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ImageAccesses.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ImageSubject")]
	public partial class ImageSubject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ImageID;
		
		private int _SubjectID;
		
		private EntityRef<Subject> _Subject;
		
		private EntityRef<Image> _Image;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnImageIDChanging(int value);
    partial void OnImageIDChanged();
    partial void OnSubjectIDChanging(int value);
    partial void OnSubjectIDChanged();
    #endregion
		
		public ImageSubject()
		{
			this._Subject = default(EntityRef<Subject>);
			this._Image = default(EntityRef<Image>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageID", DbType="Int NOT NULL")]
		public int ImageID
		{
			get
			{
				return this._ImageID;
			}
			set
			{
				if ((this._ImageID != value))
				{
					if (this._Image.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnImageIDChanging(value);
					this.SendPropertyChanging();
					this._ImageID = value;
					this.SendPropertyChanged("ImageID");
					this.OnImageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectID", DbType="Int NOT NULL")]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_ImageSubject", Storage="_Subject", ThisKey="SubjectID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.ImageSubjects.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.ImageSubjects.Add(this);
						this._SubjectID = value.ID;
					}
					else
					{
						this._SubjectID = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Image_ImageSubject", Storage="_Image", ThisKey="ImageID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Image Image
		{
			get
			{
				return this._Image.Entity;
			}
			set
			{
				Image previousValue = this._Image.Entity;
				if (((previousValue != value) 
							|| (this._Image.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Image.Entity = null;
						previousValue.ImageSubjects.Remove(this);
					}
					this._Image.Entity = value;
					if ((value != null))
					{
						value.ImageSubjects.Add(this);
						this._ImageID = value.ID;
					}
					else
					{
						this._ImageID = default(int);
					}
					this.SendPropertyChanged("Image");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ImageComment")]
	public partial class ImageComment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ImageID;
		
		private int _CommentID;
		
		private EntityRef<Image> _Image;
		
		private EntityRef<Comment> _Comment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnImageIDChanging(int value);
    partial void OnImageIDChanged();
    partial void OnCommentIDChanging(int value);
    partial void OnCommentIDChanged();
    #endregion
		
		public ImageComment()
		{
			this._Image = default(EntityRef<Image>);
			this._Comment = default(EntityRef<Comment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageID", DbType="Int NOT NULL")]
		public int ImageID
		{
			get
			{
				return this._ImageID;
			}
			set
			{
				if ((this._ImageID != value))
				{
					if (this._Image.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnImageIDChanging(value);
					this.SendPropertyChanging();
					this._ImageID = value;
					this.SendPropertyChanged("ImageID");
					this.OnImageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentID", DbType="Int NOT NULL")]
		public int CommentID
		{
			get
			{
				return this._CommentID;
			}
			set
			{
				if ((this._CommentID != value))
				{
					if (this._Comment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommentIDChanging(value);
					this.SendPropertyChanging();
					this._CommentID = value;
					this.SendPropertyChanged("CommentID");
					this.OnCommentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Image_ImageComment", Storage="_Image", ThisKey="ImageID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Image Image
		{
			get
			{
				return this._Image.Entity;
			}
			set
			{
				Image previousValue = this._Image.Entity;
				if (((previousValue != value) 
							|| (this._Image.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Image.Entity = null;
						previousValue.ImageComments.Remove(this);
					}
					this._Image.Entity = value;
					if ((value != null))
					{
						value.ImageComments.Add(this);
						this._ImageID = value.ID;
					}
					else
					{
						this._ImageID = default(int);
					}
					this.SendPropertyChanged("Image");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_ImageComment", Storage="_Comment", ThisKey="CommentID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Comment Comment
		{
			get
			{
				return this._Comment.Entity;
			}
			set
			{
				Comment previousValue = this._Comment.Entity;
				if (((previousValue != value) 
							|| (this._Comment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Comment.Entity = null;
						previousValue.ImageComments.Remove(this);
					}
					this._Comment.Entity = value;
					if ((value != null))
					{
						value.ImageComments.Add(this);
						this._CommentID = value.ID;
					}
					else
					{
						this._CommentID = default(int);
					}
					this.SendPropertyChanged("Comment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ImageLike")]
	public partial class ImageLike : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ImageID;
		
		private int _UserID;
		
		private bool _IsLike;
		
		private EntityRef<Image> _Image;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnImageIDChanging(int value);
    partial void OnImageIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnIsLikeChanging(bool value);
    partial void OnIsLikeChanged();
    #endregion
		
		public ImageLike()
		{
			this._Image = default(EntityRef<Image>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageID", DbType="Int NOT NULL")]
		public int ImageID
		{
			get
			{
				return this._ImageID;
			}
			set
			{
				if ((this._ImageID != value))
				{
					if (this._Image.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnImageIDChanging(value);
					this.SendPropertyChanging();
					this._ImageID = value;
					this.SendPropertyChanged("ImageID");
					this.OnImageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLike", DbType="Bit NOT NULL")]
		public bool IsLike
		{
			get
			{
				return this._IsLike;
			}
			set
			{
				if ((this._IsLike != value))
				{
					this.OnIsLikeChanging(value);
					this.SendPropertyChanging();
					this._IsLike = value;
					this.SendPropertyChanged("IsLike");
					this.OnIsLikeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Image_ImageLike", Storage="_Image", ThisKey="ImageID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Image Image
		{
			get
			{
				return this._Image.Entity;
			}
			set
			{
				Image previousValue = this._Image.Entity;
				if (((previousValue != value) 
							|| (this._Image.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Image.Entity = null;
						previousValue.ImageLikes.Remove(this);
					}
					this._Image.Entity = value;
					if ((value != null))
					{
						value.ImageLikes.Add(this);
						this._ImageID = value.ID;
					}
					else
					{
						this._ImageID = default(int);
					}
					this.SendPropertyChanged("Image");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ImageLike", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ImageLikes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ImageLikes.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ImageLink")]
	public partial class ImageLink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ImageID;
		
		private int _LinkID;
		
		private EntityRef<Link> _Link;
		
		private EntityRef<Image> _Image;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnImageIDChanging(int value);
    partial void OnImageIDChanged();
    partial void OnLinkIDChanging(int value);
    partial void OnLinkIDChanged();
    #endregion
		
		public ImageLink()
		{
			this._Link = default(EntityRef<Link>);
			this._Image = default(EntityRef<Image>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageID", DbType="Int NOT NULL")]
		public int ImageID
		{
			get
			{
				return this._ImageID;
			}
			set
			{
				if ((this._ImageID != value))
				{
					if (this._Image.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnImageIDChanging(value);
					this.SendPropertyChanging();
					this._ImageID = value;
					this.SendPropertyChanged("ImageID");
					this.OnImageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkID", DbType="Int NOT NULL")]
		public int LinkID
		{
			get
			{
				return this._LinkID;
			}
			set
			{
				if ((this._LinkID != value))
				{
					if (this._Link.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLinkIDChanging(value);
					this.SendPropertyChanging();
					this._LinkID = value;
					this.SendPropertyChanged("LinkID");
					this.OnLinkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Link_ImageLink", Storage="_Link", ThisKey="LinkID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Link Link
		{
			get
			{
				return this._Link.Entity;
			}
			set
			{
				Link previousValue = this._Link.Entity;
				if (((previousValue != value) 
							|| (this._Link.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Link.Entity = null;
						previousValue.ImageLinks.Remove(this);
					}
					this._Link.Entity = value;
					if ((value != null))
					{
						value.ImageLinks.Add(this);
						this._LinkID = value.ID;
					}
					else
					{
						this._LinkID = default(int);
					}
					this.SendPropertyChanged("Link");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Image_ImageLink", Storage="_Image", ThisKey="ImageID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Image Image
		{
			get
			{
				return this._Image.Entity;
			}
			set
			{
				Image previousValue = this._Image.Entity;
				if (((previousValue != value) 
							|| (this._Image.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Image.Entity = null;
						previousValue.ImageLinks.Remove(this);
					}
					this._Image.Entity = value;
					if ((value != null))
					{
						value.ImageLinks.Add(this);
						this._ImageID = value.ID;
					}
					else
					{
						this._ImageID = default(int);
					}
					this.SendPropertyChanged("Image");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ImagePerson")]
	public partial class ImagePerson : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ImageID;
		
		private int _PersonID;
		
		private EntityRef<Image> _Image;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnImageIDChanging(int value);
    partial void OnImageIDChanged();
    partial void OnPersonIDChanging(int value);
    partial void OnPersonIDChanged();
    #endregion
		
		public ImagePerson()
		{
			this._Image = default(EntityRef<Image>);
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageID", DbType="Int NOT NULL")]
		public int ImageID
		{
			get
			{
				return this._ImageID;
			}
			set
			{
				if ((this._ImageID != value))
				{
					if (this._Image.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnImageIDChanging(value);
					this.SendPropertyChanging();
					this._ImageID = value;
					this.SendPropertyChanged("ImageID");
					this.OnImageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", DbType="Int NOT NULL")]
		public int PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Image_ImagePerson", Storage="_Image", ThisKey="ImageID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Image Image
		{
			get
			{
				return this._Image.Entity;
			}
			set
			{
				Image previousValue = this._Image.Entity;
				if (((previousValue != value) 
							|| (this._Image.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Image.Entity = null;
						previousValue.ImagePersons.Remove(this);
					}
					this._Image.Entity = value;
					if ((value != null))
					{
						value.ImagePersons.Add(this);
						this._ImageID = value.ID;
					}
					else
					{
						this._ImageID = default(int);
					}
					this.SendPropertyChanged("Image");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_ImagePerson", Storage="_Person", ThisKey="PersonID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.ImagePersons.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.ImagePersons.Add(this);
						this._PersonID = value.ID;
					}
					else
					{
						this._PersonID = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ImageRegion")]
	public partial class ImageRegion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ImageID;
		
		private int _RegionID;
		
		private EntityRef<Image> _Image;
		
		private EntityRef<Region> _Region;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnImageIDChanging(int value);
    partial void OnImageIDChanged();
    partial void OnRegionIDChanging(int value);
    partial void OnRegionIDChanged();
    #endregion
		
		public ImageRegion()
		{
			this._Image = default(EntityRef<Image>);
			this._Region = default(EntityRef<Region>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageID", DbType="Int NOT NULL")]
		public int ImageID
		{
			get
			{
				return this._ImageID;
			}
			set
			{
				if ((this._ImageID != value))
				{
					if (this._Image.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnImageIDChanging(value);
					this.SendPropertyChanging();
					this._ImageID = value;
					this.SendPropertyChanged("ImageID");
					this.OnImageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionID", DbType="Int NOT NULL")]
		public int RegionID
		{
			get
			{
				return this._RegionID;
			}
			set
			{
				if ((this._RegionID != value))
				{
					if (this._Region.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegionIDChanging(value);
					this.SendPropertyChanging();
					this._RegionID = value;
					this.SendPropertyChanged("RegionID");
					this.OnRegionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Image_ImageRegion", Storage="_Image", ThisKey="ImageID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Image Image
		{
			get
			{
				return this._Image.Entity;
			}
			set
			{
				Image previousValue = this._Image.Entity;
				if (((previousValue != value) 
							|| (this._Image.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Image.Entity = null;
						previousValue.ImageRegions.Remove(this);
					}
					this._Image.Entity = value;
					if ((value != null))
					{
						value.ImageRegions.Add(this);
						this._ImageID = value.ID;
					}
					else
					{
						this._ImageID = default(int);
					}
					this.SendPropertyChanged("Image");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_ImageRegion", Storage="_Region", ThisKey="RegionID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Region Region
		{
			get
			{
				return this._Region.Entity;
			}
			set
			{
				Region previousValue = this._Region.Entity;
				if (((previousValue != value) 
							|| (this._Region.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Region.Entity = null;
						previousValue.ImageRegions.Remove(this);
					}
					this._Region.Entity = value;
					if ((value != null))
					{
						value.ImageRegions.Add(this);
						this._RegionID = value.ID;
					}
					else
					{
						this._RegionID = default(int);
					}
					this.SendPropertyChanged("Region");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrganizationAccess")]
	public partial class OrganizationAccess : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _OrganizationID;
		
		private int _UserID;
		
		private EntityRef<User> _User;
		
		private EntityRef<Organization> _Organization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnOrganizationIDChanging(int value);
    partial void OnOrganizationIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public OrganizationAccess()
		{
			this._User = default(EntityRef<User>);
			this._Organization = default(EntityRef<Organization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationID", DbType="Int NOT NULL")]
		public int OrganizationID
		{
			get
			{
				return this._OrganizationID;
			}
			set
			{
				if ((this._OrganizationID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganizationIDChanging(value);
					this.SendPropertyChanging();
					this._OrganizationID = value;
					this.SendPropertyChanged("OrganizationID");
					this.OnOrganizationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_OrganizationAccess", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.OrganizationAccesses.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.OrganizationAccesses.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_OrganizationAccess", Storage="_Organization", ThisKey="OrganizationID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.OrganizationAccesses.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.OrganizationAccesses.Add(this);
						this._OrganizationID = value.ID;
					}
					else
					{
						this._OrganizationID = default(int);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrganizationSubject")]
	public partial class OrganizationSubject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _OrganizationID;
		
		private int _SubjectID;
		
		private EntityRef<Subject> _Subject;
		
		private EntityRef<Organization> _Organization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnOrganizationIDChanging(int value);
    partial void OnOrganizationIDChanged();
    partial void OnSubjectIDChanging(int value);
    partial void OnSubjectIDChanged();
    #endregion
		
		public OrganizationSubject()
		{
			this._Subject = default(EntityRef<Subject>);
			this._Organization = default(EntityRef<Organization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationID", DbType="Int NOT NULL")]
		public int OrganizationID
		{
			get
			{
				return this._OrganizationID;
			}
			set
			{
				if ((this._OrganizationID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganizationIDChanging(value);
					this.SendPropertyChanging();
					this._OrganizationID = value;
					this.SendPropertyChanged("OrganizationID");
					this.OnOrganizationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectID", DbType="Int NOT NULL")]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_OrganizationSubject", Storage="_Subject", ThisKey="SubjectID", OtherKey="ID", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.OrganizationSubjects.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.OrganizationSubjects.Add(this);
						this._SubjectID = value.ID;
					}
					else
					{
						this._SubjectID = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_OrganizationSubject", Storage="_Organization", ThisKey="OrganizationID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.OrganizationSubjects.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.OrganizationSubjects.Add(this);
						this._OrganizationID = value.ID;
					}
					else
					{
						this._OrganizationID = default(int);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrganizationContact")]
	public partial class OrganizationContact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _OrganizationID;
		
		private int _ContactID;
		
		private EntityRef<Contact> _Contact;
		
		private EntityRef<Organization> _Organization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnOrganizationIDChanging(int value);
    partial void OnOrganizationIDChanged();
    partial void OnContactIDChanging(int value);
    partial void OnContactIDChanged();
    #endregion
		
		public OrganizationContact()
		{
			this._Contact = default(EntityRef<Contact>);
			this._Organization = default(EntityRef<Organization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationID", DbType="Int NOT NULL")]
		public int OrganizationID
		{
			get
			{
				return this._OrganizationID;
			}
			set
			{
				if ((this._OrganizationID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganizationIDChanging(value);
					this.SendPropertyChanging();
					this._OrganizationID = value;
					this.SendPropertyChanged("OrganizationID");
					this.OnOrganizationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactID", DbType="Int NOT NULL")]
		public int ContactID
		{
			get
			{
				return this._ContactID;
			}
			set
			{
				if ((this._ContactID != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIDChanging(value);
					this.SendPropertyChanging();
					this._ContactID = value;
					this.SendPropertyChanged("ContactID");
					this.OnContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_OrganizationContact", Storage="_Contact", ThisKey="ContactID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.OrganizationContacts.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.OrganizationContacts.Add(this);
						this._ContactID = value.ID;
					}
					else
					{
						this._ContactID = default(int);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_OrganizationContact", Storage="_Organization", ThisKey="OrganizationID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.OrganizationContacts.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.OrganizationContacts.Add(this);
						this._OrganizationID = value.ID;
					}
					else
					{
						this._OrganizationID = default(int);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrganizationLike")]
	public partial class OrganizationLike : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _OrganizationID;
		
		private int _UserID;
		
		private bool _IsLike;
		
		private EntityRef<User> _User;
		
		private EntityRef<Organization> _Organization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnOrganizationIDChanging(int value);
    partial void OnOrganizationIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnIsLikeChanging(bool value);
    partial void OnIsLikeChanged();
    #endregion
		
		public OrganizationLike()
		{
			this._User = default(EntityRef<User>);
			this._Organization = default(EntityRef<Organization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationID", DbType="Int NOT NULL")]
		public int OrganizationID
		{
			get
			{
				return this._OrganizationID;
			}
			set
			{
				if ((this._OrganizationID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganizationIDChanging(value);
					this.SendPropertyChanging();
					this._OrganizationID = value;
					this.SendPropertyChanged("OrganizationID");
					this.OnOrganizationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLike", DbType="Bit NOT NULL")]
		public bool IsLike
		{
			get
			{
				return this._IsLike;
			}
			set
			{
				if ((this._IsLike != value))
				{
					this.OnIsLikeChanging(value);
					this.SendPropertyChanging();
					this._IsLike = value;
					this.SendPropertyChanged("IsLike");
					this.OnIsLikeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_OrganizationLike", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.OrganizationLikes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.OrganizationLikes.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_OrganizationLike", Storage="_Organization", ThisKey="OrganizationID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.OrganizationLikes.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.OrganizationLikes.Add(this);
						this._OrganizationID = value.ID;
					}
					else
					{
						this._OrganizationID = default(int);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrganizationLink")]
	public partial class OrganizationLink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _OrganizationID;
		
		private int _LinkID;
		
		private EntityRef<Link> _Link;
		
		private EntityRef<Organization> _Organization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnOrganizationIDChanging(int value);
    partial void OnOrganizationIDChanged();
    partial void OnLinkIDChanging(int value);
    partial void OnLinkIDChanged();
    #endregion
		
		public OrganizationLink()
		{
			this._Link = default(EntityRef<Link>);
			this._Organization = default(EntityRef<Organization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationID", DbType="Int NOT NULL")]
		public int OrganizationID
		{
			get
			{
				return this._OrganizationID;
			}
			set
			{
				if ((this._OrganizationID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganizationIDChanging(value);
					this.SendPropertyChanging();
					this._OrganizationID = value;
					this.SendPropertyChanged("OrganizationID");
					this.OnOrganizationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkID", DbType="Int NOT NULL")]
		public int LinkID
		{
			get
			{
				return this._LinkID;
			}
			set
			{
				if ((this._LinkID != value))
				{
					if (this._Link.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLinkIDChanging(value);
					this.SendPropertyChanging();
					this._LinkID = value;
					this.SendPropertyChanged("LinkID");
					this.OnLinkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Link_OrganizationLink", Storage="_Link", ThisKey="LinkID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Link Link
		{
			get
			{
				return this._Link.Entity;
			}
			set
			{
				Link previousValue = this._Link.Entity;
				if (((previousValue != value) 
							|| (this._Link.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Link.Entity = null;
						previousValue.OrganizationLinks.Remove(this);
					}
					this._Link.Entity = value;
					if ((value != null))
					{
						value.OrganizationLinks.Add(this);
						this._LinkID = value.ID;
					}
					else
					{
						this._LinkID = default(int);
					}
					this.SendPropertyChanged("Link");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_OrganizationLink", Storage="_Organization", ThisKey="OrganizationID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.OrganizationLinks.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.OrganizationLinks.Add(this);
						this._OrganizationID = value.ID;
					}
					else
					{
						this._OrganizationID = default(int);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrganizationRegion")]
	public partial class OrganizationRegion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _OrganizationID;
		
		private int _RegionID;
		
		private EntityRef<Region> _Region;
		
		private EntityRef<Organization> _Organization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnOrganizationIDChanging(int value);
    partial void OnOrganizationIDChanged();
    partial void OnRegionIDChanging(int value);
    partial void OnRegionIDChanged();
    #endregion
		
		public OrganizationRegion()
		{
			this._Region = default(EntityRef<Region>);
			this._Organization = default(EntityRef<Organization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationID", DbType="Int NOT NULL")]
		public int OrganizationID
		{
			get
			{
				return this._OrganizationID;
			}
			set
			{
				if ((this._OrganizationID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganizationIDChanging(value);
					this.SendPropertyChanging();
					this._OrganizationID = value;
					this.SendPropertyChanged("OrganizationID");
					this.OnOrganizationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionID", DbType="Int NOT NULL")]
		public int RegionID
		{
			get
			{
				return this._RegionID;
			}
			set
			{
				if ((this._RegionID != value))
				{
					if (this._Region.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegionIDChanging(value);
					this.SendPropertyChanging();
					this._RegionID = value;
					this.SendPropertyChanged("RegionID");
					this.OnRegionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_OrganizationRegion", Storage="_Region", ThisKey="RegionID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Region Region
		{
			get
			{
				return this._Region.Entity;
			}
			set
			{
				Region previousValue = this._Region.Entity;
				if (((previousValue != value) 
							|| (this._Region.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Region.Entity = null;
						previousValue.OrganizationRegions.Remove(this);
					}
					this._Region.Entity = value;
					if ((value != null))
					{
						value.OrganizationRegions.Add(this);
						this._RegionID = value.ID;
					}
					else
					{
						this._RegionID = default(int);
					}
					this.SendPropertyChanged("Region");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_OrganizationRegion", Storage="_Organization", ThisKey="OrganizationID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.OrganizationRegions.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.OrganizationRegions.Add(this);
						this._OrganizationID = value.ID;
					}
					else
					{
						this._OrganizationID = default(int);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PersonAccess")]
	public partial class PersonAccess : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PersonID;
		
		private int _UserID;
		
		private EntityRef<User> _User;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPersonIDChanging(int value);
    partial void OnPersonIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public PersonAccess()
		{
			this._User = default(EntityRef<User>);
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", DbType="Int NOT NULL")]
		public int PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PersonAccess", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.PersonAccesses.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.PersonAccesses.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_PersonAccess", Storage="_Person", ThisKey="PersonID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.PersonAccesses.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.PersonAccesses.Add(this);
						this._PersonID = value.ID;
					}
					else
					{
						this._PersonID = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PersonSubject")]
	public partial class PersonSubject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PersonID;
		
		private int _SubjectID;
		
		private EntityRef<Subject> _Subject;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPersonIDChanging(int value);
    partial void OnPersonIDChanged();
    partial void OnSubjectIDChanging(int value);
    partial void OnSubjectIDChanged();
    #endregion
		
		public PersonSubject()
		{
			this._Subject = default(EntityRef<Subject>);
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", DbType="Int NOT NULL")]
		public int PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectID", DbType="Int NOT NULL")]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_PersonSubject", Storage="_Subject", ThisKey="SubjectID", OtherKey="ID", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.PersonSubjects.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.PersonSubjects.Add(this);
						this._SubjectID = value.ID;
					}
					else
					{
						this._SubjectID = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_PersonSubject", Storage="_Person", ThisKey="PersonID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.PersonSubjects.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.PersonSubjects.Add(this);
						this._PersonID = value.ID;
					}
					else
					{
						this._PersonID = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PersonContact")]
	public partial class PersonContact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ContactID;
		
		private int _PersonID;
		
		private EntityRef<Contact> _Contact;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnContactIDChanging(int value);
    partial void OnContactIDChanged();
    partial void OnPersonIDChanging(int value);
    partial void OnPersonIDChanged();
    #endregion
		
		public PersonContact()
		{
			this._Contact = default(EntityRef<Contact>);
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactID", DbType="Int NOT NULL")]
		public int ContactID
		{
			get
			{
				return this._ContactID;
			}
			set
			{
				if ((this._ContactID != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIDChanging(value);
					this.SendPropertyChanging();
					this._ContactID = value;
					this.SendPropertyChanged("ContactID");
					this.OnContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", DbType="Int NOT NULL")]
		public int PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_PersonContact", Storage="_Contact", ThisKey="ContactID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.PersonContacts.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.PersonContacts.Add(this);
						this._ContactID = value.ID;
					}
					else
					{
						this._ContactID = default(int);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_PersonContact", Storage="_Person", ThisKey="PersonID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.PersonContacts.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.PersonContacts.Add(this);
						this._PersonID = value.ID;
					}
					else
					{
						this._PersonID = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PersonLink")]
	public partial class PersonLink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PersonID;
		
		private int _LinkID;
		
		private EntityRef<Link> _Link;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPersonIDChanging(int value);
    partial void OnPersonIDChanged();
    partial void OnLinkIDChanging(int value);
    partial void OnLinkIDChanged();
    #endregion
		
		public PersonLink()
		{
			this._Link = default(EntityRef<Link>);
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", DbType="Int NOT NULL")]
		public int PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkID", DbType="Int NOT NULL")]
		public int LinkID
		{
			get
			{
				return this._LinkID;
			}
			set
			{
				if ((this._LinkID != value))
				{
					if (this._Link.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLinkIDChanging(value);
					this.SendPropertyChanging();
					this._LinkID = value;
					this.SendPropertyChanged("LinkID");
					this.OnLinkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Link_PersonLink", Storage="_Link", ThisKey="LinkID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Link Link
		{
			get
			{
				return this._Link.Entity;
			}
			set
			{
				Link previousValue = this._Link.Entity;
				if (((previousValue != value) 
							|| (this._Link.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Link.Entity = null;
						previousValue.PersonLinks.Remove(this);
					}
					this._Link.Entity = value;
					if ((value != null))
					{
						value.PersonLinks.Add(this);
						this._LinkID = value.ID;
					}
					else
					{
						this._LinkID = default(int);
					}
					this.SendPropertyChanged("Link");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_PersonLink", Storage="_Person", ThisKey="PersonID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.PersonLinks.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.PersonLinks.Add(this);
						this._PersonID = value.ID;
					}
					else
					{
						this._PersonID = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PersonOrganization")]
	public partial class PersonOrganization : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PersonID;
		
		private int _OrganizationID;
		
		private EntityRef<Person> _Person;
		
		private EntityRef<Organization> _Organization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPersonIDChanging(int value);
    partial void OnPersonIDChanged();
    partial void OnOrganizationIDChanging(int value);
    partial void OnOrganizationIDChanged();
    #endregion
		
		public PersonOrganization()
		{
			this._Person = default(EntityRef<Person>);
			this._Organization = default(EntityRef<Organization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", DbType="Int NOT NULL")]
		public int PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationID", DbType="Int NOT NULL")]
		public int OrganizationID
		{
			get
			{
				return this._OrganizationID;
			}
			set
			{
				if ((this._OrganizationID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganizationIDChanging(value);
					this.SendPropertyChanging();
					this._OrganizationID = value;
					this.SendPropertyChanged("OrganizationID");
					this.OnOrganizationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_PersonOrganization", Storage="_Person", ThisKey="PersonID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.PersonOrganizations.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.PersonOrganizations.Add(this);
						this._PersonID = value.ID;
					}
					else
					{
						this._PersonID = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_PersonOrganization", Storage="_Organization", ThisKey="OrganizationID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.PersonOrganizations.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.PersonOrganizations.Add(this);
						this._OrganizationID = value.ID;
					}
					else
					{
						this._OrganizationID = default(int);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PublicationAccess")]
	public partial class PublicationAccess : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PublicationID;
		
		private int _UserID;
		
		private EntityRef<Publication> _Publication;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPublicationIDChanging(int value);
    partial void OnPublicationIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public PublicationAccess()
		{
			this._Publication = default(EntityRef<Publication>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublicationID", DbType="Int NOT NULL")]
		public int PublicationID
		{
			get
			{
				return this._PublicationID;
			}
			set
			{
				if ((this._PublicationID != value))
				{
					if (this._Publication.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPublicationIDChanging(value);
					this.SendPropertyChanging();
					this._PublicationID = value;
					this.SendPropertyChanged("PublicationID");
					this.OnPublicationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publication_PublicationAccess", Storage="_Publication", ThisKey="PublicationID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Publication Publication
		{
			get
			{
				return this._Publication.Entity;
			}
			set
			{
				Publication previousValue = this._Publication.Entity;
				if (((previousValue != value) 
							|| (this._Publication.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Publication.Entity = null;
						previousValue.PublicationAccesses.Remove(this);
					}
					this._Publication.Entity = value;
					if ((value != null))
					{
						value.PublicationAccesses.Add(this);
						this._PublicationID = value.ID;
					}
					else
					{
						this._PublicationID = default(int);
					}
					this.SendPropertyChanged("Publication");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PublicationAccess", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.PublicationAccesses.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.PublicationAccesses.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PublicationSubject")]
	public partial class PublicationSubject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PublicationID;
		
		private int _SubjectID;
		
		private EntityRef<Subject> _Subject;
		
		private EntityRef<Publication> _Publication;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPublicationIDChanging(int value);
    partial void OnPublicationIDChanged();
    partial void OnSubjectIDChanging(int value);
    partial void OnSubjectIDChanged();
    #endregion
		
		public PublicationSubject()
		{
			this._Subject = default(EntityRef<Subject>);
			this._Publication = default(EntityRef<Publication>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublicationID", DbType="Int NOT NULL")]
		public int PublicationID
		{
			get
			{
				return this._PublicationID;
			}
			set
			{
				if ((this._PublicationID != value))
				{
					if (this._Publication.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPublicationIDChanging(value);
					this.SendPropertyChanging();
					this._PublicationID = value;
					this.SendPropertyChanged("PublicationID");
					this.OnPublicationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectID", DbType="Int NOT NULL")]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_PublicationSubject", Storage="_Subject", ThisKey="SubjectID", OtherKey="ID", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.PublicationSubjects.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.PublicationSubjects.Add(this);
						this._SubjectID = value.ID;
					}
					else
					{
						this._SubjectID = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publication_PublicationSubject", Storage="_Publication", ThisKey="PublicationID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Publication Publication
		{
			get
			{
				return this._Publication.Entity;
			}
			set
			{
				Publication previousValue = this._Publication.Entity;
				if (((previousValue != value) 
							|| (this._Publication.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Publication.Entity = null;
						previousValue.PublicationSubjects.Remove(this);
					}
					this._Publication.Entity = value;
					if ((value != null))
					{
						value.PublicationSubjects.Add(this);
						this._PublicationID = value.ID;
					}
					else
					{
						this._PublicationID = default(int);
					}
					this.SendPropertyChanged("Publication");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PublicationComment")]
	public partial class PublicationComment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PublicationID;
		
		private int _CommentID;
		
		private EntityRef<Comment> _Comment;
		
		private EntityRef<Publication> _Publication;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPublicationIDChanging(int value);
    partial void OnPublicationIDChanged();
    partial void OnCommentIDChanging(int value);
    partial void OnCommentIDChanged();
    #endregion
		
		public PublicationComment()
		{
			this._Comment = default(EntityRef<Comment>);
			this._Publication = default(EntityRef<Publication>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublicationID", DbType="Int NOT NULL")]
		public int PublicationID
		{
			get
			{
				return this._PublicationID;
			}
			set
			{
				if ((this._PublicationID != value))
				{
					if (this._Publication.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPublicationIDChanging(value);
					this.SendPropertyChanging();
					this._PublicationID = value;
					this.SendPropertyChanged("PublicationID");
					this.OnPublicationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentID", DbType="Int NOT NULL")]
		public int CommentID
		{
			get
			{
				return this._CommentID;
			}
			set
			{
				if ((this._CommentID != value))
				{
					if (this._Comment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommentIDChanging(value);
					this.SendPropertyChanging();
					this._CommentID = value;
					this.SendPropertyChanged("CommentID");
					this.OnCommentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_PublicationComment", Storage="_Comment", ThisKey="CommentID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Comment Comment
		{
			get
			{
				return this._Comment.Entity;
			}
			set
			{
				Comment previousValue = this._Comment.Entity;
				if (((previousValue != value) 
							|| (this._Comment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Comment.Entity = null;
						previousValue.PublicationComments.Remove(this);
					}
					this._Comment.Entity = value;
					if ((value != null))
					{
						value.PublicationComments.Add(this);
						this._CommentID = value.ID;
					}
					else
					{
						this._CommentID = default(int);
					}
					this.SendPropertyChanged("Comment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publication_PublicationComment", Storage="_Publication", ThisKey="PublicationID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Publication Publication
		{
			get
			{
				return this._Publication.Entity;
			}
			set
			{
				Publication previousValue = this._Publication.Entity;
				if (((previousValue != value) 
							|| (this._Publication.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Publication.Entity = null;
						previousValue.PublicationComments.Remove(this);
					}
					this._Publication.Entity = value;
					if ((value != null))
					{
						value.PublicationComments.Add(this);
						this._PublicationID = value.ID;
					}
					else
					{
						this._PublicationID = default(int);
					}
					this.SendPropertyChanged("Publication");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PublicationFile")]
	public partial class PublicationFile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PublicationID;
		
		private int _FileID;
		
		private EntityRef<File> _File;
		
		private EntityRef<Publication> _Publication;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPublicationIDChanging(int value);
    partial void OnPublicationIDChanged();
    partial void OnFileIDChanging(int value);
    partial void OnFileIDChanged();
    #endregion
		
		public PublicationFile()
		{
			this._File = default(EntityRef<File>);
			this._Publication = default(EntityRef<Publication>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublicationID", DbType="Int NOT NULL")]
		public int PublicationID
		{
			get
			{
				return this._PublicationID;
			}
			set
			{
				if ((this._PublicationID != value))
				{
					if (this._Publication.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPublicationIDChanging(value);
					this.SendPropertyChanging();
					this._PublicationID = value;
					this.SendPropertyChanged("PublicationID");
					this.OnPublicationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileID", DbType="Int NOT NULL")]
		public int FileID
		{
			get
			{
				return this._FileID;
			}
			set
			{
				if ((this._FileID != value))
				{
					if (this._File.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileIDChanging(value);
					this.SendPropertyChanging();
					this._FileID = value;
					this.SendPropertyChanged("FileID");
					this.OnFileIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="File_PublicationFile", Storage="_File", ThisKey="FileID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public File File
		{
			get
			{
				return this._File.Entity;
			}
			set
			{
				File previousValue = this._File.Entity;
				if (((previousValue != value) 
							|| (this._File.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._File.Entity = null;
						previousValue.PublicationFiles.Remove(this);
					}
					this._File.Entity = value;
					if ((value != null))
					{
						value.PublicationFiles.Add(this);
						this._FileID = value.ID;
					}
					else
					{
						this._FileID = default(int);
					}
					this.SendPropertyChanged("File");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publication_PublicationFile", Storage="_Publication", ThisKey="PublicationID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Publication Publication
		{
			get
			{
				return this._Publication.Entity;
			}
			set
			{
				Publication previousValue = this._Publication.Entity;
				if (((previousValue != value) 
							|| (this._Publication.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Publication.Entity = null;
						previousValue.PublicationFiles.Remove(this);
					}
					this._Publication.Entity = value;
					if ((value != null))
					{
						value.PublicationFiles.Add(this);
						this._PublicationID = value.ID;
					}
					else
					{
						this._PublicationID = default(int);
					}
					this.SendPropertyChanged("Publication");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PublicationLike")]
	public partial class PublicationLike : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PublicationID;
		
		private int _UserID;
		
		private bool _IsLike;
		
		private EntityRef<Publication> _Publication;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPublicationIDChanging(int value);
    partial void OnPublicationIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnIsLikeChanging(bool value);
    partial void OnIsLikeChanged();
    #endregion
		
		public PublicationLike()
		{
			this._Publication = default(EntityRef<Publication>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublicationID", DbType="Int NOT NULL")]
		public int PublicationID
		{
			get
			{
				return this._PublicationID;
			}
			set
			{
				if ((this._PublicationID != value))
				{
					if (this._Publication.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPublicationIDChanging(value);
					this.SendPropertyChanging();
					this._PublicationID = value;
					this.SendPropertyChanged("PublicationID");
					this.OnPublicationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLike", DbType="Bit NOT NULL")]
		public bool IsLike
		{
			get
			{
				return this._IsLike;
			}
			set
			{
				if ((this._IsLike != value))
				{
					this.OnIsLikeChanging(value);
					this.SendPropertyChanging();
					this._IsLike = value;
					this.SendPropertyChanged("IsLike");
					this.OnIsLikeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publication_PublicationLike", Storage="_Publication", ThisKey="PublicationID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Publication Publication
		{
			get
			{
				return this._Publication.Entity;
			}
			set
			{
				Publication previousValue = this._Publication.Entity;
				if (((previousValue != value) 
							|| (this._Publication.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Publication.Entity = null;
						previousValue.PublicationLikes.Remove(this);
					}
					this._Publication.Entity = value;
					if ((value != null))
					{
						value.PublicationLikes.Add(this);
						this._PublicationID = value.ID;
					}
					else
					{
						this._PublicationID = default(int);
					}
					this.SendPropertyChanged("Publication");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PublicationLike", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.PublicationLikes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.PublicationLikes.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PublicationLink")]
	public partial class PublicationLink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PublicationID;
		
		private int _LinkID;
		
		private bool _IsShop;
		
		private EntityRef<Link> _Link;
		
		private EntityRef<Publication> _Publication;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPublicationIDChanging(int value);
    partial void OnPublicationIDChanged();
    partial void OnLinkIDChanging(int value);
    partial void OnLinkIDChanged();
    partial void OnIsShopChanging(bool value);
    partial void OnIsShopChanged();
    #endregion
		
		public PublicationLink()
		{
			this._Link = default(EntityRef<Link>);
			this._Publication = default(EntityRef<Publication>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublicationID", DbType="Int NOT NULL")]
		public int PublicationID
		{
			get
			{
				return this._PublicationID;
			}
			set
			{
				if ((this._PublicationID != value))
				{
					if (this._Publication.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPublicationIDChanging(value);
					this.SendPropertyChanging();
					this._PublicationID = value;
					this.SendPropertyChanged("PublicationID");
					this.OnPublicationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkID", DbType="Int NOT NULL")]
		public int LinkID
		{
			get
			{
				return this._LinkID;
			}
			set
			{
				if ((this._LinkID != value))
				{
					if (this._Link.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLinkIDChanging(value);
					this.SendPropertyChanging();
					this._LinkID = value;
					this.SendPropertyChanged("LinkID");
					this.OnLinkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsShop", DbType="Bit NOT NULL")]
		public bool IsShop
		{
			get
			{
				return this._IsShop;
			}
			set
			{
				if ((this._IsShop != value))
				{
					this.OnIsShopChanging(value);
					this.SendPropertyChanging();
					this._IsShop = value;
					this.SendPropertyChanged("IsShop");
					this.OnIsShopChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Link_PublicationLink", Storage="_Link", ThisKey="LinkID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Link Link
		{
			get
			{
				return this._Link.Entity;
			}
			set
			{
				Link previousValue = this._Link.Entity;
				if (((previousValue != value) 
							|| (this._Link.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Link.Entity = null;
						previousValue.PublicationLinks.Remove(this);
					}
					this._Link.Entity = value;
					if ((value != null))
					{
						value.PublicationLinks.Add(this);
						this._LinkID = value.ID;
					}
					else
					{
						this._LinkID = default(int);
					}
					this.SendPropertyChanged("Link");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publication_PublicationLink", Storage="_Publication", ThisKey="PublicationID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Publication Publication
		{
			get
			{
				return this._Publication.Entity;
			}
			set
			{
				Publication previousValue = this._Publication.Entity;
				if (((previousValue != value) 
							|| (this._Publication.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Publication.Entity = null;
						previousValue.PublicationLinks.Remove(this);
					}
					this._Publication.Entity = value;
					if ((value != null))
					{
						value.PublicationLinks.Add(this);
						this._PublicationID = value.ID;
					}
					else
					{
						this._PublicationID = default(int);
					}
					this.SendPropertyChanged("Publication");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PublicationOrganization")]
	public partial class PublicationOrganization : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _OrganizationID;
		
		private int _PublicationID;
		
		private EntityRef<Publication> _Publication;
		
		private EntityRef<Organization> _Organization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnOrganizationIDChanging(int value);
    partial void OnOrganizationIDChanged();
    partial void OnPublicationIDChanging(int value);
    partial void OnPublicationIDChanged();
    #endregion
		
		public PublicationOrganization()
		{
			this._Publication = default(EntityRef<Publication>);
			this._Organization = default(EntityRef<Organization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationID", DbType="Int NOT NULL")]
		public int OrganizationID
		{
			get
			{
				return this._OrganizationID;
			}
			set
			{
				if ((this._OrganizationID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganizationIDChanging(value);
					this.SendPropertyChanging();
					this._OrganizationID = value;
					this.SendPropertyChanged("OrganizationID");
					this.OnOrganizationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublicationID", DbType="Int NOT NULL")]
		public int PublicationID
		{
			get
			{
				return this._PublicationID;
			}
			set
			{
				if ((this._PublicationID != value))
				{
					if (this._Publication.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPublicationIDChanging(value);
					this.SendPropertyChanging();
					this._PublicationID = value;
					this.SendPropertyChanged("PublicationID");
					this.OnPublicationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publication_PublicationOrganization", Storage="_Publication", ThisKey="PublicationID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Publication Publication
		{
			get
			{
				return this._Publication.Entity;
			}
			set
			{
				Publication previousValue = this._Publication.Entity;
				if (((previousValue != value) 
							|| (this._Publication.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Publication.Entity = null;
						previousValue.PublicationOrganizations.Remove(this);
					}
					this._Publication.Entity = value;
					if ((value != null))
					{
						value.PublicationOrganizations.Add(this);
						this._PublicationID = value.ID;
					}
					else
					{
						this._PublicationID = default(int);
					}
					this.SendPropertyChanged("Publication");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_PublicationOrganization", Storage="_Organization", ThisKey="OrganizationID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.PublicationOrganizations.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.PublicationOrganizations.Add(this);
						this._OrganizationID = value.ID;
					}
					else
					{
						this._OrganizationID = default(int);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PublicationPerson")]
	public partial class PublicationPerson : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PublicationID;
		
		private int _PersonID;
		
		private EntityRef<Publication> _Publication;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPublicationIDChanging(int value);
    partial void OnPublicationIDChanged();
    partial void OnPersonIDChanging(int value);
    partial void OnPersonIDChanged();
    #endregion
		
		public PublicationPerson()
		{
			this._Publication = default(EntityRef<Publication>);
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublicationID", DbType="Int NOT NULL")]
		public int PublicationID
		{
			get
			{
				return this._PublicationID;
			}
			set
			{
				if ((this._PublicationID != value))
				{
					if (this._Publication.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPublicationIDChanging(value);
					this.SendPropertyChanging();
					this._PublicationID = value;
					this.SendPropertyChanged("PublicationID");
					this.OnPublicationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", DbType="Int NOT NULL")]
		public int PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publication_PublicationPerson", Storage="_Publication", ThisKey="PublicationID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Publication Publication
		{
			get
			{
				return this._Publication.Entity;
			}
			set
			{
				Publication previousValue = this._Publication.Entity;
				if (((previousValue != value) 
							|| (this._Publication.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Publication.Entity = null;
						previousValue.PublicationPersons.Remove(this);
					}
					this._Publication.Entity = value;
					if ((value != null))
					{
						value.PublicationPersons.Add(this);
						this._PublicationID = value.ID;
					}
					else
					{
						this._PublicationID = default(int);
					}
					this.SendPropertyChanged("Publication");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_PublicationPerson", Storage="_Person", ThisKey="PersonID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.PublicationPersons.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.PublicationPersons.Add(this);
						this._PersonID = value.ID;
					}
					else
					{
						this._PersonID = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PublicationRegion")]
	public partial class PublicationRegion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PublicationID;
		
		private int _RegionID;
		
		private EntityRef<Publication> _Publication;
		
		private EntityRef<Region> _Region;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPublicationIDChanging(int value);
    partial void OnPublicationIDChanged();
    partial void OnRegionIDChanging(int value);
    partial void OnRegionIDChanged();
    #endregion
		
		public PublicationRegion()
		{
			this._Publication = default(EntityRef<Publication>);
			this._Region = default(EntityRef<Region>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublicationID", DbType="Int NOT NULL")]
		public int PublicationID
		{
			get
			{
				return this._PublicationID;
			}
			set
			{
				if ((this._PublicationID != value))
				{
					if (this._Publication.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPublicationIDChanging(value);
					this.SendPropertyChanging();
					this._PublicationID = value;
					this.SendPropertyChanged("PublicationID");
					this.OnPublicationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionID", DbType="Int NOT NULL")]
		public int RegionID
		{
			get
			{
				return this._RegionID;
			}
			set
			{
				if ((this._RegionID != value))
				{
					if (this._Region.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegionIDChanging(value);
					this.SendPropertyChanging();
					this._RegionID = value;
					this.SendPropertyChanged("RegionID");
					this.OnRegionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publication_PublicationRegion", Storage="_Publication", ThisKey="PublicationID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Publication Publication
		{
			get
			{
				return this._Publication.Entity;
			}
			set
			{
				Publication previousValue = this._Publication.Entity;
				if (((previousValue != value) 
							|| (this._Publication.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Publication.Entity = null;
						previousValue.PublicationRegions.Remove(this);
					}
					this._Publication.Entity = value;
					if ((value != null))
					{
						value.PublicationRegions.Add(this);
						this._PublicationID = value.ID;
					}
					else
					{
						this._PublicationID = default(int);
					}
					this.SendPropertyChanged("Publication");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_PublicationRegion", Storage="_Region", ThisKey="RegionID", OtherKey="ID", IsForeignKey=true)]
		public Region Region
		{
			get
			{
				return this._Region.Entity;
			}
			set
			{
				Region previousValue = this._Region.Entity;
				if (((previousValue != value) 
							|| (this._Region.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Region.Entity = null;
						previousValue.PublicationRegions.Remove(this);
					}
					this._Region.Entity = value;
					if ((value != null))
					{
						value.PublicationRegions.Add(this);
						this._RegionID = value.ID;
					}
					else
					{
						this._RegionID = default(int);
					}
					this.SendPropertyChanged("Region");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudyMaterialSubject")]
	public partial class StudyMaterialSubject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _StudyMaterialID;
		
		private int _SubjectID;
		
		private EntityRef<Subject> _Subject;
		
		private EntityRef<StudyMaterial> _StudyMaterial;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnStudyMaterialIDChanging(int value);
    partial void OnStudyMaterialIDChanged();
    partial void OnSubjectIDChanging(int value);
    partial void OnSubjectIDChanged();
    #endregion
		
		public StudyMaterialSubject()
		{
			this._Subject = default(EntityRef<Subject>);
			this._StudyMaterial = default(EntityRef<StudyMaterial>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudyMaterialID", DbType="Int NOT NULL")]
		public int StudyMaterialID
		{
			get
			{
				return this._StudyMaterialID;
			}
			set
			{
				if ((this._StudyMaterialID != value))
				{
					if (this._StudyMaterial.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudyMaterialIDChanging(value);
					this.SendPropertyChanging();
					this._StudyMaterialID = value;
					this.SendPropertyChanged("StudyMaterialID");
					this.OnStudyMaterialIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectID", DbType="Int NOT NULL")]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_StudyMaterialSubject", Storage="_Subject", ThisKey="SubjectID", OtherKey="ID", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.StudyMaterialSubjects.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.StudyMaterialSubjects.Add(this);
						this._SubjectID = value.ID;
					}
					else
					{
						this._SubjectID = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudyMaterial_StudyMaterialSubject", Storage="_StudyMaterial", ThisKey="StudyMaterialID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public StudyMaterial StudyMaterial
		{
			get
			{
				return this._StudyMaterial.Entity;
			}
			set
			{
				StudyMaterial previousValue = this._StudyMaterial.Entity;
				if (((previousValue != value) 
							|| (this._StudyMaterial.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StudyMaterial.Entity = null;
						previousValue.StudyMaterialSubjects.Remove(this);
					}
					this._StudyMaterial.Entity = value;
					if ((value != null))
					{
						value.StudyMaterialSubjects.Add(this);
						this._StudyMaterialID = value.ID;
					}
					else
					{
						this._StudyMaterialID = default(int);
					}
					this.SendPropertyChanged("StudyMaterial");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudyMaterialComment")]
	public partial class StudyMaterialComment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _StudyMaterialID;
		
		private int _CommentID;
		
		private EntityRef<StudyMaterial> _StudyMaterial;
		
		private EntityRef<Comment> _Comment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnStudyMaterialIDChanging(int value);
    partial void OnStudyMaterialIDChanged();
    partial void OnCommentIDChanging(int value);
    partial void OnCommentIDChanged();
    #endregion
		
		public StudyMaterialComment()
		{
			this._StudyMaterial = default(EntityRef<StudyMaterial>);
			this._Comment = default(EntityRef<Comment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudyMaterialID", DbType="Int NOT NULL")]
		public int StudyMaterialID
		{
			get
			{
				return this._StudyMaterialID;
			}
			set
			{
				if ((this._StudyMaterialID != value))
				{
					if (this._StudyMaterial.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudyMaterialIDChanging(value);
					this.SendPropertyChanging();
					this._StudyMaterialID = value;
					this.SendPropertyChanged("StudyMaterialID");
					this.OnStudyMaterialIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentID", DbType="Int NOT NULL")]
		public int CommentID
		{
			get
			{
				return this._CommentID;
			}
			set
			{
				if ((this._CommentID != value))
				{
					if (this._Comment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommentIDChanging(value);
					this.SendPropertyChanging();
					this._CommentID = value;
					this.SendPropertyChanged("CommentID");
					this.OnCommentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudyMaterial_StudyMaterialComment", Storage="_StudyMaterial", ThisKey="StudyMaterialID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public StudyMaterial StudyMaterial
		{
			get
			{
				return this._StudyMaterial.Entity;
			}
			set
			{
				StudyMaterial previousValue = this._StudyMaterial.Entity;
				if (((previousValue != value) 
							|| (this._StudyMaterial.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StudyMaterial.Entity = null;
						previousValue.StudyMaterialComments.Remove(this);
					}
					this._StudyMaterial.Entity = value;
					if ((value != null))
					{
						value.StudyMaterialComments.Add(this);
						this._StudyMaterialID = value.ID;
					}
					else
					{
						this._StudyMaterialID = default(int);
					}
					this.SendPropertyChanged("StudyMaterial");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_StudyMaterialComment", Storage="_Comment", ThisKey="CommentID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Comment Comment
		{
			get
			{
				return this._Comment.Entity;
			}
			set
			{
				Comment previousValue = this._Comment.Entity;
				if (((previousValue != value) 
							|| (this._Comment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Comment.Entity = null;
						previousValue.StudyMaterialComments.Remove(this);
					}
					this._Comment.Entity = value;
					if ((value != null))
					{
						value.StudyMaterialComments.Add(this);
						this._CommentID = value.ID;
					}
					else
					{
						this._CommentID = default(int);
					}
					this.SendPropertyChanged("Comment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudyMaterialFile")]
	public partial class StudyMaterialFile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _StudyMaterialID;
		
		private int _FileID;
		
		private EntityRef<File> _File;
		
		private EntityRef<StudyMaterial> _StudyMaterial;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnStudyMaterialIDChanging(int value);
    partial void OnStudyMaterialIDChanged();
    partial void OnFileIDChanging(int value);
    partial void OnFileIDChanged();
    #endregion
		
		public StudyMaterialFile()
		{
			this._File = default(EntityRef<File>);
			this._StudyMaterial = default(EntityRef<StudyMaterial>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudyMaterialID", DbType="Int NOT NULL")]
		public int StudyMaterialID
		{
			get
			{
				return this._StudyMaterialID;
			}
			set
			{
				if ((this._StudyMaterialID != value))
				{
					if (this._StudyMaterial.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudyMaterialIDChanging(value);
					this.SendPropertyChanging();
					this._StudyMaterialID = value;
					this.SendPropertyChanged("StudyMaterialID");
					this.OnStudyMaterialIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileID", DbType="Int NOT NULL")]
		public int FileID
		{
			get
			{
				return this._FileID;
			}
			set
			{
				if ((this._FileID != value))
				{
					if (this._File.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileIDChanging(value);
					this.SendPropertyChanging();
					this._FileID = value;
					this.SendPropertyChanged("FileID");
					this.OnFileIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="File_StudyMaterialFile", Storage="_File", ThisKey="FileID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public File File
		{
			get
			{
				return this._File.Entity;
			}
			set
			{
				File previousValue = this._File.Entity;
				if (((previousValue != value) 
							|| (this._File.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._File.Entity = null;
						previousValue.StudyMaterialFiles.Remove(this);
					}
					this._File.Entity = value;
					if ((value != null))
					{
						value.StudyMaterialFiles.Add(this);
						this._FileID = value.ID;
					}
					else
					{
						this._FileID = default(int);
					}
					this.SendPropertyChanged("File");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudyMaterial_StudyMaterialFile", Storage="_StudyMaterial", ThisKey="StudyMaterialID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public StudyMaterial StudyMaterial
		{
			get
			{
				return this._StudyMaterial.Entity;
			}
			set
			{
				StudyMaterial previousValue = this._StudyMaterial.Entity;
				if (((previousValue != value) 
							|| (this._StudyMaterial.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StudyMaterial.Entity = null;
						previousValue.StudyMaterialFiles.Remove(this);
					}
					this._StudyMaterial.Entity = value;
					if ((value != null))
					{
						value.StudyMaterialFiles.Add(this);
						this._StudyMaterialID = value.ID;
					}
					else
					{
						this._StudyMaterialID = default(int);
					}
					this.SendPropertyChanged("StudyMaterial");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudyMaterialLike")]
	public partial class StudyMaterialLike : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _StudyMaterialID;
		
		private int _UserID;
		
		private bool _IsLike;
		
		private EntityRef<StudyMaterial> _StudyMaterial;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnStudyMaterialIDChanging(int value);
    partial void OnStudyMaterialIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnIsLikeChanging(bool value);
    partial void OnIsLikeChanged();
    #endregion
		
		public StudyMaterialLike()
		{
			this._StudyMaterial = default(EntityRef<StudyMaterial>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudyMaterialID", DbType="Int NOT NULL")]
		public int StudyMaterialID
		{
			get
			{
				return this._StudyMaterialID;
			}
			set
			{
				if ((this._StudyMaterialID != value))
				{
					if (this._StudyMaterial.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudyMaterialIDChanging(value);
					this.SendPropertyChanging();
					this._StudyMaterialID = value;
					this.SendPropertyChanged("StudyMaterialID");
					this.OnStudyMaterialIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLike", DbType="Bit NOT NULL")]
		public bool IsLike
		{
			get
			{
				return this._IsLike;
			}
			set
			{
				if ((this._IsLike != value))
				{
					this.OnIsLikeChanging(value);
					this.SendPropertyChanging();
					this._IsLike = value;
					this.SendPropertyChanged("IsLike");
					this.OnIsLikeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudyMaterial_StudyMaterialLike", Storage="_StudyMaterial", ThisKey="StudyMaterialID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public StudyMaterial StudyMaterial
		{
			get
			{
				return this._StudyMaterial.Entity;
			}
			set
			{
				StudyMaterial previousValue = this._StudyMaterial.Entity;
				if (((previousValue != value) 
							|| (this._StudyMaterial.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StudyMaterial.Entity = null;
						previousValue.StudyMaterialLikes.Remove(this);
					}
					this._StudyMaterial.Entity = value;
					if ((value != null))
					{
						value.StudyMaterialLikes.Add(this);
						this._StudyMaterialID = value.ID;
					}
					else
					{
						this._StudyMaterialID = default(int);
					}
					this.SendPropertyChanged("StudyMaterial");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_StudyMaterialLike", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.StudyMaterialLikes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.StudyMaterialLikes.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudyMaterialLink")]
	public partial class StudyMaterialLink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _StudyMaterialID;
		
		private int _LinkID;
		
		private EntityRef<Link> _Link;
		
		private EntityRef<StudyMaterial> _StudyMaterial;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnStudyMaterialIDChanging(int value);
    partial void OnStudyMaterialIDChanged();
    partial void OnLinkIDChanging(int value);
    partial void OnLinkIDChanged();
    #endregion
		
		public StudyMaterialLink()
		{
			this._Link = default(EntityRef<Link>);
			this._StudyMaterial = default(EntityRef<StudyMaterial>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudyMaterialID", DbType="Int NOT NULL")]
		public int StudyMaterialID
		{
			get
			{
				return this._StudyMaterialID;
			}
			set
			{
				if ((this._StudyMaterialID != value))
				{
					if (this._StudyMaterial.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudyMaterialIDChanging(value);
					this.SendPropertyChanging();
					this._StudyMaterialID = value;
					this.SendPropertyChanged("StudyMaterialID");
					this.OnStudyMaterialIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkID", DbType="Int NOT NULL")]
		public int LinkID
		{
			get
			{
				return this._LinkID;
			}
			set
			{
				if ((this._LinkID != value))
				{
					if (this._Link.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLinkIDChanging(value);
					this.SendPropertyChanging();
					this._LinkID = value;
					this.SendPropertyChanged("LinkID");
					this.OnLinkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Link_StudyMaterialLink", Storage="_Link", ThisKey="LinkID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Link Link
		{
			get
			{
				return this._Link.Entity;
			}
			set
			{
				Link previousValue = this._Link.Entity;
				if (((previousValue != value) 
							|| (this._Link.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Link.Entity = null;
						previousValue.StudyMaterialLinks.Remove(this);
					}
					this._Link.Entity = value;
					if ((value != null))
					{
						value.StudyMaterialLinks.Add(this);
						this._LinkID = value.ID;
					}
					else
					{
						this._LinkID = default(int);
					}
					this.SendPropertyChanged("Link");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudyMaterial_StudyMaterialLink", Storage="_StudyMaterial", ThisKey="StudyMaterialID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public StudyMaterial StudyMaterial
		{
			get
			{
				return this._StudyMaterial.Entity;
			}
			set
			{
				StudyMaterial previousValue = this._StudyMaterial.Entity;
				if (((previousValue != value) 
							|| (this._StudyMaterial.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StudyMaterial.Entity = null;
						previousValue.StudyMaterialLinks.Remove(this);
					}
					this._StudyMaterial.Entity = value;
					if ((value != null))
					{
						value.StudyMaterialLinks.Add(this);
						this._StudyMaterialID = value.ID;
					}
					else
					{
						this._StudyMaterialID = default(int);
					}
					this.SendPropertyChanged("StudyMaterial");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudyMaterialPerson")]
	public partial class StudyMaterialPerson : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _StudyMaterialID;
		
		private int _PersonID;
		
		private EntityRef<StudyMaterial> _StudyMaterial;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnStudyMaterialIDChanging(int value);
    partial void OnStudyMaterialIDChanged();
    partial void OnPersonIDChanging(int value);
    partial void OnPersonIDChanged();
    #endregion
		
		public StudyMaterialPerson()
		{
			this._StudyMaterial = default(EntityRef<StudyMaterial>);
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudyMaterialID", DbType="Int NOT NULL")]
		public int StudyMaterialID
		{
			get
			{
				return this._StudyMaterialID;
			}
			set
			{
				if ((this._StudyMaterialID != value))
				{
					if (this._StudyMaterial.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudyMaterialIDChanging(value);
					this.SendPropertyChanging();
					this._StudyMaterialID = value;
					this.SendPropertyChanged("StudyMaterialID");
					this.OnStudyMaterialIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", DbType="Int NOT NULL")]
		public int PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudyMaterial_StudyMaterialPerson", Storage="_StudyMaterial", ThisKey="StudyMaterialID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public StudyMaterial StudyMaterial
		{
			get
			{
				return this._StudyMaterial.Entity;
			}
			set
			{
				StudyMaterial previousValue = this._StudyMaterial.Entity;
				if (((previousValue != value) 
							|| (this._StudyMaterial.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StudyMaterial.Entity = null;
						previousValue.StudyMaterialPersons.Remove(this);
					}
					this._StudyMaterial.Entity = value;
					if ((value != null))
					{
						value.StudyMaterialPersons.Add(this);
						this._StudyMaterialID = value.ID;
					}
					else
					{
						this._StudyMaterialID = default(int);
					}
					this.SendPropertyChanged("StudyMaterial");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_StudyMaterialPerson", Storage="_Person", ThisKey="PersonID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.StudyMaterialPersons.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.StudyMaterialPersons.Add(this);
						this._PersonID = value.ID;
					}
					else
					{
						this._PersonID = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudyMaterialRegion")]
	public partial class StudyMaterialRegion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _StudyMaterialID;
		
		private int _RegionID;
		
		private EntityRef<StudyMaterial> _StudyMaterial;
		
		private EntityRef<Region> _Region;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnStudyMaterialIDChanging(int value);
    partial void OnStudyMaterialIDChanged();
    partial void OnRegionIDChanging(int value);
    partial void OnRegionIDChanged();
    #endregion
		
		public StudyMaterialRegion()
		{
			this._StudyMaterial = default(EntityRef<StudyMaterial>);
			this._Region = default(EntityRef<Region>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudyMaterialID", DbType="Int NOT NULL")]
		public int StudyMaterialID
		{
			get
			{
				return this._StudyMaterialID;
			}
			set
			{
				if ((this._StudyMaterialID != value))
				{
					if (this._StudyMaterial.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudyMaterialIDChanging(value);
					this.SendPropertyChanging();
					this._StudyMaterialID = value;
					this.SendPropertyChanged("StudyMaterialID");
					this.OnStudyMaterialIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionID", DbType="Int NOT NULL")]
		public int RegionID
		{
			get
			{
				return this._RegionID;
			}
			set
			{
				if ((this._RegionID != value))
				{
					if (this._Region.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegionIDChanging(value);
					this.SendPropertyChanging();
					this._RegionID = value;
					this.SendPropertyChanged("RegionID");
					this.OnRegionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudyMaterial_StudyMaterialRegion", Storage="_StudyMaterial", ThisKey="StudyMaterialID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public StudyMaterial StudyMaterial
		{
			get
			{
				return this._StudyMaterial.Entity;
			}
			set
			{
				StudyMaterial previousValue = this._StudyMaterial.Entity;
				if (((previousValue != value) 
							|| (this._StudyMaterial.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StudyMaterial.Entity = null;
						previousValue.StudyMaterialRegions.Remove(this);
					}
					this._StudyMaterial.Entity = value;
					if ((value != null))
					{
						value.StudyMaterialRegions.Add(this);
						this._StudyMaterialID = value.ID;
					}
					else
					{
						this._StudyMaterialID = default(int);
					}
					this.SendPropertyChanged("StudyMaterial");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_StudyMaterialRegion", Storage="_Region", ThisKey="RegionID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Region Region
		{
			get
			{
				return this._Region.Entity;
			}
			set
			{
				Region previousValue = this._Region.Entity;
				if (((previousValue != value) 
							|| (this._Region.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Region.Entity = null;
						previousValue.StudyMaterialRegions.Remove(this);
					}
					this._Region.Entity = value;
					if ((value != null))
					{
						value.StudyMaterialRegions.Add(this);
						this._RegionID = value.ID;
					}
					else
					{
						this._RegionID = default(int);
					}
					this.SendPropertyChanged("Region");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WebLinkAccess")]
	public partial class WebLinkAccess : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _WebLinkID;
		
		private int _UserID;
		
		private EntityRef<WebLink> _WebLink;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnWebLinkIDChanging(int value);
    partial void OnWebLinkIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public WebLinkAccess()
		{
			this._WebLink = default(EntityRef<WebLink>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebLinkID", DbType="Int NOT NULL")]
		public int WebLinkID
		{
			get
			{
				return this._WebLinkID;
			}
			set
			{
				if ((this._WebLinkID != value))
				{
					if (this._WebLink.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWebLinkIDChanging(value);
					this.SendPropertyChanging();
					this._WebLinkID = value;
					this.SendPropertyChanged("WebLinkID");
					this.OnWebLinkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WebLink_WebLinkAccess", Storage="_WebLink", ThisKey="WebLinkID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public WebLink WebLink
		{
			get
			{
				return this._WebLink.Entity;
			}
			set
			{
				WebLink previousValue = this._WebLink.Entity;
				if (((previousValue != value) 
							|| (this._WebLink.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WebLink.Entity = null;
						previousValue.WebLinkAccesses.Remove(this);
					}
					this._WebLink.Entity = value;
					if ((value != null))
					{
						value.WebLinkAccesses.Add(this);
						this._WebLinkID = value.ID;
					}
					else
					{
						this._WebLinkID = default(int);
					}
					this.SendPropertyChanged("WebLink");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_WebLinkAccess", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.WebLinkAccesses.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.WebLinkAccesses.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WebLinkSubject")]
	public partial class WebLinkSubject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _WebLinkID;
		
		private int _SubjectID;
		
		private EntityRef<Subject> _Subject;
		
		private EntityRef<WebLink> _WebLink;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnWebLinkIDChanging(int value);
    partial void OnWebLinkIDChanged();
    partial void OnSubjectIDChanging(int value);
    partial void OnSubjectIDChanged();
    #endregion
		
		public WebLinkSubject()
		{
			this._Subject = default(EntityRef<Subject>);
			this._WebLink = default(EntityRef<WebLink>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebLinkID", DbType="Int NOT NULL")]
		public int WebLinkID
		{
			get
			{
				return this._WebLinkID;
			}
			set
			{
				if ((this._WebLinkID != value))
				{
					if (this._WebLink.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWebLinkIDChanging(value);
					this.SendPropertyChanging();
					this._WebLinkID = value;
					this.SendPropertyChanged("WebLinkID");
					this.OnWebLinkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectID", DbType="Int NOT NULL")]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_WebLinkSubject", Storage="_Subject", ThisKey="SubjectID", OtherKey="ID", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.WebLinkSubjects.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.WebLinkSubjects.Add(this);
						this._SubjectID = value.ID;
					}
					else
					{
						this._SubjectID = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WebLink_WebLinkSubject", Storage="_WebLink", ThisKey="WebLinkID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public WebLink WebLink
		{
			get
			{
				return this._WebLink.Entity;
			}
			set
			{
				WebLink previousValue = this._WebLink.Entity;
				if (((previousValue != value) 
							|| (this._WebLink.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WebLink.Entity = null;
						previousValue.WebLinkSubjects.Remove(this);
					}
					this._WebLink.Entity = value;
					if ((value != null))
					{
						value.WebLinkSubjects.Add(this);
						this._WebLinkID = value.ID;
					}
					else
					{
						this._WebLinkID = default(int);
					}
					this.SendPropertyChanged("WebLink");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WebLinkComment")]
	public partial class WebLinkComment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _WebLinkID;
		
		private int _CommentID;
		
		private EntityRef<WebLink> _WebLink;
		
		private EntityRef<Comment> _Comment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnWebLinkIDChanging(int value);
    partial void OnWebLinkIDChanged();
    partial void OnCommentIDChanging(int value);
    partial void OnCommentIDChanged();
    #endregion
		
		public WebLinkComment()
		{
			this._WebLink = default(EntityRef<WebLink>);
			this._Comment = default(EntityRef<Comment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebLinkID", DbType="Int NOT NULL")]
		public int WebLinkID
		{
			get
			{
				return this._WebLinkID;
			}
			set
			{
				if ((this._WebLinkID != value))
				{
					if (this._WebLink.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWebLinkIDChanging(value);
					this.SendPropertyChanging();
					this._WebLinkID = value;
					this.SendPropertyChanged("WebLinkID");
					this.OnWebLinkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentID", DbType="Int NOT NULL")]
		public int CommentID
		{
			get
			{
				return this._CommentID;
			}
			set
			{
				if ((this._CommentID != value))
				{
					if (this._Comment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommentIDChanging(value);
					this.SendPropertyChanging();
					this._CommentID = value;
					this.SendPropertyChanged("CommentID");
					this.OnCommentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WebLink_WebLinkComment", Storage="_WebLink", ThisKey="WebLinkID", OtherKey="ID", IsForeignKey=true)]
		public WebLink WebLink
		{
			get
			{
				return this._WebLink.Entity;
			}
			set
			{
				WebLink previousValue = this._WebLink.Entity;
				if (((previousValue != value) 
							|| (this._WebLink.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WebLink.Entity = null;
						previousValue.WebLinkComments.Remove(this);
					}
					this._WebLink.Entity = value;
					if ((value != null))
					{
						value.WebLinkComments.Add(this);
						this._WebLinkID = value.ID;
					}
					else
					{
						this._WebLinkID = default(int);
					}
					this.SendPropertyChanged("WebLink");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_WebLinkComment", Storage="_Comment", ThisKey="CommentID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Comment Comment
		{
			get
			{
				return this._Comment.Entity;
			}
			set
			{
				Comment previousValue = this._Comment.Entity;
				if (((previousValue != value) 
							|| (this._Comment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Comment.Entity = null;
						previousValue.WebLinkComments.Remove(this);
					}
					this._Comment.Entity = value;
					if ((value != null))
					{
						value.WebLinkComments.Add(this);
						this._CommentID = value.ID;
					}
					else
					{
						this._CommentID = default(int);
					}
					this.SendPropertyChanged("Comment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WebLinkLike")]
	public partial class WebLinkLike : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _WebLinkID;
		
		private int _UserID;
		
		private bool _IsLike;
		
		private EntityRef<WebLink> _WebLink;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnWebLinkIDChanging(int value);
    partial void OnWebLinkIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnIsLikeChanging(bool value);
    partial void OnIsLikeChanged();
    #endregion
		
		public WebLinkLike()
		{
			this._WebLink = default(EntityRef<WebLink>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebLinkID", DbType="Int NOT NULL")]
		public int WebLinkID
		{
			get
			{
				return this._WebLinkID;
			}
			set
			{
				if ((this._WebLinkID != value))
				{
					if (this._WebLink.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWebLinkIDChanging(value);
					this.SendPropertyChanging();
					this._WebLinkID = value;
					this.SendPropertyChanged("WebLinkID");
					this.OnWebLinkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLike", DbType="Bit NOT NULL")]
		public bool IsLike
		{
			get
			{
				return this._IsLike;
			}
			set
			{
				if ((this._IsLike != value))
				{
					this.OnIsLikeChanging(value);
					this.SendPropertyChanging();
					this._IsLike = value;
					this.SendPropertyChanged("IsLike");
					this.OnIsLikeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WebLink_WebLinkLike", Storage="_WebLink", ThisKey="WebLinkID", OtherKey="ID", IsForeignKey=true)]
		public WebLink WebLink
		{
			get
			{
				return this._WebLink.Entity;
			}
			set
			{
				WebLink previousValue = this._WebLink.Entity;
				if (((previousValue != value) 
							|| (this._WebLink.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WebLink.Entity = null;
						previousValue.WebLinkLikes.Remove(this);
					}
					this._WebLink.Entity = value;
					if ((value != null))
					{
						value.WebLinkLikes.Add(this);
						this._WebLinkID = value.ID;
					}
					else
					{
						this._WebLinkID = default(int);
					}
					this.SendPropertyChanged("WebLink");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_WebLinkLike", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.WebLinkLikes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.WebLinkLikes.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WebLinkRegion")]
	public partial class WebLinkRegion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _WebLinkID;
		
		private int _RegionID;
		
		private EntityRef<WebLink> _WebLink;
		
		private EntityRef<Region> _Region;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnWebLinkIDChanging(int value);
    partial void OnWebLinkIDChanged();
    partial void OnRegionIDChanging(int value);
    partial void OnRegionIDChanged();
    #endregion
		
		public WebLinkRegion()
		{
			this._WebLink = default(EntityRef<WebLink>);
			this._Region = default(EntityRef<Region>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebLinkID", DbType="Int NOT NULL")]
		public int WebLinkID
		{
			get
			{
				return this._WebLinkID;
			}
			set
			{
				if ((this._WebLinkID != value))
				{
					if (this._WebLink.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWebLinkIDChanging(value);
					this.SendPropertyChanging();
					this._WebLinkID = value;
					this.SendPropertyChanged("WebLinkID");
					this.OnWebLinkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionID", DbType="Int NOT NULL")]
		public int RegionID
		{
			get
			{
				return this._RegionID;
			}
			set
			{
				if ((this._RegionID != value))
				{
					if (this._Region.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegionIDChanging(value);
					this.SendPropertyChanging();
					this._RegionID = value;
					this.SendPropertyChanged("RegionID");
					this.OnRegionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WebLink_WebLinkRegion", Storage="_WebLink", ThisKey="WebLinkID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public WebLink WebLink
		{
			get
			{
				return this._WebLink.Entity;
			}
			set
			{
				WebLink previousValue = this._WebLink.Entity;
				if (((previousValue != value) 
							|| (this._WebLink.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WebLink.Entity = null;
						previousValue.WebLinkRegions.Remove(this);
					}
					this._WebLink.Entity = value;
					if ((value != null))
					{
						value.WebLinkRegions.Add(this);
						this._WebLinkID = value.ID;
					}
					else
					{
						this._WebLinkID = default(int);
					}
					this.SendPropertyChanged("WebLink");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_WebLinkRegion", Storage="_Region", ThisKey="RegionID", OtherKey="ID", IsForeignKey=true)]
		public Region Region
		{
			get
			{
				return this._Region.Entity;
			}
			set
			{
				Region previousValue = this._Region.Entity;
				if (((previousValue != value) 
							|| (this._Region.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Region.Entity = null;
						previousValue.WebLinkRegions.Remove(this);
					}
					this._Region.Entity = value;
					if ((value != null))
					{
						value.WebLinkRegions.Add(this);
						this._RegionID = value.ID;
					}
					else
					{
						this._RegionID = default(int);
					}
					this.SendPropertyChanged("Region");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudyMaterialOrganization")]
	public partial class StudyMaterialOrganization : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _StudyMaterialID;
		
		private int _OrganizationID;
		
		private EntityRef<StudyMaterial> _StudyMaterial;
		
		private EntityRef<Organization> _Organization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnStudyMaterialIDChanging(int value);
    partial void OnStudyMaterialIDChanged();
    partial void OnOrganizationIDChanging(int value);
    partial void OnOrganizationIDChanged();
    #endregion
		
		public StudyMaterialOrganization()
		{
			this._StudyMaterial = default(EntityRef<StudyMaterial>);
			this._Organization = default(EntityRef<Organization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudyMaterialID", DbType="Int NOT NULL")]
		public int StudyMaterialID
		{
			get
			{
				return this._StudyMaterialID;
			}
			set
			{
				if ((this._StudyMaterialID != value))
				{
					if (this._StudyMaterial.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudyMaterialIDChanging(value);
					this.SendPropertyChanging();
					this._StudyMaterialID = value;
					this.SendPropertyChanged("StudyMaterialID");
					this.OnStudyMaterialIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationID", DbType="Int NOT NULL")]
		public int OrganizationID
		{
			get
			{
				return this._OrganizationID;
			}
			set
			{
				if ((this._OrganizationID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganizationIDChanging(value);
					this.SendPropertyChanging();
					this._OrganizationID = value;
					this.SendPropertyChanged("OrganizationID");
					this.OnOrganizationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudyMaterial_StudyMaterialOrganization", Storage="_StudyMaterial", ThisKey="StudyMaterialID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public StudyMaterial StudyMaterial
		{
			get
			{
				return this._StudyMaterial.Entity;
			}
			set
			{
				StudyMaterial previousValue = this._StudyMaterial.Entity;
				if (((previousValue != value) 
							|| (this._StudyMaterial.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StudyMaterial.Entity = null;
						previousValue.StudyMaterialOrganizations.Remove(this);
					}
					this._StudyMaterial.Entity = value;
					if ((value != null))
					{
						value.StudyMaterialOrganizations.Add(this);
						this._StudyMaterialID = value.ID;
					}
					else
					{
						this._StudyMaterialID = default(int);
					}
					this.SendPropertyChanged("StudyMaterial");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_StudyMaterialOrganization", Storage="_Organization", ThisKey="OrganizationID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.StudyMaterialOrganizations.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.StudyMaterialOrganizations.Add(this);
						this._OrganizationID = value.ID;
					}
					else
					{
						this._OrganizationID = default(int);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[File]")]
	public partial class File : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Path;
		
		private string _Name;
		
		private System.DateTime _AddedDate;
		
		private bool _IsImage;
		
		private string _MimeType;
		
		private EntitySet<DocumentFile> _DocumentFiles;
		
		private EntitySet<EventFile> _EventFiles;
		
		private EntitySet<PublicationFile> _PublicationFiles;
		
		private EntitySet<StudyMaterialFile> _StudyMaterialFiles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnIsImageChanging(bool value);
    partial void OnIsImageChanged();
    partial void OnMimeTypeChanging(string value);
    partial void OnMimeTypeChanged();
    #endregion
		
		public File()
		{
			this._DocumentFiles = new EntitySet<DocumentFile>(new Action<DocumentFile>(this.attach_DocumentFiles), new Action<DocumentFile>(this.detach_DocumentFiles));
			this._EventFiles = new EntitySet<EventFile>(new Action<EventFile>(this.attach_EventFiles), new Action<EventFile>(this.detach_EventFiles));
			this._PublicationFiles = new EntitySet<PublicationFile>(new Action<PublicationFile>(this.attach_PublicationFiles), new Action<PublicationFile>(this.detach_PublicationFiles));
			this._StudyMaterialFiles = new EntitySet<StudyMaterialFile>(new Action<StudyMaterialFile>(this.attach_StudyMaterialFiles), new Action<StudyMaterialFile>(this.detach_StudyMaterialFiles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Path", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsImage", DbType="Bit NOT NULL")]
		public bool IsImage
		{
			get
			{
				return this._IsImage;
			}
			set
			{
				if ((this._IsImage != value))
				{
					this.OnIsImageChanging(value);
					this.SendPropertyChanging();
					this._IsImage = value;
					this.SendPropertyChanged("IsImage");
					this.OnIsImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MimeType", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string MimeType
		{
			get
			{
				return this._MimeType;
			}
			set
			{
				if ((this._MimeType != value))
				{
					this.OnMimeTypeChanging(value);
					this.SendPropertyChanging();
					this._MimeType = value;
					this.SendPropertyChanged("MimeType");
					this.OnMimeTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="File_DocumentFile", Storage="_DocumentFiles", ThisKey="ID", OtherKey="FileID")]
		public EntitySet<DocumentFile> DocumentFiles
		{
			get
			{
				return this._DocumentFiles;
			}
			set
			{
				this._DocumentFiles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="File_EventFile", Storage="_EventFiles", ThisKey="ID", OtherKey="FileID")]
		public EntitySet<EventFile> EventFiles
		{
			get
			{
				return this._EventFiles;
			}
			set
			{
				this._EventFiles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="File_PublicationFile", Storage="_PublicationFiles", ThisKey="ID", OtherKey="FileID")]
		public EntitySet<PublicationFile> PublicationFiles
		{
			get
			{
				return this._PublicationFiles;
			}
			set
			{
				this._PublicationFiles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="File_StudyMaterialFile", Storage="_StudyMaterialFiles", ThisKey="ID", OtherKey="FileID")]
		public EntitySet<StudyMaterialFile> StudyMaterialFiles
		{
			get
			{
				return this._StudyMaterialFiles;
			}
			set
			{
				this._StudyMaterialFiles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DocumentFiles(DocumentFile entity)
		{
			this.SendPropertyChanging();
			entity.File = this;
		}
		
		private void detach_DocumentFiles(DocumentFile entity)
		{
			this.SendPropertyChanging();
			entity.File = null;
		}
		
		private void attach_EventFiles(EventFile entity)
		{
			this.SendPropertyChanging();
			entity.File = this;
		}
		
		private void detach_EventFiles(EventFile entity)
		{
			this.SendPropertyChanging();
			entity.File = null;
		}
		
		private void attach_PublicationFiles(PublicationFile entity)
		{
			this.SendPropertyChanging();
			entity.File = this;
		}
		
		private void detach_PublicationFiles(PublicationFile entity)
		{
			this.SendPropertyChanging();
			entity.File = null;
		}
		
		private void attach_StudyMaterialFiles(StudyMaterialFile entity)
		{
			this.SendPropertyChanging();
			entity.File = this;
		}
		
		private void detach_StudyMaterialFiles(StudyMaterialFile entity)
		{
			this.SendPropertyChanging();
			entity.File = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Article")]
	public partial class Article : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Header;
		
		private string _Url;
		
		private string _Text;
		
		private EntitySet<ArticleSubject> _ArticleSubjects;
		
		private EntitySet<ArticleRecordRedirect> _ArticleRecordRedirects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnHeaderChanging(string value);
    partial void OnHeaderChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public Article()
		{
			this._ArticleSubjects = new EntitySet<ArticleSubject>(new Action<ArticleSubject>(this.attach_ArticleSubjects), new Action<ArticleSubject>(this.detach_ArticleSubjects));
			this._ArticleRecordRedirects = new EntitySet<ArticleRecordRedirect>(new Action<ArticleRecordRedirect>(this.attach_ArticleRecordRedirects), new Action<ArticleRecordRedirect>(this.detach_ArticleRecordRedirects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Header", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Header
		{
			get
			{
				return this._Header;
			}
			set
			{
				if ((this._Header != value))
				{
					this.OnHeaderChanging(value);
					this.SendPropertyChanging();
					this._Header = value;
					this.SendPropertyChanged("Header");
					this.OnHeaderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Article_ArticleSubject", Storage="_ArticleSubjects", ThisKey="ID", OtherKey="ArticleID")]
		public EntitySet<ArticleSubject> ArticleSubjects
		{
			get
			{
				return this._ArticleSubjects;
			}
			set
			{
				this._ArticleSubjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Article_ArticleRecordRedirect", Storage="_ArticleRecordRedirects", ThisKey="ID", OtherKey="ArticleID")]
		public EntitySet<ArticleRecordRedirect> ArticleRecordRedirects
		{
			get
			{
				return this._ArticleRecordRedirects;
			}
			set
			{
				this._ArticleRecordRedirects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ArticleSubjects(ArticleSubject entity)
		{
			this.SendPropertyChanging();
			entity.Article = this;
		}
		
		private void detach_ArticleSubjects(ArticleSubject entity)
		{
			this.SendPropertyChanging();
			entity.Article = null;
		}
		
		private void attach_ArticleRecordRedirects(ArticleRecordRedirect entity)
		{
			this.SendPropertyChanging();
			entity.Article = this;
		}
		
		private void detach_ArticleRecordRedirects(ArticleRecordRedirect entity)
		{
			this.SendPropertyChanging();
			entity.Article = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Document")]
	public partial class Document : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private System.Nullable<int> _EventID;
		
		private string _Header;
		
		private string _Url;
		
		private string _Teaser;
		
		private string _Content;
		
		private System.DateTime _AddedDate;
		
		private System.DateTime _ChangedDate;
		
		private System.Nullable<System.DateTime> _ModeratedDate;
		
		private int _TotalLikes;
		
		private EntitySet<DocumentAccess> _DocumentAccesses;
		
		private EntitySet<DocumentFile> _DocumentFiles;
		
		private EntitySet<DocumentLike> _DocumentLikes;
		
		private EntitySet<DocumentLink> _DocumentLinks;
		
		private EntitySet<DocumentOrganization> _DocumentOrganizations;
		
		private EntitySet<DocumentComment> _DocumentComments;
		
		private EntitySet<DocumentSubject> _DocumentSubjects;
		
		private EntitySet<DocumentRegion> _DocumentRegions;
		
		private EntitySet<DocumentRecordRedirect> _DocumentRecordRedirects;
		
		private EntitySet<DocumentSubscription> _DocumentSubscriptions;
		
		private EntityRef<User> _User;
		
		private EntityRef<Event> _Event;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnEventIDChanging(System.Nullable<int> value);
    partial void OnEventIDChanged();
    partial void OnHeaderChanging(string value);
    partial void OnHeaderChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnTeaserChanging(string value);
    partial void OnTeaserChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnChangedDateChanging(System.DateTime value);
    partial void OnChangedDateChanged();
    partial void OnModeratedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModeratedDateChanged();
    partial void OnTotalLikesChanging(int value);
    partial void OnTotalLikesChanged();
    #endregion
		
		public Document()
		{
			this._DocumentAccesses = new EntitySet<DocumentAccess>(new Action<DocumentAccess>(this.attach_DocumentAccesses), new Action<DocumentAccess>(this.detach_DocumentAccesses));
			this._DocumentFiles = new EntitySet<DocumentFile>(new Action<DocumentFile>(this.attach_DocumentFiles), new Action<DocumentFile>(this.detach_DocumentFiles));
			this._DocumentLikes = new EntitySet<DocumentLike>(new Action<DocumentLike>(this.attach_DocumentLikes), new Action<DocumentLike>(this.detach_DocumentLikes));
			this._DocumentLinks = new EntitySet<DocumentLink>(new Action<DocumentLink>(this.attach_DocumentLinks), new Action<DocumentLink>(this.detach_DocumentLinks));
			this._DocumentOrganizations = new EntitySet<DocumentOrganization>(new Action<DocumentOrganization>(this.attach_DocumentOrganizations), new Action<DocumentOrganization>(this.detach_DocumentOrganizations));
			this._DocumentComments = new EntitySet<DocumentComment>(new Action<DocumentComment>(this.attach_DocumentComments), new Action<DocumentComment>(this.detach_DocumentComments));
			this._DocumentSubjects = new EntitySet<DocumentSubject>(new Action<DocumentSubject>(this.attach_DocumentSubjects), new Action<DocumentSubject>(this.detach_DocumentSubjects));
			this._DocumentRegions = new EntitySet<DocumentRegion>(new Action<DocumentRegion>(this.attach_DocumentRegions), new Action<DocumentRegion>(this.detach_DocumentRegions));
			this._DocumentRecordRedirects = new EntitySet<DocumentRecordRedirect>(new Action<DocumentRecordRedirect>(this.attach_DocumentRecordRedirects), new Action<DocumentRecordRedirect>(this.detach_DocumentRecordRedirects));
			this._DocumentSubscriptions = new EntitySet<DocumentSubscription>(new Action<DocumentSubscription>(this.attach_DocumentSubscriptions), new Action<DocumentSubscription>(this.detach_DocumentSubscriptions));
			this._User = default(EntityRef<User>);
			this._Event = default(EntityRef<Event>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", DbType="Int")]
		public System.Nullable<int> EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Header", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Header
		{
			get
			{
				return this._Header;
			}
			set
			{
				if ((this._Header != value))
				{
					this.OnHeaderChanging(value);
					this.SendPropertyChanging();
					this._Header = value;
					this.SendPropertyChanged("Header");
					this.OnHeaderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Teaser", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Teaser
		{
			get
			{
				return this._Teaser;
			}
			set
			{
				if ((this._Teaser != value))
				{
					this.OnTeaserChanging(value);
					this.SendPropertyChanging();
					this._Teaser = value;
					this.SendPropertyChanged("Teaser");
					this.OnTeaserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChangedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ChangedDate
		{
			get
			{
				return this._ChangedDate;
			}
			set
			{
				if ((this._ChangedDate != value))
				{
					this.OnChangedDateChanging(value);
					this.SendPropertyChanging();
					this._ChangedDate = value;
					this.SendPropertyChanged("ChangedDate");
					this.OnChangedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModeratedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModeratedDate
		{
			get
			{
				return this._ModeratedDate;
			}
			set
			{
				if ((this._ModeratedDate != value))
				{
					this.OnModeratedDateChanging(value);
					this.SendPropertyChanging();
					this._ModeratedDate = value;
					this.SendPropertyChanged("ModeratedDate");
					this.OnModeratedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalLikes", DbType="Int NOT NULL")]
		public int TotalLikes
		{
			get
			{
				return this._TotalLikes;
			}
			set
			{
				if ((this._TotalLikes != value))
				{
					this.OnTotalLikesChanging(value);
					this.SendPropertyChanging();
					this._TotalLikes = value;
					this.SendPropertyChanged("TotalLikes");
					this.OnTotalLikesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_DocumentAccess", Storage="_DocumentAccesses", ThisKey="ID", OtherKey="DocumentID")]
		public EntitySet<DocumentAccess> DocumentAccesses
		{
			get
			{
				return this._DocumentAccesses;
			}
			set
			{
				this._DocumentAccesses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_DocumentFile", Storage="_DocumentFiles", ThisKey="ID", OtherKey="DocumentID")]
		public EntitySet<DocumentFile> DocumentFiles
		{
			get
			{
				return this._DocumentFiles;
			}
			set
			{
				this._DocumentFiles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_DocumentLike", Storage="_DocumentLikes", ThisKey="ID", OtherKey="DocumentID")]
		public EntitySet<DocumentLike> DocumentLikes
		{
			get
			{
				return this._DocumentLikes;
			}
			set
			{
				this._DocumentLikes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_DocumentLink", Storage="_DocumentLinks", ThisKey="ID", OtherKey="DocumentID")]
		public EntitySet<DocumentLink> DocumentLinks
		{
			get
			{
				return this._DocumentLinks;
			}
			set
			{
				this._DocumentLinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_DocumentOrganization", Storage="_DocumentOrganizations", ThisKey="ID", OtherKey="DocumentID")]
		public EntitySet<DocumentOrganization> DocumentOrganizations
		{
			get
			{
				return this._DocumentOrganizations;
			}
			set
			{
				this._DocumentOrganizations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_DocumentComment", Storage="_DocumentComments", ThisKey="ID", OtherKey="DocumentID")]
		public EntitySet<DocumentComment> DocumentComments
		{
			get
			{
				return this._DocumentComments;
			}
			set
			{
				this._DocumentComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_DocumentSubject", Storage="_DocumentSubjects", ThisKey="ID", OtherKey="DocumentID")]
		public EntitySet<DocumentSubject> DocumentSubjects
		{
			get
			{
				return this._DocumentSubjects;
			}
			set
			{
				this._DocumentSubjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_DocumentRegion", Storage="_DocumentRegions", ThisKey="ID", OtherKey="DocumentID")]
		public EntitySet<DocumentRegion> DocumentRegions
		{
			get
			{
				return this._DocumentRegions;
			}
			set
			{
				this._DocumentRegions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_DocumentRecordRedirect", Storage="_DocumentRecordRedirects", ThisKey="ID", OtherKey="DocumentID")]
		public EntitySet<DocumentRecordRedirect> DocumentRecordRedirects
		{
			get
			{
				return this._DocumentRecordRedirects;
			}
			set
			{
				this._DocumentRecordRedirects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_DocumentSubscription", Storage="_DocumentSubscriptions", ThisKey="ID", OtherKey="DocumentID")]
		public EntitySet<DocumentSubscription> DocumentSubscriptions
		{
			get
			{
				return this._DocumentSubscriptions;
			}
			set
			{
				this._DocumentSubscriptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Document", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Documents.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Documents.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_Document", Storage="_Event", ThisKey="EventID", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.Documents.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.Documents.Add(this);
						this._EventID = value.ID;
					}
					else
					{
						this._EventID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DocumentAccesses(DocumentAccess entity)
		{
			this.SendPropertyChanging();
			entity.Document = this;
		}
		
		private void detach_DocumentAccesses(DocumentAccess entity)
		{
			this.SendPropertyChanging();
			entity.Document = null;
		}
		
		private void attach_DocumentFiles(DocumentFile entity)
		{
			this.SendPropertyChanging();
			entity.Document = this;
		}
		
		private void detach_DocumentFiles(DocumentFile entity)
		{
			this.SendPropertyChanging();
			entity.Document = null;
		}
		
		private void attach_DocumentLikes(DocumentLike entity)
		{
			this.SendPropertyChanging();
			entity.Document = this;
		}
		
		private void detach_DocumentLikes(DocumentLike entity)
		{
			this.SendPropertyChanging();
			entity.Document = null;
		}
		
		private void attach_DocumentLinks(DocumentLink entity)
		{
			this.SendPropertyChanging();
			entity.Document = this;
		}
		
		private void detach_DocumentLinks(DocumentLink entity)
		{
			this.SendPropertyChanging();
			entity.Document = null;
		}
		
		private void attach_DocumentOrganizations(DocumentOrganization entity)
		{
			this.SendPropertyChanging();
			entity.Document = this;
		}
		
		private void detach_DocumentOrganizations(DocumentOrganization entity)
		{
			this.SendPropertyChanging();
			entity.Document = null;
		}
		
		private void attach_DocumentComments(DocumentComment entity)
		{
			this.SendPropertyChanging();
			entity.Document = this;
		}
		
		private void detach_DocumentComments(DocumentComment entity)
		{
			this.SendPropertyChanging();
			entity.Document = null;
		}
		
		private void attach_DocumentSubjects(DocumentSubject entity)
		{
			this.SendPropertyChanging();
			entity.Document = this;
		}
		
		private void detach_DocumentSubjects(DocumentSubject entity)
		{
			this.SendPropertyChanging();
			entity.Document = null;
		}
		
		private void attach_DocumentRegions(DocumentRegion entity)
		{
			this.SendPropertyChanging();
			entity.Document = this;
		}
		
		private void detach_DocumentRegions(DocumentRegion entity)
		{
			this.SendPropertyChanging();
			entity.Document = null;
		}
		
		private void attach_DocumentRecordRedirects(DocumentRecordRedirect entity)
		{
			this.SendPropertyChanging();
			entity.Document = this;
		}
		
		private void detach_DocumentRecordRedirects(DocumentRecordRedirect entity)
		{
			this.SendPropertyChanging();
			entity.Document = null;
		}
		
		private void attach_DocumentSubscriptions(DocumentSubscription entity)
		{
			this.SendPropertyChanging();
			entity.Document = this;
		}
		
		private void detach_DocumentSubscriptions(DocumentSubscription entity)
		{
			this.SendPropertyChanging();
			entity.Document = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subject")]
	public partial class Subject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _ParentID;
		
		private string _Name;
		
		private string _Url;
		
		private int _OrderBy;
		
		private bool _MainShow;
		
		private EntitySet<ArticleSubject> _ArticleSubjects;
		
		private EntitySet<BlogPostSubject> _BlogPostSubjects;
		
		private EntitySet<EventSubject> _EventSubjects;
		
		private EntitySet<ImageSubject> _ImageSubjects;
		
		private EntitySet<OrganizationSubject> _OrganizationSubjects;
		
		private EntitySet<PersonSubject> _PersonSubjects;
		
		private EntitySet<PublicationSubject> _PublicationSubjects;
		
		private EntitySet<StudyMaterialSubject> _StudyMaterialSubjects;
		
		private EntitySet<WebLinkSubject> _WebLinkSubjects;
		
		private EntitySet<Subject> _Subjects;
		
		private EntitySet<DocumentSubject> _DocumentSubjects;
		
		private EntitySet<SubjectSubscription> _SubjectSubscriptions;
		
		private EntityRef<Subject> _Subject1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnParentIDChanging(System.Nullable<int> value);
    partial void OnParentIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnOrderByChanging(int value);
    partial void OnOrderByChanged();
    partial void OnMainShowChanging(bool value);
    partial void OnMainShowChanged();
    #endregion
		
		public Subject()
		{
			this._ArticleSubjects = new EntitySet<ArticleSubject>(new Action<ArticleSubject>(this.attach_ArticleSubjects), new Action<ArticleSubject>(this.detach_ArticleSubjects));
			this._BlogPostSubjects = new EntitySet<BlogPostSubject>(new Action<BlogPostSubject>(this.attach_BlogPostSubjects), new Action<BlogPostSubject>(this.detach_BlogPostSubjects));
			this._EventSubjects = new EntitySet<EventSubject>(new Action<EventSubject>(this.attach_EventSubjects), new Action<EventSubject>(this.detach_EventSubjects));
			this._ImageSubjects = new EntitySet<ImageSubject>(new Action<ImageSubject>(this.attach_ImageSubjects), new Action<ImageSubject>(this.detach_ImageSubjects));
			this._OrganizationSubjects = new EntitySet<OrganizationSubject>(new Action<OrganizationSubject>(this.attach_OrganizationSubjects), new Action<OrganizationSubject>(this.detach_OrganizationSubjects));
			this._PersonSubjects = new EntitySet<PersonSubject>(new Action<PersonSubject>(this.attach_PersonSubjects), new Action<PersonSubject>(this.detach_PersonSubjects));
			this._PublicationSubjects = new EntitySet<PublicationSubject>(new Action<PublicationSubject>(this.attach_PublicationSubjects), new Action<PublicationSubject>(this.detach_PublicationSubjects));
			this._StudyMaterialSubjects = new EntitySet<StudyMaterialSubject>(new Action<StudyMaterialSubject>(this.attach_StudyMaterialSubjects), new Action<StudyMaterialSubject>(this.detach_StudyMaterialSubjects));
			this._WebLinkSubjects = new EntitySet<WebLinkSubject>(new Action<WebLinkSubject>(this.attach_WebLinkSubjects), new Action<WebLinkSubject>(this.detach_WebLinkSubjects));
			this._Subjects = new EntitySet<Subject>(new Action<Subject>(this.attach_Subjects), new Action<Subject>(this.detach_Subjects));
			this._DocumentSubjects = new EntitySet<DocumentSubject>(new Action<DocumentSubject>(this.attach_DocumentSubjects), new Action<DocumentSubject>(this.detach_DocumentSubjects));
			this._SubjectSubscriptions = new EntitySet<SubjectSubscription>(new Action<SubjectSubscription>(this.attach_SubjectSubscriptions), new Action<SubjectSubscription>(this.detach_SubjectSubscriptions));
			this._Subject1 = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int")]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._Subject1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderBy", DbType="Int NOT NULL")]
		public int OrderBy
		{
			get
			{
				return this._OrderBy;
			}
			set
			{
				if ((this._OrderBy != value))
				{
					this.OnOrderByChanging(value);
					this.SendPropertyChanging();
					this._OrderBy = value;
					this.SendPropertyChanged("OrderBy");
					this.OnOrderByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MainShow", DbType="Bit NOT NULL")]
		public bool MainShow
		{
			get
			{
				return this._MainShow;
			}
			set
			{
				if ((this._MainShow != value))
				{
					this.OnMainShowChanging(value);
					this.SendPropertyChanging();
					this._MainShow = value;
					this.SendPropertyChanged("MainShow");
					this.OnMainShowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_ArticleSubject", Storage="_ArticleSubjects", ThisKey="ID", OtherKey="SubjectID")]
		public EntitySet<ArticleSubject> ArticleSubjects
		{
			get
			{
				return this._ArticleSubjects;
			}
			set
			{
				this._ArticleSubjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_BlogPostSubject", Storage="_BlogPostSubjects", ThisKey="ID", OtherKey="SubjectID")]
		public EntitySet<BlogPostSubject> BlogPostSubjects
		{
			get
			{
				return this._BlogPostSubjects;
			}
			set
			{
				this._BlogPostSubjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_EventSubject", Storage="_EventSubjects", ThisKey="ID", OtherKey="SubjectID")]
		public EntitySet<EventSubject> EventSubjects
		{
			get
			{
				return this._EventSubjects;
			}
			set
			{
				this._EventSubjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_ImageSubject", Storage="_ImageSubjects", ThisKey="ID", OtherKey="SubjectID")]
		public EntitySet<ImageSubject> ImageSubjects
		{
			get
			{
				return this._ImageSubjects;
			}
			set
			{
				this._ImageSubjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_OrganizationSubject", Storage="_OrganizationSubjects", ThisKey="ID", OtherKey="SubjectID")]
		public EntitySet<OrganizationSubject> OrganizationSubjects
		{
			get
			{
				return this._OrganizationSubjects;
			}
			set
			{
				this._OrganizationSubjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_PersonSubject", Storage="_PersonSubjects", ThisKey="ID", OtherKey="SubjectID")]
		public EntitySet<PersonSubject> PersonSubjects
		{
			get
			{
				return this._PersonSubjects;
			}
			set
			{
				this._PersonSubjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_PublicationSubject", Storage="_PublicationSubjects", ThisKey="ID", OtherKey="SubjectID")]
		public EntitySet<PublicationSubject> PublicationSubjects
		{
			get
			{
				return this._PublicationSubjects;
			}
			set
			{
				this._PublicationSubjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_StudyMaterialSubject", Storage="_StudyMaterialSubjects", ThisKey="ID", OtherKey="SubjectID")]
		public EntitySet<StudyMaterialSubject> StudyMaterialSubjects
		{
			get
			{
				return this._StudyMaterialSubjects;
			}
			set
			{
				this._StudyMaterialSubjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_WebLinkSubject", Storage="_WebLinkSubjects", ThisKey="ID", OtherKey="SubjectID")]
		public EntitySet<WebLinkSubject> WebLinkSubjects
		{
			get
			{
				return this._WebLinkSubjects;
			}
			set
			{
				this._WebLinkSubjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Subject", Storage="_Subjects", ThisKey="ID", OtherKey="ParentID")]
		public EntitySet<Subject> Subjects
		{
			get
			{
				return this._Subjects;
			}
			set
			{
				this._Subjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_DocumentSubject", Storage="_DocumentSubjects", ThisKey="ID", OtherKey="SubjectID")]
		public EntitySet<DocumentSubject> DocumentSubjects
		{
			get
			{
				return this._DocumentSubjects;
			}
			set
			{
				this._DocumentSubjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_SubjectSubscription", Storage="_SubjectSubscriptions", ThisKey="ID", OtherKey="SubjectID")]
		public EntitySet<SubjectSubscription> SubjectSubscriptions
		{
			get
			{
				return this._SubjectSubscriptions;
			}
			set
			{
				this._SubjectSubscriptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Subject", Storage="_Subject1", ThisKey="ParentID", OtherKey="ID", IsForeignKey=true)]
		public Subject Subject1
		{
			get
			{
				return this._Subject1.Entity;
			}
			set
			{
				Subject previousValue = this._Subject1.Entity;
				if (((previousValue != value) 
							|| (this._Subject1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject1.Entity = null;
						previousValue.Subjects.Remove(this);
					}
					this._Subject1.Entity = value;
					if ((value != null))
					{
						value.Subjects.Add(this);
						this._ParentID = value.ID;
					}
					else
					{
						this._ParentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subject1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ArticleSubjects(ArticleSubject entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_ArticleSubjects(ArticleSubject entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_BlogPostSubjects(BlogPostSubject entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_BlogPostSubjects(BlogPostSubject entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_EventSubjects(EventSubject entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_EventSubjects(EventSubject entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_ImageSubjects(ImageSubject entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_ImageSubjects(ImageSubject entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_OrganizationSubjects(OrganizationSubject entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_OrganizationSubjects(OrganizationSubject entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_PersonSubjects(PersonSubject entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_PersonSubjects(PersonSubject entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_PublicationSubjects(PublicationSubject entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_PublicationSubjects(PublicationSubject entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_StudyMaterialSubjects(StudyMaterialSubject entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_StudyMaterialSubjects(StudyMaterialSubject entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_WebLinkSubjects(WebLinkSubject entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_WebLinkSubjects(WebLinkSubject entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_Subjects(Subject entity)
		{
			this.SendPropertyChanging();
			entity.Subject1 = this;
		}
		
		private void detach_Subjects(Subject entity)
		{
			this.SendPropertyChanging();
			entity.Subject1 = null;
		}
		
		private void attach_DocumentSubjects(DocumentSubject entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_DocumentSubjects(DocumentSubject entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_SubjectSubscriptions(SubjectSubscription entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_SubjectSubscriptions(SubjectSubscription entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Image")]
	public partial class Image : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Path;
		
		private string _Header;
		
		private string _Url;
		
		private string _Description;
		
		private System.DateTime _AddedDate;
		
		private System.DateTime _ChangedDate;
		
		private System.Nullable<System.DateTime> _ModeratedDate;
		
		private int _TotalLikes;
		
		private EntitySet<ImageAccess> _ImageAccesses;
		
		private EntitySet<ImageSubject> _ImageSubjects;
		
		private EntitySet<ImageComment> _ImageComments;
		
		private EntitySet<ImageLike> _ImageLikes;
		
		private EntitySet<ImageLink> _ImageLinks;
		
		private EntitySet<ImagePerson> _ImagePersons;
		
		private EntitySet<ImageRegion> _ImageRegions;
		
		private EntitySet<ImageRecordRedirect> _ImageRecordRedirects;
		
		private EntitySet<ImageSubscription> _ImageSubscriptions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnHeaderChanging(string value);
    partial void OnHeaderChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnChangedDateChanging(System.DateTime value);
    partial void OnChangedDateChanged();
    partial void OnModeratedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModeratedDateChanged();
    partial void OnTotalLikesChanging(int value);
    partial void OnTotalLikesChanged();
    #endregion
		
		public Image()
		{
			this._ImageAccesses = new EntitySet<ImageAccess>(new Action<ImageAccess>(this.attach_ImageAccesses), new Action<ImageAccess>(this.detach_ImageAccesses));
			this._ImageSubjects = new EntitySet<ImageSubject>(new Action<ImageSubject>(this.attach_ImageSubjects), new Action<ImageSubject>(this.detach_ImageSubjects));
			this._ImageComments = new EntitySet<ImageComment>(new Action<ImageComment>(this.attach_ImageComments), new Action<ImageComment>(this.detach_ImageComments));
			this._ImageLikes = new EntitySet<ImageLike>(new Action<ImageLike>(this.attach_ImageLikes), new Action<ImageLike>(this.detach_ImageLikes));
			this._ImageLinks = new EntitySet<ImageLink>(new Action<ImageLink>(this.attach_ImageLinks), new Action<ImageLink>(this.detach_ImageLinks));
			this._ImagePersons = new EntitySet<ImagePerson>(new Action<ImagePerson>(this.attach_ImagePersons), new Action<ImagePerson>(this.detach_ImagePersons));
			this._ImageRegions = new EntitySet<ImageRegion>(new Action<ImageRegion>(this.attach_ImageRegions), new Action<ImageRegion>(this.detach_ImageRegions));
			this._ImageRecordRedirects = new EntitySet<ImageRecordRedirect>(new Action<ImageRecordRedirect>(this.attach_ImageRecordRedirects), new Action<ImageRecordRedirect>(this.detach_ImageRecordRedirects));
			this._ImageSubscriptions = new EntitySet<ImageSubscription>(new Action<ImageSubscription>(this.attach_ImageSubscriptions), new Action<ImageSubscription>(this.detach_ImageSubscriptions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Path", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Header", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Header
		{
			get
			{
				return this._Header;
			}
			set
			{
				if ((this._Header != value))
				{
					this.OnHeaderChanging(value);
					this.SendPropertyChanging();
					this._Header = value;
					this.SendPropertyChanged("Header");
					this.OnHeaderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChangedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ChangedDate
		{
			get
			{
				return this._ChangedDate;
			}
			set
			{
				if ((this._ChangedDate != value))
				{
					this.OnChangedDateChanging(value);
					this.SendPropertyChanging();
					this._ChangedDate = value;
					this.SendPropertyChanged("ChangedDate");
					this.OnChangedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModeratedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModeratedDate
		{
			get
			{
				return this._ModeratedDate;
			}
			set
			{
				if ((this._ModeratedDate != value))
				{
					this.OnModeratedDateChanging(value);
					this.SendPropertyChanging();
					this._ModeratedDate = value;
					this.SendPropertyChanged("ModeratedDate");
					this.OnModeratedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalLikes", DbType="Int NOT NULL")]
		public int TotalLikes
		{
			get
			{
				return this._TotalLikes;
			}
			set
			{
				if ((this._TotalLikes != value))
				{
					this.OnTotalLikesChanging(value);
					this.SendPropertyChanging();
					this._TotalLikes = value;
					this.SendPropertyChanged("TotalLikes");
					this.OnTotalLikesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Image_ImageAccess", Storage="_ImageAccesses", ThisKey="ID", OtherKey="ImageID")]
		public EntitySet<ImageAccess> ImageAccesses
		{
			get
			{
				return this._ImageAccesses;
			}
			set
			{
				this._ImageAccesses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Image_ImageSubject", Storage="_ImageSubjects", ThisKey="ID", OtherKey="ImageID")]
		public EntitySet<ImageSubject> ImageSubjects
		{
			get
			{
				return this._ImageSubjects;
			}
			set
			{
				this._ImageSubjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Image_ImageComment", Storage="_ImageComments", ThisKey="ID", OtherKey="ImageID")]
		public EntitySet<ImageComment> ImageComments
		{
			get
			{
				return this._ImageComments;
			}
			set
			{
				this._ImageComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Image_ImageLike", Storage="_ImageLikes", ThisKey="ID", OtherKey="ImageID")]
		public EntitySet<ImageLike> ImageLikes
		{
			get
			{
				return this._ImageLikes;
			}
			set
			{
				this._ImageLikes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Image_ImageLink", Storage="_ImageLinks", ThisKey="ID", OtherKey="ImageID")]
		public EntitySet<ImageLink> ImageLinks
		{
			get
			{
				return this._ImageLinks;
			}
			set
			{
				this._ImageLinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Image_ImagePerson", Storage="_ImagePersons", ThisKey="ID", OtherKey="ImageID")]
		public EntitySet<ImagePerson> ImagePersons
		{
			get
			{
				return this._ImagePersons;
			}
			set
			{
				this._ImagePersons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Image_ImageRegion", Storage="_ImageRegions", ThisKey="ID", OtherKey="ImageID")]
		public EntitySet<ImageRegion> ImageRegions
		{
			get
			{
				return this._ImageRegions;
			}
			set
			{
				this._ImageRegions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Image_ImageRecordRedirect", Storage="_ImageRecordRedirects", ThisKey="ID", OtherKey="ImageID")]
		public EntitySet<ImageRecordRedirect> ImageRecordRedirects
		{
			get
			{
				return this._ImageRecordRedirects;
			}
			set
			{
				this._ImageRecordRedirects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Image_ImageSubscription", Storage="_ImageSubscriptions", ThisKey="ID", OtherKey="ImageID")]
		public EntitySet<ImageSubscription> ImageSubscriptions
		{
			get
			{
				return this._ImageSubscriptions;
			}
			set
			{
				this._ImageSubscriptions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ImageAccesses(ImageAccess entity)
		{
			this.SendPropertyChanging();
			entity.Image = this;
		}
		
		private void detach_ImageAccesses(ImageAccess entity)
		{
			this.SendPropertyChanging();
			entity.Image = null;
		}
		
		private void attach_ImageSubjects(ImageSubject entity)
		{
			this.SendPropertyChanging();
			entity.Image = this;
		}
		
		private void detach_ImageSubjects(ImageSubject entity)
		{
			this.SendPropertyChanging();
			entity.Image = null;
		}
		
		private void attach_ImageComments(ImageComment entity)
		{
			this.SendPropertyChanging();
			entity.Image = this;
		}
		
		private void detach_ImageComments(ImageComment entity)
		{
			this.SendPropertyChanging();
			entity.Image = null;
		}
		
		private void attach_ImageLikes(ImageLike entity)
		{
			this.SendPropertyChanging();
			entity.Image = this;
		}
		
		private void detach_ImageLikes(ImageLike entity)
		{
			this.SendPropertyChanging();
			entity.Image = null;
		}
		
		private void attach_ImageLinks(ImageLink entity)
		{
			this.SendPropertyChanging();
			entity.Image = this;
		}
		
		private void detach_ImageLinks(ImageLink entity)
		{
			this.SendPropertyChanging();
			entity.Image = null;
		}
		
		private void attach_ImagePersons(ImagePerson entity)
		{
			this.SendPropertyChanging();
			entity.Image = this;
		}
		
		private void detach_ImagePersons(ImagePerson entity)
		{
			this.SendPropertyChanging();
			entity.Image = null;
		}
		
		private void attach_ImageRegions(ImageRegion entity)
		{
			this.SendPropertyChanging();
			entity.Image = this;
		}
		
		private void detach_ImageRegions(ImageRegion entity)
		{
			this.SendPropertyChanging();
			entity.Image = null;
		}
		
		private void attach_ImageRecordRedirects(ImageRecordRedirect entity)
		{
			this.SendPropertyChanging();
			entity.Image = this;
		}
		
		private void detach_ImageRecordRedirects(ImageRecordRedirect entity)
		{
			this.SendPropertyChanging();
			entity.Image = null;
		}
		
		private void attach_ImageSubscriptions(ImageSubscription entity)
		{
			this.SendPropertyChanging();
			entity.Image = this;
		}
		
		private void detach_ImageSubscriptions(ImageSubscription entity)
		{
			this.SendPropertyChanging();
			entity.Image = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudyMaterial")]
	public partial class StudyMaterial : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private string _Name;
		
		private string _Url;
		
		private string _Teaser;
		
		private string _Content;
		
		private System.DateTime _AddedDate;
		
		private System.DateTime _ChangedDate;
		
		private System.Nullable<System.DateTime> _ModeratedDate;
		
		private int _TotalLikes;
		
		private EntitySet<StudyMaterialSubject> _StudyMaterialSubjects;
		
		private EntitySet<StudyMaterialComment> _StudyMaterialComments;
		
		private EntitySet<StudyMaterialFile> _StudyMaterialFiles;
		
		private EntitySet<StudyMaterialLike> _StudyMaterialLikes;
		
		private EntitySet<StudyMaterialLink> _StudyMaterialLinks;
		
		private EntitySet<StudyMaterialPerson> _StudyMaterialPersons;
		
		private EntitySet<StudyMaterialRegion> _StudyMaterialRegions;
		
		private EntitySet<StudyMaterialOrganization> _StudyMaterialOrganizations;
		
		private EntitySet<StudyMaterialAccess> _StudyMaterialAccesses;
		
		private EntitySet<StudyMaterialRecordRedirect> _StudyMaterialRecordRedirects;
		
		private EntitySet<StudyMaterialSubscription> _StudyMaterialSubscriptions;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnTeaserChanging(string value);
    partial void OnTeaserChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnChangedDateChanging(System.DateTime value);
    partial void OnChangedDateChanged();
    partial void OnModeratedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModeratedDateChanged();
    partial void OnTotalLikesChanging(int value);
    partial void OnTotalLikesChanged();
    #endregion
		
		public StudyMaterial()
		{
			this._StudyMaterialSubjects = new EntitySet<StudyMaterialSubject>(new Action<StudyMaterialSubject>(this.attach_StudyMaterialSubjects), new Action<StudyMaterialSubject>(this.detach_StudyMaterialSubjects));
			this._StudyMaterialComments = new EntitySet<StudyMaterialComment>(new Action<StudyMaterialComment>(this.attach_StudyMaterialComments), new Action<StudyMaterialComment>(this.detach_StudyMaterialComments));
			this._StudyMaterialFiles = new EntitySet<StudyMaterialFile>(new Action<StudyMaterialFile>(this.attach_StudyMaterialFiles), new Action<StudyMaterialFile>(this.detach_StudyMaterialFiles));
			this._StudyMaterialLikes = new EntitySet<StudyMaterialLike>(new Action<StudyMaterialLike>(this.attach_StudyMaterialLikes), new Action<StudyMaterialLike>(this.detach_StudyMaterialLikes));
			this._StudyMaterialLinks = new EntitySet<StudyMaterialLink>(new Action<StudyMaterialLink>(this.attach_StudyMaterialLinks), new Action<StudyMaterialLink>(this.detach_StudyMaterialLinks));
			this._StudyMaterialPersons = new EntitySet<StudyMaterialPerson>(new Action<StudyMaterialPerson>(this.attach_StudyMaterialPersons), new Action<StudyMaterialPerson>(this.detach_StudyMaterialPersons));
			this._StudyMaterialRegions = new EntitySet<StudyMaterialRegion>(new Action<StudyMaterialRegion>(this.attach_StudyMaterialRegions), new Action<StudyMaterialRegion>(this.detach_StudyMaterialRegions));
			this._StudyMaterialOrganizations = new EntitySet<StudyMaterialOrganization>(new Action<StudyMaterialOrganization>(this.attach_StudyMaterialOrganizations), new Action<StudyMaterialOrganization>(this.detach_StudyMaterialOrganizations));
			this._StudyMaterialAccesses = new EntitySet<StudyMaterialAccess>(new Action<StudyMaterialAccess>(this.attach_StudyMaterialAccesses), new Action<StudyMaterialAccess>(this.detach_StudyMaterialAccesses));
			this._StudyMaterialRecordRedirects = new EntitySet<StudyMaterialRecordRedirect>(new Action<StudyMaterialRecordRedirect>(this.attach_StudyMaterialRecordRedirects), new Action<StudyMaterialRecordRedirect>(this.detach_StudyMaterialRecordRedirects));
			this._StudyMaterialSubscriptions = new EntitySet<StudyMaterialSubscription>(new Action<StudyMaterialSubscription>(this.attach_StudyMaterialSubscriptions), new Action<StudyMaterialSubscription>(this.detach_StudyMaterialSubscriptions));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Teaser", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Teaser
		{
			get
			{
				return this._Teaser;
			}
			set
			{
				if ((this._Teaser != value))
				{
					this.OnTeaserChanging(value);
					this.SendPropertyChanging();
					this._Teaser = value;
					this.SendPropertyChanged("Teaser");
					this.OnTeaserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChangedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ChangedDate
		{
			get
			{
				return this._ChangedDate;
			}
			set
			{
				if ((this._ChangedDate != value))
				{
					this.OnChangedDateChanging(value);
					this.SendPropertyChanging();
					this._ChangedDate = value;
					this.SendPropertyChanged("ChangedDate");
					this.OnChangedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModeratedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModeratedDate
		{
			get
			{
				return this._ModeratedDate;
			}
			set
			{
				if ((this._ModeratedDate != value))
				{
					this.OnModeratedDateChanging(value);
					this.SendPropertyChanging();
					this._ModeratedDate = value;
					this.SendPropertyChanged("ModeratedDate");
					this.OnModeratedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalLikes", DbType="Int NOT NULL")]
		public int TotalLikes
		{
			get
			{
				return this._TotalLikes;
			}
			set
			{
				if ((this._TotalLikes != value))
				{
					this.OnTotalLikesChanging(value);
					this.SendPropertyChanging();
					this._TotalLikes = value;
					this.SendPropertyChanged("TotalLikes");
					this.OnTotalLikesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudyMaterial_StudyMaterialSubject", Storage="_StudyMaterialSubjects", ThisKey="ID", OtherKey="StudyMaterialID")]
		public EntitySet<StudyMaterialSubject> StudyMaterialSubjects
		{
			get
			{
				return this._StudyMaterialSubjects;
			}
			set
			{
				this._StudyMaterialSubjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudyMaterial_StudyMaterialComment", Storage="_StudyMaterialComments", ThisKey="ID", OtherKey="StudyMaterialID")]
		public EntitySet<StudyMaterialComment> StudyMaterialComments
		{
			get
			{
				return this._StudyMaterialComments;
			}
			set
			{
				this._StudyMaterialComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudyMaterial_StudyMaterialFile", Storage="_StudyMaterialFiles", ThisKey="ID", OtherKey="StudyMaterialID")]
		public EntitySet<StudyMaterialFile> StudyMaterialFiles
		{
			get
			{
				return this._StudyMaterialFiles;
			}
			set
			{
				this._StudyMaterialFiles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudyMaterial_StudyMaterialLike", Storage="_StudyMaterialLikes", ThisKey="ID", OtherKey="StudyMaterialID")]
		public EntitySet<StudyMaterialLike> StudyMaterialLikes
		{
			get
			{
				return this._StudyMaterialLikes;
			}
			set
			{
				this._StudyMaterialLikes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudyMaterial_StudyMaterialLink", Storage="_StudyMaterialLinks", ThisKey="ID", OtherKey="StudyMaterialID")]
		public EntitySet<StudyMaterialLink> StudyMaterialLinks
		{
			get
			{
				return this._StudyMaterialLinks;
			}
			set
			{
				this._StudyMaterialLinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudyMaterial_StudyMaterialPerson", Storage="_StudyMaterialPersons", ThisKey="ID", OtherKey="StudyMaterialID")]
		public EntitySet<StudyMaterialPerson> StudyMaterialPersons
		{
			get
			{
				return this._StudyMaterialPersons;
			}
			set
			{
				this._StudyMaterialPersons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudyMaterial_StudyMaterialRegion", Storage="_StudyMaterialRegions", ThisKey="ID", OtherKey="StudyMaterialID")]
		public EntitySet<StudyMaterialRegion> StudyMaterialRegions
		{
			get
			{
				return this._StudyMaterialRegions;
			}
			set
			{
				this._StudyMaterialRegions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudyMaterial_StudyMaterialOrganization", Storage="_StudyMaterialOrganizations", ThisKey="ID", OtherKey="StudyMaterialID")]
		public EntitySet<StudyMaterialOrganization> StudyMaterialOrganizations
		{
			get
			{
				return this._StudyMaterialOrganizations;
			}
			set
			{
				this._StudyMaterialOrganizations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudyMaterial_StudyMaterialAccess", Storage="_StudyMaterialAccesses", ThisKey="ID", OtherKey="StudyMaterialID")]
		public EntitySet<StudyMaterialAccess> StudyMaterialAccesses
		{
			get
			{
				return this._StudyMaterialAccesses;
			}
			set
			{
				this._StudyMaterialAccesses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudyMaterial_StudyMaterialRecordRedirect", Storage="_StudyMaterialRecordRedirects", ThisKey="ID", OtherKey="StudyMaterialID")]
		public EntitySet<StudyMaterialRecordRedirect> StudyMaterialRecordRedirects
		{
			get
			{
				return this._StudyMaterialRecordRedirects;
			}
			set
			{
				this._StudyMaterialRecordRedirects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudyMaterial_StudyMaterialSubscription", Storage="_StudyMaterialSubscriptions", ThisKey="ID", OtherKey="StudyMaterialID")]
		public EntitySet<StudyMaterialSubscription> StudyMaterialSubscriptions
		{
			get
			{
				return this._StudyMaterialSubscriptions;
			}
			set
			{
				this._StudyMaterialSubscriptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_StudyMaterial", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.StudyMaterials.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.StudyMaterials.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StudyMaterialSubjects(StudyMaterialSubject entity)
		{
			this.SendPropertyChanging();
			entity.StudyMaterial = this;
		}
		
		private void detach_StudyMaterialSubjects(StudyMaterialSubject entity)
		{
			this.SendPropertyChanging();
			entity.StudyMaterial = null;
		}
		
		private void attach_StudyMaterialComments(StudyMaterialComment entity)
		{
			this.SendPropertyChanging();
			entity.StudyMaterial = this;
		}
		
		private void detach_StudyMaterialComments(StudyMaterialComment entity)
		{
			this.SendPropertyChanging();
			entity.StudyMaterial = null;
		}
		
		private void attach_StudyMaterialFiles(StudyMaterialFile entity)
		{
			this.SendPropertyChanging();
			entity.StudyMaterial = this;
		}
		
		private void detach_StudyMaterialFiles(StudyMaterialFile entity)
		{
			this.SendPropertyChanging();
			entity.StudyMaterial = null;
		}
		
		private void attach_StudyMaterialLikes(StudyMaterialLike entity)
		{
			this.SendPropertyChanging();
			entity.StudyMaterial = this;
		}
		
		private void detach_StudyMaterialLikes(StudyMaterialLike entity)
		{
			this.SendPropertyChanging();
			entity.StudyMaterial = null;
		}
		
		private void attach_StudyMaterialLinks(StudyMaterialLink entity)
		{
			this.SendPropertyChanging();
			entity.StudyMaterial = this;
		}
		
		private void detach_StudyMaterialLinks(StudyMaterialLink entity)
		{
			this.SendPropertyChanging();
			entity.StudyMaterial = null;
		}
		
		private void attach_StudyMaterialPersons(StudyMaterialPerson entity)
		{
			this.SendPropertyChanging();
			entity.StudyMaterial = this;
		}
		
		private void detach_StudyMaterialPersons(StudyMaterialPerson entity)
		{
			this.SendPropertyChanging();
			entity.StudyMaterial = null;
		}
		
		private void attach_StudyMaterialRegions(StudyMaterialRegion entity)
		{
			this.SendPropertyChanging();
			entity.StudyMaterial = this;
		}
		
		private void detach_StudyMaterialRegions(StudyMaterialRegion entity)
		{
			this.SendPropertyChanging();
			entity.StudyMaterial = null;
		}
		
		private void attach_StudyMaterialOrganizations(StudyMaterialOrganization entity)
		{
			this.SendPropertyChanging();
			entity.StudyMaterial = this;
		}
		
		private void detach_StudyMaterialOrganizations(StudyMaterialOrganization entity)
		{
			this.SendPropertyChanging();
			entity.StudyMaterial = null;
		}
		
		private void attach_StudyMaterialAccesses(StudyMaterialAccess entity)
		{
			this.SendPropertyChanging();
			entity.StudyMaterial = this;
		}
		
		private void detach_StudyMaterialAccesses(StudyMaterialAccess entity)
		{
			this.SendPropertyChanging();
			entity.StudyMaterial = null;
		}
		
		private void attach_StudyMaterialRecordRedirects(StudyMaterialRecordRedirect entity)
		{
			this.SendPropertyChanging();
			entity.StudyMaterial = this;
		}
		
		private void detach_StudyMaterialRecordRedirects(StudyMaterialRecordRedirect entity)
		{
			this.SendPropertyChanging();
			entity.StudyMaterial = null;
		}
		
		private void attach_StudyMaterialSubscriptions(StudyMaterialSubscription entity)
		{
			this.SendPropertyChanging();
			entity.StudyMaterial = this;
		}
		
		private void detach_StudyMaterialSubscriptions(StudyMaterialSubscription entity)
		{
			this.SendPropertyChanging();
			entity.StudyMaterial = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WebLink")]
	public partial class WebLink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _SiteUrl;
		
		private string _Screenshot;
		
		private string _Url;
		
		private string _ReservedUrl;
		
		private string _Description;
		
		private string _RSS;
		
		private System.DateTime _AddedDate;
		
		private System.DateTime _ChangedDate;
		
		private System.Nullable<System.DateTime> _ModeratedDate;
		
		private int _TotalLikes;
		
		private EntitySet<WebLinkAccess> _WebLinkAccesses;
		
		private EntitySet<WebLinkSubject> _WebLinkSubjects;
		
		private EntitySet<WebLinkComment> _WebLinkComments;
		
		private EntitySet<WebLinkLike> _WebLinkLikes;
		
		private EntitySet<WebLinkRegion> _WebLinkRegions;
		
		private EntitySet<WebLinkRecordRedirect> _WebLinkRecordRedirects;
		
		private EntitySet<WebLinkSubscription> _WebLinkSubscriptions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSiteUrlChanging(string value);
    partial void OnSiteUrlChanged();
    partial void OnScreenshotChanging(string value);
    partial void OnScreenshotChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnReservedUrlChanging(string value);
    partial void OnReservedUrlChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnRSSChanging(string value);
    partial void OnRSSChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnChangedDateChanging(System.DateTime value);
    partial void OnChangedDateChanged();
    partial void OnModeratedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModeratedDateChanged();
    partial void OnTotalLikesChanging(int value);
    partial void OnTotalLikesChanged();
    #endregion
		
		public WebLink()
		{
			this._WebLinkAccesses = new EntitySet<WebLinkAccess>(new Action<WebLinkAccess>(this.attach_WebLinkAccesses), new Action<WebLinkAccess>(this.detach_WebLinkAccesses));
			this._WebLinkSubjects = new EntitySet<WebLinkSubject>(new Action<WebLinkSubject>(this.attach_WebLinkSubjects), new Action<WebLinkSubject>(this.detach_WebLinkSubjects));
			this._WebLinkComments = new EntitySet<WebLinkComment>(new Action<WebLinkComment>(this.attach_WebLinkComments), new Action<WebLinkComment>(this.detach_WebLinkComments));
			this._WebLinkLikes = new EntitySet<WebLinkLike>(new Action<WebLinkLike>(this.attach_WebLinkLikes), new Action<WebLinkLike>(this.detach_WebLinkLikes));
			this._WebLinkRegions = new EntitySet<WebLinkRegion>(new Action<WebLinkRegion>(this.attach_WebLinkRegions), new Action<WebLinkRegion>(this.detach_WebLinkRegions));
			this._WebLinkRecordRedirects = new EntitySet<WebLinkRecordRedirect>(new Action<WebLinkRecordRedirect>(this.attach_WebLinkRecordRedirects), new Action<WebLinkRecordRedirect>(this.detach_WebLinkRecordRedirects));
			this._WebLinkSubscriptions = new EntitySet<WebLinkSubscription>(new Action<WebLinkSubscription>(this.attach_WebLinkSubscriptions), new Action<WebLinkSubscription>(this.detach_WebLinkSubscriptions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SiteUrl", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string SiteUrl
		{
			get
			{
				return this._SiteUrl;
			}
			set
			{
				if ((this._SiteUrl != value))
				{
					this.OnSiteUrlChanging(value);
					this.SendPropertyChanging();
					this._SiteUrl = value;
					this.SendPropertyChanged("SiteUrl");
					this.OnSiteUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Screenshot", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Screenshot
		{
			get
			{
				return this._Screenshot;
			}
			set
			{
				if ((this._Screenshot != value))
				{
					this.OnScreenshotChanging(value);
					this.SendPropertyChanging();
					this._Screenshot = value;
					this.SendPropertyChanged("Screenshot");
					this.OnScreenshotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(1024) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReservedUrl", DbType="NVarChar(1024)")]
		public string ReservedUrl
		{
			get
			{
				return this._ReservedUrl;
			}
			set
			{
				if ((this._ReservedUrl != value))
				{
					this.OnReservedUrlChanging(value);
					this.SendPropertyChanging();
					this._ReservedUrl = value;
					this.SendPropertyChanged("ReservedUrl");
					this.OnReservedUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RSS", DbType="NVarChar(1024)")]
		public string RSS
		{
			get
			{
				return this._RSS;
			}
			set
			{
				if ((this._RSS != value))
				{
					this.OnRSSChanging(value);
					this.SendPropertyChanging();
					this._RSS = value;
					this.SendPropertyChanged("RSS");
					this.OnRSSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChangedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ChangedDate
		{
			get
			{
				return this._ChangedDate;
			}
			set
			{
				if ((this._ChangedDate != value))
				{
					this.OnChangedDateChanging(value);
					this.SendPropertyChanging();
					this._ChangedDate = value;
					this.SendPropertyChanged("ChangedDate");
					this.OnChangedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModeratedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModeratedDate
		{
			get
			{
				return this._ModeratedDate;
			}
			set
			{
				if ((this._ModeratedDate != value))
				{
					this.OnModeratedDateChanging(value);
					this.SendPropertyChanging();
					this._ModeratedDate = value;
					this.SendPropertyChanged("ModeratedDate");
					this.OnModeratedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalLikes", DbType="Int NOT NULL")]
		public int TotalLikes
		{
			get
			{
				return this._TotalLikes;
			}
			set
			{
				if ((this._TotalLikes != value))
				{
					this.OnTotalLikesChanging(value);
					this.SendPropertyChanging();
					this._TotalLikes = value;
					this.SendPropertyChanged("TotalLikes");
					this.OnTotalLikesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WebLink_WebLinkAccess", Storage="_WebLinkAccesses", ThisKey="ID", OtherKey="WebLinkID")]
		public EntitySet<WebLinkAccess> WebLinkAccesses
		{
			get
			{
				return this._WebLinkAccesses;
			}
			set
			{
				this._WebLinkAccesses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WebLink_WebLinkSubject", Storage="_WebLinkSubjects", ThisKey="ID", OtherKey="WebLinkID")]
		public EntitySet<WebLinkSubject> WebLinkSubjects
		{
			get
			{
				return this._WebLinkSubjects;
			}
			set
			{
				this._WebLinkSubjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WebLink_WebLinkComment", Storage="_WebLinkComments", ThisKey="ID", OtherKey="WebLinkID")]
		public EntitySet<WebLinkComment> WebLinkComments
		{
			get
			{
				return this._WebLinkComments;
			}
			set
			{
				this._WebLinkComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WebLink_WebLinkLike", Storage="_WebLinkLikes", ThisKey="ID", OtherKey="WebLinkID")]
		public EntitySet<WebLinkLike> WebLinkLikes
		{
			get
			{
				return this._WebLinkLikes;
			}
			set
			{
				this._WebLinkLikes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WebLink_WebLinkRegion", Storage="_WebLinkRegions", ThisKey="ID", OtherKey="WebLinkID")]
		public EntitySet<WebLinkRegion> WebLinkRegions
		{
			get
			{
				return this._WebLinkRegions;
			}
			set
			{
				this._WebLinkRegions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WebLink_WebLinkRecordRedirect", Storage="_WebLinkRecordRedirects", ThisKey="ID", OtherKey="WebLinkID")]
		public EntitySet<WebLinkRecordRedirect> WebLinkRecordRedirects
		{
			get
			{
				return this._WebLinkRecordRedirects;
			}
			set
			{
				this._WebLinkRecordRedirects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WebLink_WebLinkSubscription", Storage="_WebLinkSubscriptions", ThisKey="ID", OtherKey="WebLinkID")]
		public EntitySet<WebLinkSubscription> WebLinkSubscriptions
		{
			get
			{
				return this._WebLinkSubscriptions;
			}
			set
			{
				this._WebLinkSubscriptions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WebLinkAccesses(WebLinkAccess entity)
		{
			this.SendPropertyChanging();
			entity.WebLink = this;
		}
		
		private void detach_WebLinkAccesses(WebLinkAccess entity)
		{
			this.SendPropertyChanging();
			entity.WebLink = null;
		}
		
		private void attach_WebLinkSubjects(WebLinkSubject entity)
		{
			this.SendPropertyChanging();
			entity.WebLink = this;
		}
		
		private void detach_WebLinkSubjects(WebLinkSubject entity)
		{
			this.SendPropertyChanging();
			entity.WebLink = null;
		}
		
		private void attach_WebLinkComments(WebLinkComment entity)
		{
			this.SendPropertyChanging();
			entity.WebLink = this;
		}
		
		private void detach_WebLinkComments(WebLinkComment entity)
		{
			this.SendPropertyChanging();
			entity.WebLink = null;
		}
		
		private void attach_WebLinkLikes(WebLinkLike entity)
		{
			this.SendPropertyChanging();
			entity.WebLink = this;
		}
		
		private void detach_WebLinkLikes(WebLinkLike entity)
		{
			this.SendPropertyChanging();
			entity.WebLink = null;
		}
		
		private void attach_WebLinkRegions(WebLinkRegion entity)
		{
			this.SendPropertyChanging();
			entity.WebLink = this;
		}
		
		private void detach_WebLinkRegions(WebLinkRegion entity)
		{
			this.SendPropertyChanging();
			entity.WebLink = null;
		}
		
		private void attach_WebLinkRecordRedirects(WebLinkRecordRedirect entity)
		{
			this.SendPropertyChanging();
			entity.WebLink = this;
		}
		
		private void detach_WebLinkRecordRedirects(WebLinkRecordRedirect entity)
		{
			this.SendPropertyChanging();
			entity.WebLink = null;
		}
		
		private void attach_WebLinkSubscriptions(WebLinkSubscription entity)
		{
			this.SendPropertyChanging();
			entity.WebLink = this;
		}
		
		private void detach_WebLinkSubscriptions(WebLinkSubscription entity)
		{
			this.SendPropertyChanging();
			entity.WebLink = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PersonRegion")]
	public partial class PersonRegion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PersonID;
		
		private int _RegionID;
		
		private EntityRef<Region> _Region;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPersonIDChanging(int value);
    partial void OnPersonIDChanged();
    partial void OnRegionIDChanging(int value);
    partial void OnRegionIDChanged();
    #endregion
		
		public PersonRegion()
		{
			this._Region = default(EntityRef<Region>);
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", DbType="Int NOT NULL")]
		public int PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionID", DbType="Int NOT NULL")]
		public int RegionID
		{
			get
			{
				return this._RegionID;
			}
			set
			{
				if ((this._RegionID != value))
				{
					if (this._Region.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegionIDChanging(value);
					this.SendPropertyChanging();
					this._RegionID = value;
					this.SendPropertyChanged("RegionID");
					this.OnRegionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_PersonRegion", Storage="_Region", ThisKey="RegionID", OtherKey="ID", IsForeignKey=true)]
		public Region Region
		{
			get
			{
				return this._Region.Entity;
			}
			set
			{
				Region previousValue = this._Region.Entity;
				if (((previousValue != value) 
							|| (this._Region.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Region.Entity = null;
						previousValue.PersonRegions.Remove(this);
					}
					this._Region.Entity = value;
					if ((value != null))
					{
						value.PersonRegions.Add(this);
						this._RegionID = value.ID;
					}
					else
					{
						this._RegionID = default(int);
					}
					this.SendPropertyChanged("Region");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_PersonRegion", Storage="_Person", ThisKey="PersonID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.PersonRegions.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.PersonRegions.Add(this);
						this._PersonID = value.ID;
					}
					else
					{
						this._PersonID = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocumentSubject")]
	public partial class DocumentSubject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _DocumentID;
		
		private int _SubjectID;
		
		private EntityRef<Document> _Document;
		
		private EntityRef<Subject> _Subject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDocumentIDChanging(int value);
    partial void OnDocumentIDChanged();
    partial void OnSubjectIDChanging(int value);
    partial void OnSubjectIDChanged();
    #endregion
		
		public DocumentSubject()
		{
			this._Document = default(EntityRef<Document>);
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentID", DbType="Int NOT NULL")]
		public int DocumentID
		{
			get
			{
				return this._DocumentID;
			}
			set
			{
				if ((this._DocumentID != value))
				{
					if (this._Document.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentID = value;
					this.SendPropertyChanged("DocumentID");
					this.OnDocumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectID", DbType="Int NOT NULL")]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_DocumentSubject", Storage="_Document", ThisKey="DocumentID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Document Document
		{
			get
			{
				return this._Document.Entity;
			}
			set
			{
				Document previousValue = this._Document.Entity;
				if (((previousValue != value) 
							|| (this._Document.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Document.Entity = null;
						previousValue.DocumentSubjects.Remove(this);
					}
					this._Document.Entity = value;
					if ((value != null))
					{
						value.DocumentSubjects.Add(this);
						this._DocumentID = value.ID;
					}
					else
					{
						this._DocumentID = default(int);
					}
					this.SendPropertyChanged("Document");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_DocumentSubject", Storage="_Subject", ThisKey="SubjectID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.DocumentSubjects.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.DocumentSubjects.Add(this);
						this._SubjectID = value.ID;
					}
					else
					{
						this._SubjectID = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocumentRegion")]
	public partial class DocumentRegion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _DocumentID;
		
		private int _RegionID;
		
		private EntityRef<Document> _Document;
		
		private EntityRef<Region> _Region;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDocumentIDChanging(int value);
    partial void OnDocumentIDChanged();
    partial void OnRegionIDChanging(int value);
    partial void OnRegionIDChanged();
    #endregion
		
		public DocumentRegion()
		{
			this._Document = default(EntityRef<Document>);
			this._Region = default(EntityRef<Region>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentID", DbType="Int NOT NULL")]
		public int DocumentID
		{
			get
			{
				return this._DocumentID;
			}
			set
			{
				if ((this._DocumentID != value))
				{
					if (this._Document.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentID = value;
					this.SendPropertyChanged("DocumentID");
					this.OnDocumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionID", DbType="Int NOT NULL")]
		public int RegionID
		{
			get
			{
				return this._RegionID;
			}
			set
			{
				if ((this._RegionID != value))
				{
					if (this._Region.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegionIDChanging(value);
					this.SendPropertyChanging();
					this._RegionID = value;
					this.SendPropertyChanged("RegionID");
					this.OnRegionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_DocumentRegion", Storage="_Document", ThisKey="DocumentID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Document Document
		{
			get
			{
				return this._Document.Entity;
			}
			set
			{
				Document previousValue = this._Document.Entity;
				if (((previousValue != value) 
							|| (this._Document.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Document.Entity = null;
						previousValue.DocumentRegions.Remove(this);
					}
					this._Document.Entity = value;
					if ((value != null))
					{
						value.DocumentRegions.Add(this);
						this._DocumentID = value.ID;
					}
					else
					{
						this._DocumentID = default(int);
					}
					this.SendPropertyChanged("Document");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_DocumentRegion", Storage="_Region", ThisKey="RegionID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Region Region
		{
			get
			{
				return this._Region.Entity;
			}
			set
			{
				Region previousValue = this._Region.Entity;
				if (((previousValue != value) 
							|| (this._Region.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Region.Entity = null;
						previousValue.DocumentRegions.Remove(this);
					}
					this._Region.Entity = value;
					if ((value != null))
					{
						value.DocumentRegions.Add(this);
						this._RegionID = value.ID;
					}
					else
					{
						this._RegionID = default(int);
					}
					this.SendPropertyChanged("Region");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudyMaterialAccess")]
	public partial class StudyMaterialAccess : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _StudyMaterialID;
		
		private int _UserID;
		
		private EntityRef<StudyMaterial> _StudyMaterial;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnStudyMaterialIDChanging(int value);
    partial void OnStudyMaterialIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public StudyMaterialAccess()
		{
			this._StudyMaterial = default(EntityRef<StudyMaterial>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudyMaterialID", DbType="Int NOT NULL")]
		public int StudyMaterialID
		{
			get
			{
				return this._StudyMaterialID;
			}
			set
			{
				if ((this._StudyMaterialID != value))
				{
					if (this._StudyMaterial.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudyMaterialIDChanging(value);
					this.SendPropertyChanging();
					this._StudyMaterialID = value;
					this.SendPropertyChanged("StudyMaterialID");
					this.OnStudyMaterialIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudyMaterial_StudyMaterialAccess", Storage="_StudyMaterial", ThisKey="StudyMaterialID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public StudyMaterial StudyMaterial
		{
			get
			{
				return this._StudyMaterial.Entity;
			}
			set
			{
				StudyMaterial previousValue = this._StudyMaterial.Entity;
				if (((previousValue != value) 
							|| (this._StudyMaterial.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StudyMaterial.Entity = null;
						previousValue.StudyMaterialAccesses.Remove(this);
					}
					this._StudyMaterial.Entity = value;
					if ((value != null))
					{
						value.StudyMaterialAccesses.Add(this);
						this._StudyMaterialID = value.ID;
					}
					else
					{
						this._StudyMaterialID = default(int);
					}
					this.SendPropertyChanged("StudyMaterial");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_StudyMaterialAccess", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.StudyMaterialAccesses.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.StudyMaterialAccesses.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RecordRedirect")]
	public partial class RecordRedirect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Url;
		
		private bool _IsForum;
		
		private EntitySet<ArticleRecordRedirect> _ArticleRecordRedirects;
		
		private EntitySet<BlogPostRecordRedirect> _BlogPostRecordRedirects;
		
		private EntitySet<DocumentRecordRedirect> _DocumentRecordRedirects;
		
		private EntitySet<EventRecordRedirect> _EventRecordRedirects;
		
		private EntitySet<ImageRecordRedirect> _ImageRecordRedirects;
		
		private EntitySet<OrganizationRecordRedirect> _OrganizationRecordRedirects;
		
		private EntitySet<PersonRecordRedirect> _PersonRecordRedirects;
		
		private EntitySet<PublicationRecordRedirect> _PublicationRecordRedirects;
		
		private EntitySet<StudyMaterialRecordRedirect> _StudyMaterialRecordRedirects;
		
		private EntitySet<WebLinkRecordRedirect> _WebLinkRecordRedirects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnIsForumChanging(bool value);
    partial void OnIsForumChanged();
    #endregion
		
		public RecordRedirect()
		{
			this._ArticleRecordRedirects = new EntitySet<ArticleRecordRedirect>(new Action<ArticleRecordRedirect>(this.attach_ArticleRecordRedirects), new Action<ArticleRecordRedirect>(this.detach_ArticleRecordRedirects));
			this._BlogPostRecordRedirects = new EntitySet<BlogPostRecordRedirect>(new Action<BlogPostRecordRedirect>(this.attach_BlogPostRecordRedirects), new Action<BlogPostRecordRedirect>(this.detach_BlogPostRecordRedirects));
			this._DocumentRecordRedirects = new EntitySet<DocumentRecordRedirect>(new Action<DocumentRecordRedirect>(this.attach_DocumentRecordRedirects), new Action<DocumentRecordRedirect>(this.detach_DocumentRecordRedirects));
			this._EventRecordRedirects = new EntitySet<EventRecordRedirect>(new Action<EventRecordRedirect>(this.attach_EventRecordRedirects), new Action<EventRecordRedirect>(this.detach_EventRecordRedirects));
			this._ImageRecordRedirects = new EntitySet<ImageRecordRedirect>(new Action<ImageRecordRedirect>(this.attach_ImageRecordRedirects), new Action<ImageRecordRedirect>(this.detach_ImageRecordRedirects));
			this._OrganizationRecordRedirects = new EntitySet<OrganizationRecordRedirect>(new Action<OrganizationRecordRedirect>(this.attach_OrganizationRecordRedirects), new Action<OrganizationRecordRedirect>(this.detach_OrganizationRecordRedirects));
			this._PersonRecordRedirects = new EntitySet<PersonRecordRedirect>(new Action<PersonRecordRedirect>(this.attach_PersonRecordRedirects), new Action<PersonRecordRedirect>(this.detach_PersonRecordRedirects));
			this._PublicationRecordRedirects = new EntitySet<PublicationRecordRedirect>(new Action<PublicationRecordRedirect>(this.attach_PublicationRecordRedirects), new Action<PublicationRecordRedirect>(this.detach_PublicationRecordRedirects));
			this._StudyMaterialRecordRedirects = new EntitySet<StudyMaterialRecordRedirect>(new Action<StudyMaterialRecordRedirect>(this.attach_StudyMaterialRecordRedirects), new Action<StudyMaterialRecordRedirect>(this.detach_StudyMaterialRecordRedirects));
			this._WebLinkRecordRedirects = new EntitySet<WebLinkRecordRedirect>(new Action<WebLinkRecordRedirect>(this.attach_WebLinkRecordRedirects), new Action<WebLinkRecordRedirect>(this.detach_WebLinkRecordRedirects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsForum", DbType="Bit NOT NULL")]
		public bool IsForum
		{
			get
			{
				return this._IsForum;
			}
			set
			{
				if ((this._IsForum != value))
				{
					this.OnIsForumChanging(value);
					this.SendPropertyChanging();
					this._IsForum = value;
					this.SendPropertyChanged("IsForum");
					this.OnIsForumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecordRedirect_ArticleRecordRedirect", Storage="_ArticleRecordRedirects", ThisKey="ID", OtherKey="RecordRedirectID")]
		public EntitySet<ArticleRecordRedirect> ArticleRecordRedirects
		{
			get
			{
				return this._ArticleRecordRedirects;
			}
			set
			{
				this._ArticleRecordRedirects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecordRedirect_BlogPostRecordRedirect", Storage="_BlogPostRecordRedirects", ThisKey="ID", OtherKey="RecordRedirectID")]
		public EntitySet<BlogPostRecordRedirect> BlogPostRecordRedirects
		{
			get
			{
				return this._BlogPostRecordRedirects;
			}
			set
			{
				this._BlogPostRecordRedirects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecordRedirect_DocumentRecordRedirect", Storage="_DocumentRecordRedirects", ThisKey="ID", OtherKey="RecordRedirectID")]
		public EntitySet<DocumentRecordRedirect> DocumentRecordRedirects
		{
			get
			{
				return this._DocumentRecordRedirects;
			}
			set
			{
				this._DocumentRecordRedirects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecordRedirect_EventRecordRedirect", Storage="_EventRecordRedirects", ThisKey="ID", OtherKey="RecordRedirectID")]
		public EntitySet<EventRecordRedirect> EventRecordRedirects
		{
			get
			{
				return this._EventRecordRedirects;
			}
			set
			{
				this._EventRecordRedirects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecordRedirect_ImageRecordRedirect", Storage="_ImageRecordRedirects", ThisKey="ID", OtherKey="RecordRedirectID")]
		public EntitySet<ImageRecordRedirect> ImageRecordRedirects
		{
			get
			{
				return this._ImageRecordRedirects;
			}
			set
			{
				this._ImageRecordRedirects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecordRedirect_OrganizationRecordRedirect", Storage="_OrganizationRecordRedirects", ThisKey="ID", OtherKey="RecordRedirectID")]
		public EntitySet<OrganizationRecordRedirect> OrganizationRecordRedirects
		{
			get
			{
				return this._OrganizationRecordRedirects;
			}
			set
			{
				this._OrganizationRecordRedirects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecordRedirect_PersonRecordRedirect", Storage="_PersonRecordRedirects", ThisKey="ID", OtherKey="RecordRedirectID")]
		public EntitySet<PersonRecordRedirect> PersonRecordRedirects
		{
			get
			{
				return this._PersonRecordRedirects;
			}
			set
			{
				this._PersonRecordRedirects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecordRedirect_PublicationRecordRedirect", Storage="_PublicationRecordRedirects", ThisKey="ID", OtherKey="RecordRedirectID")]
		public EntitySet<PublicationRecordRedirect> PublicationRecordRedirects
		{
			get
			{
				return this._PublicationRecordRedirects;
			}
			set
			{
				this._PublicationRecordRedirects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecordRedirect_StudyMaterialRecordRedirect", Storage="_StudyMaterialRecordRedirects", ThisKey="ID", OtherKey="RecordRedirectID")]
		public EntitySet<StudyMaterialRecordRedirect> StudyMaterialRecordRedirects
		{
			get
			{
				return this._StudyMaterialRecordRedirects;
			}
			set
			{
				this._StudyMaterialRecordRedirects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecordRedirect_WebLinkRecordRedirect", Storage="_WebLinkRecordRedirects", ThisKey="ID", OtherKey="RecordRedirectID")]
		public EntitySet<WebLinkRecordRedirect> WebLinkRecordRedirects
		{
			get
			{
				return this._WebLinkRecordRedirects;
			}
			set
			{
				this._WebLinkRecordRedirects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ArticleRecordRedirects(ArticleRecordRedirect entity)
		{
			this.SendPropertyChanging();
			entity.RecordRedirect = this;
		}
		
		private void detach_ArticleRecordRedirects(ArticleRecordRedirect entity)
		{
			this.SendPropertyChanging();
			entity.RecordRedirect = null;
		}
		
		private void attach_BlogPostRecordRedirects(BlogPostRecordRedirect entity)
		{
			this.SendPropertyChanging();
			entity.RecordRedirect = this;
		}
		
		private void detach_BlogPostRecordRedirects(BlogPostRecordRedirect entity)
		{
			this.SendPropertyChanging();
			entity.RecordRedirect = null;
		}
		
		private void attach_DocumentRecordRedirects(DocumentRecordRedirect entity)
		{
			this.SendPropertyChanging();
			entity.RecordRedirect = this;
		}
		
		private void detach_DocumentRecordRedirects(DocumentRecordRedirect entity)
		{
			this.SendPropertyChanging();
			entity.RecordRedirect = null;
		}
		
		private void attach_EventRecordRedirects(EventRecordRedirect entity)
		{
			this.SendPropertyChanging();
			entity.RecordRedirect = this;
		}
		
		private void detach_EventRecordRedirects(EventRecordRedirect entity)
		{
			this.SendPropertyChanging();
			entity.RecordRedirect = null;
		}
		
		private void attach_ImageRecordRedirects(ImageRecordRedirect entity)
		{
			this.SendPropertyChanging();
			entity.RecordRedirect = this;
		}
		
		private void detach_ImageRecordRedirects(ImageRecordRedirect entity)
		{
			this.SendPropertyChanging();
			entity.RecordRedirect = null;
		}
		
		private void attach_OrganizationRecordRedirects(OrganizationRecordRedirect entity)
		{
			this.SendPropertyChanging();
			entity.RecordRedirect = this;
		}
		
		private void detach_OrganizationRecordRedirects(OrganizationRecordRedirect entity)
		{
			this.SendPropertyChanging();
			entity.RecordRedirect = null;
		}
		
		private void attach_PersonRecordRedirects(PersonRecordRedirect entity)
		{
			this.SendPropertyChanging();
			entity.RecordRedirect = this;
		}
		
		private void detach_PersonRecordRedirects(PersonRecordRedirect entity)
		{
			this.SendPropertyChanging();
			entity.RecordRedirect = null;
		}
		
		private void attach_PublicationRecordRedirects(PublicationRecordRedirect entity)
		{
			this.SendPropertyChanging();
			entity.RecordRedirect = this;
		}
		
		private void detach_PublicationRecordRedirects(PublicationRecordRedirect entity)
		{
			this.SendPropertyChanging();
			entity.RecordRedirect = null;
		}
		
		private void attach_StudyMaterialRecordRedirects(StudyMaterialRecordRedirect entity)
		{
			this.SendPropertyChanging();
			entity.RecordRedirect = this;
		}
		
		private void detach_StudyMaterialRecordRedirects(StudyMaterialRecordRedirect entity)
		{
			this.SendPropertyChanging();
			entity.RecordRedirect = null;
		}
		
		private void attach_WebLinkRecordRedirects(WebLinkRecordRedirect entity)
		{
			this.SendPropertyChanging();
			entity.RecordRedirect = this;
		}
		
		private void detach_WebLinkRecordRedirects(WebLinkRecordRedirect entity)
		{
			this.SendPropertyChanging();
			entity.RecordRedirect = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ArticleRecordRedirect")]
	public partial class ArticleRecordRedirect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ArticleID;
		
		private int _RecordRedirectID;
		
		private EntityRef<Article> _Article;
		
		private EntityRef<RecordRedirect> _RecordRedirect;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnArticleIDChanging(int value);
    partial void OnArticleIDChanged();
    partial void OnRecordRedirectIDChanging(int value);
    partial void OnRecordRedirectIDChanged();
    #endregion
		
		public ArticleRecordRedirect()
		{
			this._Article = default(EntityRef<Article>);
			this._RecordRedirect = default(EntityRef<RecordRedirect>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArticleID", DbType="Int NOT NULL")]
		public int ArticleID
		{
			get
			{
				return this._ArticleID;
			}
			set
			{
				if ((this._ArticleID != value))
				{
					if (this._Article.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArticleIDChanging(value);
					this.SendPropertyChanging();
					this._ArticleID = value;
					this.SendPropertyChanged("ArticleID");
					this.OnArticleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordRedirectID", DbType="Int NOT NULL")]
		public int RecordRedirectID
		{
			get
			{
				return this._RecordRedirectID;
			}
			set
			{
				if ((this._RecordRedirectID != value))
				{
					if (this._RecordRedirect.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecordRedirectIDChanging(value);
					this.SendPropertyChanging();
					this._RecordRedirectID = value;
					this.SendPropertyChanged("RecordRedirectID");
					this.OnRecordRedirectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Article_ArticleRecordRedirect", Storage="_Article", ThisKey="ArticleID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Article Article
		{
			get
			{
				return this._Article.Entity;
			}
			set
			{
				Article previousValue = this._Article.Entity;
				if (((previousValue != value) 
							|| (this._Article.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Article.Entity = null;
						previousValue.ArticleRecordRedirects.Remove(this);
					}
					this._Article.Entity = value;
					if ((value != null))
					{
						value.ArticleRecordRedirects.Add(this);
						this._ArticleID = value.ID;
					}
					else
					{
						this._ArticleID = default(int);
					}
					this.SendPropertyChanged("Article");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecordRedirect_ArticleRecordRedirect", Storage="_RecordRedirect", ThisKey="RecordRedirectID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RecordRedirect RecordRedirect
		{
			get
			{
				return this._RecordRedirect.Entity;
			}
			set
			{
				RecordRedirect previousValue = this._RecordRedirect.Entity;
				if (((previousValue != value) 
							|| (this._RecordRedirect.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RecordRedirect.Entity = null;
						previousValue.ArticleRecordRedirects.Remove(this);
					}
					this._RecordRedirect.Entity = value;
					if ((value != null))
					{
						value.ArticleRecordRedirects.Add(this);
						this._RecordRedirectID = value.ID;
					}
					else
					{
						this._RecordRedirectID = default(int);
					}
					this.SendPropertyChanged("RecordRedirect");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BlogPostRecordRedirect")]
	public partial class BlogPostRecordRedirect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _BlogPostID;
		
		private int _RecordRedirectID;
		
		private EntityRef<RecordRedirect> _RecordRedirect;
		
		private EntityRef<BlogPost> _BlogPost;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnBlogPostIDChanging(int value);
    partial void OnBlogPostIDChanged();
    partial void OnRecordRedirectIDChanging(int value);
    partial void OnRecordRedirectIDChanged();
    #endregion
		
		public BlogPostRecordRedirect()
		{
			this._RecordRedirect = default(EntityRef<RecordRedirect>);
			this._BlogPost = default(EntityRef<BlogPost>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlogPostID", DbType="Int NOT NULL")]
		public int BlogPostID
		{
			get
			{
				return this._BlogPostID;
			}
			set
			{
				if ((this._BlogPostID != value))
				{
					if (this._BlogPost.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogPostIDChanging(value);
					this.SendPropertyChanging();
					this._BlogPostID = value;
					this.SendPropertyChanged("BlogPostID");
					this.OnBlogPostIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordRedirectID", DbType="Int NOT NULL")]
		public int RecordRedirectID
		{
			get
			{
				return this._RecordRedirectID;
			}
			set
			{
				if ((this._RecordRedirectID != value))
				{
					if (this._RecordRedirect.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecordRedirectIDChanging(value);
					this.SendPropertyChanging();
					this._RecordRedirectID = value;
					this.SendPropertyChanged("RecordRedirectID");
					this.OnRecordRedirectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecordRedirect_BlogPostRecordRedirect", Storage="_RecordRedirect", ThisKey="RecordRedirectID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RecordRedirect RecordRedirect
		{
			get
			{
				return this._RecordRedirect.Entity;
			}
			set
			{
				RecordRedirect previousValue = this._RecordRedirect.Entity;
				if (((previousValue != value) 
							|| (this._RecordRedirect.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RecordRedirect.Entity = null;
						previousValue.BlogPostRecordRedirects.Remove(this);
					}
					this._RecordRedirect.Entity = value;
					if ((value != null))
					{
						value.BlogPostRecordRedirects.Add(this);
						this._RecordRedirectID = value.ID;
					}
					else
					{
						this._RecordRedirectID = default(int);
					}
					this.SendPropertyChanged("RecordRedirect");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogPost_BlogPostRecordRedirect", Storage="_BlogPost", ThisKey="BlogPostID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public BlogPost BlogPost
		{
			get
			{
				return this._BlogPost.Entity;
			}
			set
			{
				BlogPost previousValue = this._BlogPost.Entity;
				if (((previousValue != value) 
							|| (this._BlogPost.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BlogPost.Entity = null;
						previousValue.BlogPostRecordRedirects.Remove(this);
					}
					this._BlogPost.Entity = value;
					if ((value != null))
					{
						value.BlogPostRecordRedirects.Add(this);
						this._BlogPostID = value.ID;
					}
					else
					{
						this._BlogPostID = default(int);
					}
					this.SendPropertyChanged("BlogPost");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocumentRecordRedirect")]
	public partial class DocumentRecordRedirect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _DocumentID;
		
		private int _RecordRedirectID;
		
		private EntityRef<Document> _Document;
		
		private EntityRef<RecordRedirect> _RecordRedirect;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDocumentIDChanging(int value);
    partial void OnDocumentIDChanged();
    partial void OnRecordRedirectIDChanging(int value);
    partial void OnRecordRedirectIDChanged();
    #endregion
		
		public DocumentRecordRedirect()
		{
			this._Document = default(EntityRef<Document>);
			this._RecordRedirect = default(EntityRef<RecordRedirect>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentID", DbType="Int NOT NULL")]
		public int DocumentID
		{
			get
			{
				return this._DocumentID;
			}
			set
			{
				if ((this._DocumentID != value))
				{
					if (this._Document.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentID = value;
					this.SendPropertyChanged("DocumentID");
					this.OnDocumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordRedirectID", DbType="Int NOT NULL")]
		public int RecordRedirectID
		{
			get
			{
				return this._RecordRedirectID;
			}
			set
			{
				if ((this._RecordRedirectID != value))
				{
					if (this._RecordRedirect.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecordRedirectIDChanging(value);
					this.SendPropertyChanging();
					this._RecordRedirectID = value;
					this.SendPropertyChanged("RecordRedirectID");
					this.OnRecordRedirectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_DocumentRecordRedirect", Storage="_Document", ThisKey="DocumentID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Document Document
		{
			get
			{
				return this._Document.Entity;
			}
			set
			{
				Document previousValue = this._Document.Entity;
				if (((previousValue != value) 
							|| (this._Document.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Document.Entity = null;
						previousValue.DocumentRecordRedirects.Remove(this);
					}
					this._Document.Entity = value;
					if ((value != null))
					{
						value.DocumentRecordRedirects.Add(this);
						this._DocumentID = value.ID;
					}
					else
					{
						this._DocumentID = default(int);
					}
					this.SendPropertyChanged("Document");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecordRedirect_DocumentRecordRedirect", Storage="_RecordRedirect", ThisKey="RecordRedirectID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RecordRedirect RecordRedirect
		{
			get
			{
				return this._RecordRedirect.Entity;
			}
			set
			{
				RecordRedirect previousValue = this._RecordRedirect.Entity;
				if (((previousValue != value) 
							|| (this._RecordRedirect.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RecordRedirect.Entity = null;
						previousValue.DocumentRecordRedirects.Remove(this);
					}
					this._RecordRedirect.Entity = value;
					if ((value != null))
					{
						value.DocumentRecordRedirects.Add(this);
						this._RecordRedirectID = value.ID;
					}
					else
					{
						this._RecordRedirectID = default(int);
					}
					this.SendPropertyChanged("RecordRedirect");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventRecordRedirect")]
	public partial class EventRecordRedirect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _EventID;
		
		private int _RecordRedirectID;
		
		private EntityRef<RecordRedirect> _RecordRedirect;
		
		private EntityRef<Event> _Event;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnRecordRedirectIDChanging(int value);
    partial void OnRecordRedirectIDChanged();
    #endregion
		
		public EventRecordRedirect()
		{
			this._RecordRedirect = default(EntityRef<RecordRedirect>);
			this._Event = default(EntityRef<Event>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", DbType="Int NOT NULL")]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordRedirectID", DbType="Int NOT NULL")]
		public int RecordRedirectID
		{
			get
			{
				return this._RecordRedirectID;
			}
			set
			{
				if ((this._RecordRedirectID != value))
				{
					if (this._RecordRedirect.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecordRedirectIDChanging(value);
					this.SendPropertyChanging();
					this._RecordRedirectID = value;
					this.SendPropertyChanged("RecordRedirectID");
					this.OnRecordRedirectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecordRedirect_EventRecordRedirect", Storage="_RecordRedirect", ThisKey="RecordRedirectID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RecordRedirect RecordRedirect
		{
			get
			{
				return this._RecordRedirect.Entity;
			}
			set
			{
				RecordRedirect previousValue = this._RecordRedirect.Entity;
				if (((previousValue != value) 
							|| (this._RecordRedirect.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RecordRedirect.Entity = null;
						previousValue.EventRecordRedirects.Remove(this);
					}
					this._RecordRedirect.Entity = value;
					if ((value != null))
					{
						value.EventRecordRedirects.Add(this);
						this._RecordRedirectID = value.ID;
					}
					else
					{
						this._RecordRedirectID = default(int);
					}
					this.SendPropertyChanged("RecordRedirect");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventRecordRedirect", Storage="_Event", ThisKey="EventID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.EventRecordRedirects.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.EventRecordRedirects.Add(this);
						this._EventID = value.ID;
					}
					else
					{
						this._EventID = default(int);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ImageRecordRedirect")]
	public partial class ImageRecordRedirect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ImageID;
		
		private int _RecordRedirectID;
		
		private EntityRef<Image> _Image;
		
		private EntityRef<RecordRedirect> _RecordRedirect;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnImageIDChanging(int value);
    partial void OnImageIDChanged();
    partial void OnRecordRedirectIDChanging(int value);
    partial void OnRecordRedirectIDChanged();
    #endregion
		
		public ImageRecordRedirect()
		{
			this._Image = default(EntityRef<Image>);
			this._RecordRedirect = default(EntityRef<RecordRedirect>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageID", DbType="Int NOT NULL")]
		public int ImageID
		{
			get
			{
				return this._ImageID;
			}
			set
			{
				if ((this._ImageID != value))
				{
					if (this._Image.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnImageIDChanging(value);
					this.SendPropertyChanging();
					this._ImageID = value;
					this.SendPropertyChanged("ImageID");
					this.OnImageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordRedirectID", DbType="Int NOT NULL")]
		public int RecordRedirectID
		{
			get
			{
				return this._RecordRedirectID;
			}
			set
			{
				if ((this._RecordRedirectID != value))
				{
					if (this._RecordRedirect.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecordRedirectIDChanging(value);
					this.SendPropertyChanging();
					this._RecordRedirectID = value;
					this.SendPropertyChanged("RecordRedirectID");
					this.OnRecordRedirectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Image_ImageRecordRedirect", Storage="_Image", ThisKey="ImageID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Image Image
		{
			get
			{
				return this._Image.Entity;
			}
			set
			{
				Image previousValue = this._Image.Entity;
				if (((previousValue != value) 
							|| (this._Image.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Image.Entity = null;
						previousValue.ImageRecordRedirects.Remove(this);
					}
					this._Image.Entity = value;
					if ((value != null))
					{
						value.ImageRecordRedirects.Add(this);
						this._ImageID = value.ID;
					}
					else
					{
						this._ImageID = default(int);
					}
					this.SendPropertyChanged("Image");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecordRedirect_ImageRecordRedirect", Storage="_RecordRedirect", ThisKey="RecordRedirectID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RecordRedirect RecordRedirect
		{
			get
			{
				return this._RecordRedirect.Entity;
			}
			set
			{
				RecordRedirect previousValue = this._RecordRedirect.Entity;
				if (((previousValue != value) 
							|| (this._RecordRedirect.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RecordRedirect.Entity = null;
						previousValue.ImageRecordRedirects.Remove(this);
					}
					this._RecordRedirect.Entity = value;
					if ((value != null))
					{
						value.ImageRecordRedirects.Add(this);
						this._RecordRedirectID = value.ID;
					}
					else
					{
						this._RecordRedirectID = default(int);
					}
					this.SendPropertyChanged("RecordRedirect");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrganizationRecordRedirect")]
	public partial class OrganizationRecordRedirect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _OrganizationID;
		
		private int _RecordRedirectID;
		
		private EntityRef<RecordRedirect> _RecordRedirect;
		
		private EntityRef<Organization> _Organization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnOrganizationIDChanging(int value);
    partial void OnOrganizationIDChanged();
    partial void OnRecordRedirectIDChanging(int value);
    partial void OnRecordRedirectIDChanged();
    #endregion
		
		public OrganizationRecordRedirect()
		{
			this._RecordRedirect = default(EntityRef<RecordRedirect>);
			this._Organization = default(EntityRef<Organization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationID", DbType="Int NOT NULL")]
		public int OrganizationID
		{
			get
			{
				return this._OrganizationID;
			}
			set
			{
				if ((this._OrganizationID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganizationIDChanging(value);
					this.SendPropertyChanging();
					this._OrganizationID = value;
					this.SendPropertyChanged("OrganizationID");
					this.OnOrganizationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordRedirectID", DbType="Int NOT NULL")]
		public int RecordRedirectID
		{
			get
			{
				return this._RecordRedirectID;
			}
			set
			{
				if ((this._RecordRedirectID != value))
				{
					if (this._RecordRedirect.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecordRedirectIDChanging(value);
					this.SendPropertyChanging();
					this._RecordRedirectID = value;
					this.SendPropertyChanged("RecordRedirectID");
					this.OnRecordRedirectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecordRedirect_OrganizationRecordRedirect", Storage="_RecordRedirect", ThisKey="RecordRedirectID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RecordRedirect RecordRedirect
		{
			get
			{
				return this._RecordRedirect.Entity;
			}
			set
			{
				RecordRedirect previousValue = this._RecordRedirect.Entity;
				if (((previousValue != value) 
							|| (this._RecordRedirect.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RecordRedirect.Entity = null;
						previousValue.OrganizationRecordRedirects.Remove(this);
					}
					this._RecordRedirect.Entity = value;
					if ((value != null))
					{
						value.OrganizationRecordRedirects.Add(this);
						this._RecordRedirectID = value.ID;
					}
					else
					{
						this._RecordRedirectID = default(int);
					}
					this.SendPropertyChanged("RecordRedirect");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_OrganizationRecordRedirect", Storage="_Organization", ThisKey="OrganizationID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.OrganizationRecordRedirects.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.OrganizationRecordRedirects.Add(this);
						this._OrganizationID = value.ID;
					}
					else
					{
						this._OrganizationID = default(int);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PersonRecordRedirect")]
	public partial class PersonRecordRedirect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PersonID;
		
		private int _RecordRedirectID;
		
		private EntityRef<RecordRedirect> _RecordRedirect;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPersonIDChanging(int value);
    partial void OnPersonIDChanged();
    partial void OnRecordRedirectIDChanging(int value);
    partial void OnRecordRedirectIDChanged();
    #endregion
		
		public PersonRecordRedirect()
		{
			this._RecordRedirect = default(EntityRef<RecordRedirect>);
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonID", DbType="Int NOT NULL")]
		public int PersonID
		{
			get
			{
				return this._PersonID;
			}
			set
			{
				if ((this._PersonID != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIDChanging(value);
					this.SendPropertyChanging();
					this._PersonID = value;
					this.SendPropertyChanged("PersonID");
					this.OnPersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordRedirectID", DbType="Int NOT NULL")]
		public int RecordRedirectID
		{
			get
			{
				return this._RecordRedirectID;
			}
			set
			{
				if ((this._RecordRedirectID != value))
				{
					if (this._RecordRedirect.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecordRedirectIDChanging(value);
					this.SendPropertyChanging();
					this._RecordRedirectID = value;
					this.SendPropertyChanged("RecordRedirectID");
					this.OnRecordRedirectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecordRedirect_PersonRecordRedirect", Storage="_RecordRedirect", ThisKey="RecordRedirectID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RecordRedirect RecordRedirect
		{
			get
			{
				return this._RecordRedirect.Entity;
			}
			set
			{
				RecordRedirect previousValue = this._RecordRedirect.Entity;
				if (((previousValue != value) 
							|| (this._RecordRedirect.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RecordRedirect.Entity = null;
						previousValue.PersonRecordRedirects.Remove(this);
					}
					this._RecordRedirect.Entity = value;
					if ((value != null))
					{
						value.PersonRecordRedirects.Add(this);
						this._RecordRedirectID = value.ID;
					}
					else
					{
						this._RecordRedirectID = default(int);
					}
					this.SendPropertyChanged("RecordRedirect");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_PersonRecordRedirect", Storage="_Person", ThisKey="PersonID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.PersonRecordRedirects.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.PersonRecordRedirects.Add(this);
						this._PersonID = value.ID;
					}
					else
					{
						this._PersonID = default(int);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PublicationRecordRedirect")]
	public partial class PublicationRecordRedirect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PublicationID;
		
		private int _RecordRedirectID;
		
		private EntityRef<RecordRedirect> _RecordRedirect;
		
		private EntityRef<Publication> _Publication;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPublicationIDChanging(int value);
    partial void OnPublicationIDChanged();
    partial void OnRecordRedirectIDChanging(int value);
    partial void OnRecordRedirectIDChanged();
    #endregion
		
		public PublicationRecordRedirect()
		{
			this._RecordRedirect = default(EntityRef<RecordRedirect>);
			this._Publication = default(EntityRef<Publication>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublicationID", DbType="Int NOT NULL")]
		public int PublicationID
		{
			get
			{
				return this._PublicationID;
			}
			set
			{
				if ((this._PublicationID != value))
				{
					if (this._Publication.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPublicationIDChanging(value);
					this.SendPropertyChanging();
					this._PublicationID = value;
					this.SendPropertyChanged("PublicationID");
					this.OnPublicationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordRedirectID", DbType="Int NOT NULL")]
		public int RecordRedirectID
		{
			get
			{
				return this._RecordRedirectID;
			}
			set
			{
				if ((this._RecordRedirectID != value))
				{
					if (this._RecordRedirect.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecordRedirectIDChanging(value);
					this.SendPropertyChanging();
					this._RecordRedirectID = value;
					this.SendPropertyChanged("RecordRedirectID");
					this.OnRecordRedirectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecordRedirect_PublicationRecordRedirect", Storage="_RecordRedirect", ThisKey="RecordRedirectID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RecordRedirect RecordRedirect
		{
			get
			{
				return this._RecordRedirect.Entity;
			}
			set
			{
				RecordRedirect previousValue = this._RecordRedirect.Entity;
				if (((previousValue != value) 
							|| (this._RecordRedirect.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RecordRedirect.Entity = null;
						previousValue.PublicationRecordRedirects.Remove(this);
					}
					this._RecordRedirect.Entity = value;
					if ((value != null))
					{
						value.PublicationRecordRedirects.Add(this);
						this._RecordRedirectID = value.ID;
					}
					else
					{
						this._RecordRedirectID = default(int);
					}
					this.SendPropertyChanged("RecordRedirect");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publication_PublicationRecordRedirect", Storage="_Publication", ThisKey="PublicationID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Publication Publication
		{
			get
			{
				return this._Publication.Entity;
			}
			set
			{
				Publication previousValue = this._Publication.Entity;
				if (((previousValue != value) 
							|| (this._Publication.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Publication.Entity = null;
						previousValue.PublicationRecordRedirects.Remove(this);
					}
					this._Publication.Entity = value;
					if ((value != null))
					{
						value.PublicationRecordRedirects.Add(this);
						this._PublicationID = value.ID;
					}
					else
					{
						this._PublicationID = default(int);
					}
					this.SendPropertyChanged("Publication");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudyMaterialRecordRedirect")]
	public partial class StudyMaterialRecordRedirect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _StudyMaterialID;
		
		private int _RecordRedirectID;
		
		private EntityRef<RecordRedirect> _RecordRedirect;
		
		private EntityRef<StudyMaterial> _StudyMaterial;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnStudyMaterialIDChanging(int value);
    partial void OnStudyMaterialIDChanged();
    partial void OnRecordRedirectIDChanging(int value);
    partial void OnRecordRedirectIDChanged();
    #endregion
		
		public StudyMaterialRecordRedirect()
		{
			this._RecordRedirect = default(EntityRef<RecordRedirect>);
			this._StudyMaterial = default(EntityRef<StudyMaterial>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudyMaterialID", DbType="Int NOT NULL")]
		public int StudyMaterialID
		{
			get
			{
				return this._StudyMaterialID;
			}
			set
			{
				if ((this._StudyMaterialID != value))
				{
					if (this._StudyMaterial.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudyMaterialIDChanging(value);
					this.SendPropertyChanging();
					this._StudyMaterialID = value;
					this.SendPropertyChanged("StudyMaterialID");
					this.OnStudyMaterialIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordRedirectID", DbType="Int NOT NULL")]
		public int RecordRedirectID
		{
			get
			{
				return this._RecordRedirectID;
			}
			set
			{
				if ((this._RecordRedirectID != value))
				{
					if (this._RecordRedirect.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecordRedirectIDChanging(value);
					this.SendPropertyChanging();
					this._RecordRedirectID = value;
					this.SendPropertyChanged("RecordRedirectID");
					this.OnRecordRedirectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecordRedirect_StudyMaterialRecordRedirect", Storage="_RecordRedirect", ThisKey="RecordRedirectID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RecordRedirect RecordRedirect
		{
			get
			{
				return this._RecordRedirect.Entity;
			}
			set
			{
				RecordRedirect previousValue = this._RecordRedirect.Entity;
				if (((previousValue != value) 
							|| (this._RecordRedirect.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RecordRedirect.Entity = null;
						previousValue.StudyMaterialRecordRedirects.Remove(this);
					}
					this._RecordRedirect.Entity = value;
					if ((value != null))
					{
						value.StudyMaterialRecordRedirects.Add(this);
						this._RecordRedirectID = value.ID;
					}
					else
					{
						this._RecordRedirectID = default(int);
					}
					this.SendPropertyChanged("RecordRedirect");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudyMaterial_StudyMaterialRecordRedirect", Storage="_StudyMaterial", ThisKey="StudyMaterialID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public StudyMaterial StudyMaterial
		{
			get
			{
				return this._StudyMaterial.Entity;
			}
			set
			{
				StudyMaterial previousValue = this._StudyMaterial.Entity;
				if (((previousValue != value) 
							|| (this._StudyMaterial.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StudyMaterial.Entity = null;
						previousValue.StudyMaterialRecordRedirects.Remove(this);
					}
					this._StudyMaterial.Entity = value;
					if ((value != null))
					{
						value.StudyMaterialRecordRedirects.Add(this);
						this._StudyMaterialID = value.ID;
					}
					else
					{
						this._StudyMaterialID = default(int);
					}
					this.SendPropertyChanged("StudyMaterial");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WebLinkRecordRedirect")]
	public partial class WebLinkRecordRedirect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _WebLinkID;
		
		private int _RecordRedirectID;
		
		private EntityRef<RecordRedirect> _RecordRedirect;
		
		private EntityRef<WebLink> _WebLink;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnWebLinkIDChanging(int value);
    partial void OnWebLinkIDChanged();
    partial void OnRecordRedirectIDChanging(int value);
    partial void OnRecordRedirectIDChanged();
    #endregion
		
		public WebLinkRecordRedirect()
		{
			this._RecordRedirect = default(EntityRef<RecordRedirect>);
			this._WebLink = default(EntityRef<WebLink>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebLinkID", DbType="Int NOT NULL")]
		public int WebLinkID
		{
			get
			{
				return this._WebLinkID;
			}
			set
			{
				if ((this._WebLinkID != value))
				{
					if (this._WebLink.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWebLinkIDChanging(value);
					this.SendPropertyChanging();
					this._WebLinkID = value;
					this.SendPropertyChanged("WebLinkID");
					this.OnWebLinkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordRedirectID", DbType="Int NOT NULL")]
		public int RecordRedirectID
		{
			get
			{
				return this._RecordRedirectID;
			}
			set
			{
				if ((this._RecordRedirectID != value))
				{
					if (this._RecordRedirect.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecordRedirectIDChanging(value);
					this.SendPropertyChanging();
					this._RecordRedirectID = value;
					this.SendPropertyChanged("RecordRedirectID");
					this.OnRecordRedirectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RecordRedirect_WebLinkRecordRedirect", Storage="_RecordRedirect", ThisKey="RecordRedirectID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RecordRedirect RecordRedirect
		{
			get
			{
				return this._RecordRedirect.Entity;
			}
			set
			{
				RecordRedirect previousValue = this._RecordRedirect.Entity;
				if (((previousValue != value) 
							|| (this._RecordRedirect.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RecordRedirect.Entity = null;
						previousValue.WebLinkRecordRedirects.Remove(this);
					}
					this._RecordRedirect.Entity = value;
					if ((value != null))
					{
						value.WebLinkRecordRedirects.Add(this);
						this._RecordRedirectID = value.ID;
					}
					else
					{
						this._RecordRedirectID = default(int);
					}
					this.SendPropertyChanged("RecordRedirect");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WebLink_WebLinkRecordRedirect", Storage="_WebLink", ThisKey="WebLinkID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public WebLink WebLink
		{
			get
			{
				return this._WebLink.Entity;
			}
			set
			{
				WebLink previousValue = this._WebLink.Entity;
				if (((previousValue != value) 
							|| (this._WebLink.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WebLink.Entity = null;
						previousValue.WebLinkRecordRedirects.Remove(this);
					}
					this._WebLink.Entity = value;
					if ((value != null))
					{
						value.WebLinkRecordRedirects.Add(this);
						this._WebLinkID = value.ID;
					}
					else
					{
						this._WebLinkID = default(int);
					}
					this.SendPropertyChanged("WebLink");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Redirect")]
	public partial class Redirect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _OldLink;
		
		private string _NewLink;
		
		private bool _IsForum;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnOldLinkChanging(string value);
    partial void OnOldLinkChanged();
    partial void OnNewLinkChanging(string value);
    partial void OnNewLinkChanged();
    partial void OnIsForumChanging(bool value);
    partial void OnIsForumChanged();
    #endregion
		
		public Redirect()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OldLink", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string OldLink
		{
			get
			{
				return this._OldLink;
			}
			set
			{
				if ((this._OldLink != value))
				{
					this.OnOldLinkChanging(value);
					this.SendPropertyChanging();
					this._OldLink = value;
					this.SendPropertyChanged("OldLink");
					this.OnOldLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewLink", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string NewLink
		{
			get
			{
				return this._NewLink;
			}
			set
			{
				if ((this._NewLink != value))
				{
					this.OnNewLinkChanging(value);
					this.SendPropertyChanging();
					this._NewLink = value;
					this.SendPropertyChanged("NewLink");
					this.OnNewLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsForum", DbType="Bit NOT NULL")]
		public bool IsForum
		{
			get
			{
				return this._IsForum;
			}
			set
			{
				if ((this._IsForum != value))
				{
					this.OnIsForumChanging(value);
					this.SendPropertyChanging();
					this._IsForum = value;
					this.SendPropertyChanged("IsForum");
					this.OnIsForumChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserEmail")]
	public partial class UserEmail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private string _Email;
		
		private string _ActivateLink;
		
		private System.Nullable<System.DateTime> _ActivateDate;
		
		private bool _IsPrimary;
		
		private bool _Sended;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnActivateLinkChanging(string value);
    partial void OnActivateLinkChanged();
    partial void OnActivateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActivateDateChanged();
    partial void OnIsPrimaryChanging(bool value);
    partial void OnIsPrimaryChanged();
    partial void OnSendedChanging(bool value);
    partial void OnSendedChanged();
    #endregion
		
		public UserEmail()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivateLink", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string ActivateLink
		{
			get
			{
				return this._ActivateLink;
			}
			set
			{
				if ((this._ActivateLink != value))
				{
					this.OnActivateLinkChanging(value);
					this.SendPropertyChanging();
					this._ActivateLink = value;
					this.SendPropertyChanged("ActivateLink");
					this.OnActivateLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ActivateDate
		{
			get
			{
				return this._ActivateDate;
			}
			set
			{
				if ((this._ActivateDate != value))
				{
					this.OnActivateDateChanging(value);
					this.SendPropertyChanging();
					this._ActivateDate = value;
					this.SendPropertyChanged("ActivateDate");
					this.OnActivateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPrimary", DbType="Bit NOT NULL")]
		public bool IsPrimary
		{
			get
			{
				return this._IsPrimary;
			}
			set
			{
				if ((this._IsPrimary != value))
				{
					this.OnIsPrimaryChanging(value);
					this.SendPropertyChanging();
					this._IsPrimary = value;
					this.SendPropertyChanged("IsPrimary");
					this.OnIsPrimaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sended", DbType="Bit NOT NULL")]
		public bool Sended
		{
			get
			{
				return this._Sended;
			}
			set
			{
				if ((this._Sended != value))
				{
					this.OnSendedChanging(value);
					this.SendPropertyChanging();
					this._Sended = value;
					this.SendPropertyChanged("Sended");
					this.OnSendedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserEmail", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserEmails.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserEmails.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Setting")]
	public partial class Setting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Value;
		
		private System.Nullable<int> _ValueInt;
		
		private System.Nullable<double> _ValueDouble;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnValueIntChanging(System.Nullable<int> value);
    partial void OnValueIntChanged();
    partial void OnValueDoubleChanging(System.Nullable<double> value);
    partial void OnValueDoubleChanged();
    #endregion
		
		public Setting()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(MAX)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueInt", DbType="Int")]
		public System.Nullable<int> ValueInt
		{
			get
			{
				return this._ValueInt;
			}
			set
			{
				if ((this._ValueInt != value))
				{
					this.OnValueIntChanging(value);
					this.SendPropertyChanging();
					this._ValueInt = value;
					this.SendPropertyChanged("ValueInt");
					this.OnValueIntChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueDouble", DbType="Float")]
		public System.Nullable<double> ValueDouble
		{
			get
			{
				return this._ValueDouble;
			}
			set
			{
				if ((this._ValueDouble != value))
				{
					this.OnValueDoubleChanging(value);
					this.SendPropertyChanging();
					this._ValueDouble = value;
					this.SendPropertyChanged("ValueDouble");
					this.OnValueDoubleChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CommentLike")]
	public partial class CommentLike : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CommentID;
		
		private int _UserID;
		
		private bool _IsLike;
		
		private EntityRef<Comment> _Comment;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCommentIDChanging(int value);
    partial void OnCommentIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnIsLikeChanging(bool value);
    partial void OnIsLikeChanged();
    #endregion
		
		public CommentLike()
		{
			this._Comment = default(EntityRef<Comment>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentID", DbType="Int NOT NULL")]
		public int CommentID
		{
			get
			{
				return this._CommentID;
			}
			set
			{
				if ((this._CommentID != value))
				{
					if (this._Comment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommentIDChanging(value);
					this.SendPropertyChanging();
					this._CommentID = value;
					this.SendPropertyChanged("CommentID");
					this.OnCommentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLike", DbType="Bit NOT NULL")]
		public bool IsLike
		{
			get
			{
				return this._IsLike;
			}
			set
			{
				if ((this._IsLike != value))
				{
					this.OnIsLikeChanging(value);
					this.SendPropertyChanging();
					this._IsLike = value;
					this.SendPropertyChanged("IsLike");
					this.OnIsLikeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_CommentLike", Storage="_Comment", ThisKey="CommentID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Comment Comment
		{
			get
			{
				return this._Comment.Entity;
			}
			set
			{
				Comment previousValue = this._Comment.Entity;
				if (((previousValue != value) 
							|| (this._Comment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Comment.Entity = null;
						previousValue.CommentLikes.Remove(this);
					}
					this._Comment.Entity = value;
					if ((value != null))
					{
						value.CommentLikes.Add(this);
						this._CommentID = value.ID;
					}
					else
					{
						this._CommentID = default(int);
					}
					this.SendPropertyChanged("Comment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CommentLike", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.CommentLikes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.CommentLikes.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comment")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _ParentID;
		
		private int _UserID;
		
		private string _Text;
		
		private System.DateTime _AddedDate;
		
		private System.Nullable<System.DateTime> _ModeratedDate;
		
		private bool _IsBanned;
		
		private int _TotalLikes;
		
		private EntitySet<BlogPostComment> _BlogPostComments;
		
		private EntitySet<DocumentComment> _DocumentComments;
		
		private EntitySet<EventComment> _EventComments;
		
		private EntitySet<ImageComment> _ImageComments;
		
		private EntitySet<PublicationComment> _PublicationComments;
		
		private EntitySet<StudyMaterialComment> _StudyMaterialComments;
		
		private EntitySet<WebLinkComment> _WebLinkComments;
		
		private EntitySet<CommentLike> _CommentLikes;
		
		private EntitySet<Comment> _Comments;
		
		private EntityRef<Comment> _Comment1;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnParentIDChanging(System.Nullable<int> value);
    partial void OnParentIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnModeratedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModeratedDateChanged();
    partial void OnIsBannedChanging(bool value);
    partial void OnIsBannedChanged();
    partial void OnTotalLikesChanging(int value);
    partial void OnTotalLikesChanged();
    #endregion
		
		public Comment()
		{
			this._BlogPostComments = new EntitySet<BlogPostComment>(new Action<BlogPostComment>(this.attach_BlogPostComments), new Action<BlogPostComment>(this.detach_BlogPostComments));
			this._DocumentComments = new EntitySet<DocumentComment>(new Action<DocumentComment>(this.attach_DocumentComments), new Action<DocumentComment>(this.detach_DocumentComments));
			this._EventComments = new EntitySet<EventComment>(new Action<EventComment>(this.attach_EventComments), new Action<EventComment>(this.detach_EventComments));
			this._ImageComments = new EntitySet<ImageComment>(new Action<ImageComment>(this.attach_ImageComments), new Action<ImageComment>(this.detach_ImageComments));
			this._PublicationComments = new EntitySet<PublicationComment>(new Action<PublicationComment>(this.attach_PublicationComments), new Action<PublicationComment>(this.detach_PublicationComments));
			this._StudyMaterialComments = new EntitySet<StudyMaterialComment>(new Action<StudyMaterialComment>(this.attach_StudyMaterialComments), new Action<StudyMaterialComment>(this.detach_StudyMaterialComments));
			this._WebLinkComments = new EntitySet<WebLinkComment>(new Action<WebLinkComment>(this.attach_WebLinkComments), new Action<WebLinkComment>(this.detach_WebLinkComments));
			this._CommentLikes = new EntitySet<CommentLike>(new Action<CommentLike>(this.attach_CommentLikes), new Action<CommentLike>(this.detach_CommentLikes));
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._Comment1 = default(EntityRef<Comment>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int")]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._Comment1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModeratedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModeratedDate
		{
			get
			{
				return this._ModeratedDate;
			}
			set
			{
				if ((this._ModeratedDate != value))
				{
					this.OnModeratedDateChanging(value);
					this.SendPropertyChanging();
					this._ModeratedDate = value;
					this.SendPropertyChanged("ModeratedDate");
					this.OnModeratedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsBanned", DbType="Bit NOT NULL")]
		public bool IsBanned
		{
			get
			{
				return this._IsBanned;
			}
			set
			{
				if ((this._IsBanned != value))
				{
					this.OnIsBannedChanging(value);
					this.SendPropertyChanging();
					this._IsBanned = value;
					this.SendPropertyChanged("IsBanned");
					this.OnIsBannedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalLikes", DbType="Int NOT NULL")]
		public int TotalLikes
		{
			get
			{
				return this._TotalLikes;
			}
			set
			{
				if ((this._TotalLikes != value))
				{
					this.OnTotalLikesChanging(value);
					this.SendPropertyChanging();
					this._TotalLikes = value;
					this.SendPropertyChanged("TotalLikes");
					this.OnTotalLikesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_BlogPostComment", Storage="_BlogPostComments", ThisKey="ID", OtherKey="CommentID")]
		public EntitySet<BlogPostComment> BlogPostComments
		{
			get
			{
				return this._BlogPostComments;
			}
			set
			{
				this._BlogPostComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_DocumentComment", Storage="_DocumentComments", ThisKey="ID", OtherKey="CommentID")]
		public EntitySet<DocumentComment> DocumentComments
		{
			get
			{
				return this._DocumentComments;
			}
			set
			{
				this._DocumentComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_EventComment", Storage="_EventComments", ThisKey="ID", OtherKey="CommentID")]
		public EntitySet<EventComment> EventComments
		{
			get
			{
				return this._EventComments;
			}
			set
			{
				this._EventComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_ImageComment", Storage="_ImageComments", ThisKey="ID", OtherKey="CommentID")]
		public EntitySet<ImageComment> ImageComments
		{
			get
			{
				return this._ImageComments;
			}
			set
			{
				this._ImageComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_PublicationComment", Storage="_PublicationComments", ThisKey="ID", OtherKey="CommentID")]
		public EntitySet<PublicationComment> PublicationComments
		{
			get
			{
				return this._PublicationComments;
			}
			set
			{
				this._PublicationComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_StudyMaterialComment", Storage="_StudyMaterialComments", ThisKey="ID", OtherKey="CommentID")]
		public EntitySet<StudyMaterialComment> StudyMaterialComments
		{
			get
			{
				return this._StudyMaterialComments;
			}
			set
			{
				this._StudyMaterialComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_WebLinkComment", Storage="_WebLinkComments", ThisKey="ID", OtherKey="CommentID")]
		public EntitySet<WebLinkComment> WebLinkComments
		{
			get
			{
				return this._WebLinkComments;
			}
			set
			{
				this._WebLinkComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_CommentLike", Storage="_CommentLikes", ThisKey="ID", OtherKey="CommentID")]
		public EntitySet<CommentLike> CommentLikes
		{
			get
			{
				return this._CommentLikes;
			}
			set
			{
				this._CommentLikes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_Comment", Storage="_Comments", ThisKey="ID", OtherKey="ParentID")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_Comment", Storage="_Comment1", ThisKey="ParentID", OtherKey="ID", IsForeignKey=true)]
		public Comment Comment1
		{
			get
			{
				return this._Comment1.Entity;
			}
			set
			{
				Comment previousValue = this._Comment1.Entity;
				if (((previousValue != value) 
							|| (this._Comment1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Comment1.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._Comment1.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._ParentID = value.ID;
					}
					else
					{
						this._ParentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Comment1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BlogPostComments(BlogPostComment entity)
		{
			this.SendPropertyChanging();
			entity.Comment = this;
		}
		
		private void detach_BlogPostComments(BlogPostComment entity)
		{
			this.SendPropertyChanging();
			entity.Comment = null;
		}
		
		private void attach_DocumentComments(DocumentComment entity)
		{
			this.SendPropertyChanging();
			entity.Comment = this;
		}
		
		private void detach_DocumentComments(DocumentComment entity)
		{
			this.SendPropertyChanging();
			entity.Comment = null;
		}
		
		private void attach_EventComments(EventComment entity)
		{
			this.SendPropertyChanging();
			entity.Comment = this;
		}
		
		private void detach_EventComments(EventComment entity)
		{
			this.SendPropertyChanging();
			entity.Comment = null;
		}
		
		private void attach_ImageComments(ImageComment entity)
		{
			this.SendPropertyChanging();
			entity.Comment = this;
		}
		
		private void detach_ImageComments(ImageComment entity)
		{
			this.SendPropertyChanging();
			entity.Comment = null;
		}
		
		private void attach_PublicationComments(PublicationComment entity)
		{
			this.SendPropertyChanging();
			entity.Comment = this;
		}
		
		private void detach_PublicationComments(PublicationComment entity)
		{
			this.SendPropertyChanging();
			entity.Comment = null;
		}
		
		private void attach_StudyMaterialComments(StudyMaterialComment entity)
		{
			this.SendPropertyChanging();
			entity.Comment = this;
		}
		
		private void detach_StudyMaterialComments(StudyMaterialComment entity)
		{
			this.SendPropertyChanging();
			entity.Comment = null;
		}
		
		private void attach_WebLinkComments(WebLinkComment entity)
		{
			this.SendPropertyChanging();
			entity.Comment = this;
		}
		
		private void detach_WebLinkComments(WebLinkComment entity)
		{
			this.SendPropertyChanging();
			entity.Comment = null;
		}
		
		private void attach_CommentLikes(CommentLike entity)
		{
			this.SendPropertyChanging();
			entity.Comment = this;
		}
		
		private void detach_CommentLikes(CommentLike entity)
		{
			this.SendPropertyChanging();
			entity.Comment = null;
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Comment1 = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Comment1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Page")]
	public partial class Page : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Header;
		
		private string _Url;
		
		private string _Text;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnHeaderChanging(string value);
    partial void OnHeaderChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public Page()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Header", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Header
		{
			get
			{
				return this._Header;
			}
			set
			{
				if ((this._Header != value))
				{
					this.OnHeaderChanging(value);
					this.SendPropertyChanging();
					this._Header = value;
					this.SendPropertyChanged("Header");
					this.OnHeaderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Publication")]
	public partial class Publication : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private System.Nullable<int> _ParentID;
		
		private string _Cover;
		
		private string _Header;
		
		private string _Url;
		
		private string _Bibliographic;
		
		private System.Nullable<int> _Year;
		
		private int _Type;
		
		private string _Teaser;
		
		private string _Content;
		
		private System.DateTime _AddedDate;
		
		private System.DateTime _ChangedDate;
		
		private System.Nullable<System.DateTime> _ModeratedDate;
		
		private int _TotalLikes;
		
		private EntitySet<PublicationAccess> _PublicationAccesses;
		
		private EntitySet<PublicationSubject> _PublicationSubjects;
		
		private EntitySet<PublicationComment> _PublicationComments;
		
		private EntitySet<PublicationFile> _PublicationFiles;
		
		private EntitySet<PublicationLike> _PublicationLikes;
		
		private EntitySet<PublicationLink> _PublicationLinks;
		
		private EntitySet<PublicationOrganization> _PublicationOrganizations;
		
		private EntitySet<PublicationPerson> _PublicationPersons;
		
		private EntitySet<PublicationRegion> _PublicationRegions;
		
		private EntitySet<PublicationRecordRedirect> _PublicationRecordRedirects;
		
		private EntitySet<Publication> _Publications;
		
		private EntitySet<PublicationSubscription> _PublicationSubscriptions;
		
		private EntityRef<Publication> _Publication1;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnParentIDChanging(System.Nullable<int> value);
    partial void OnParentIDChanged();
    partial void OnCoverChanging(string value);
    partial void OnCoverChanged();
    partial void OnHeaderChanging(string value);
    partial void OnHeaderChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnBibliographicChanging(string value);
    partial void OnBibliographicChanged();
    partial void OnYearChanging(System.Nullable<int> value);
    partial void OnYearChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnTeaserChanging(string value);
    partial void OnTeaserChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnChangedDateChanging(System.DateTime value);
    partial void OnChangedDateChanged();
    partial void OnModeratedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModeratedDateChanged();
    partial void OnTotalLikesChanging(int value);
    partial void OnTotalLikesChanged();
    #endregion
		
		public Publication()
		{
			this._PublicationAccesses = new EntitySet<PublicationAccess>(new Action<PublicationAccess>(this.attach_PublicationAccesses), new Action<PublicationAccess>(this.detach_PublicationAccesses));
			this._PublicationSubjects = new EntitySet<PublicationSubject>(new Action<PublicationSubject>(this.attach_PublicationSubjects), new Action<PublicationSubject>(this.detach_PublicationSubjects));
			this._PublicationComments = new EntitySet<PublicationComment>(new Action<PublicationComment>(this.attach_PublicationComments), new Action<PublicationComment>(this.detach_PublicationComments));
			this._PublicationFiles = new EntitySet<PublicationFile>(new Action<PublicationFile>(this.attach_PublicationFiles), new Action<PublicationFile>(this.detach_PublicationFiles));
			this._PublicationLikes = new EntitySet<PublicationLike>(new Action<PublicationLike>(this.attach_PublicationLikes), new Action<PublicationLike>(this.detach_PublicationLikes));
			this._PublicationLinks = new EntitySet<PublicationLink>(new Action<PublicationLink>(this.attach_PublicationLinks), new Action<PublicationLink>(this.detach_PublicationLinks));
			this._PublicationOrganizations = new EntitySet<PublicationOrganization>(new Action<PublicationOrganization>(this.attach_PublicationOrganizations), new Action<PublicationOrganization>(this.detach_PublicationOrganizations));
			this._PublicationPersons = new EntitySet<PublicationPerson>(new Action<PublicationPerson>(this.attach_PublicationPersons), new Action<PublicationPerson>(this.detach_PublicationPersons));
			this._PublicationRegions = new EntitySet<PublicationRegion>(new Action<PublicationRegion>(this.attach_PublicationRegions), new Action<PublicationRegion>(this.detach_PublicationRegions));
			this._PublicationRecordRedirects = new EntitySet<PublicationRecordRedirect>(new Action<PublicationRecordRedirect>(this.attach_PublicationRecordRedirects), new Action<PublicationRecordRedirect>(this.detach_PublicationRecordRedirects));
			this._Publications = new EntitySet<Publication>(new Action<Publication>(this.attach_Publications), new Action<Publication>(this.detach_Publications));
			this._PublicationSubscriptions = new EntitySet<PublicationSubscription>(new Action<PublicationSubscription>(this.attach_PublicationSubscriptions), new Action<PublicationSubscription>(this.detach_PublicationSubscriptions));
			this._Publication1 = default(EntityRef<Publication>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int")]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._Publication1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cover", DbType="NVarChar(150)")]
		public string Cover
		{
			get
			{
				return this._Cover;
			}
			set
			{
				if ((this._Cover != value))
				{
					this.OnCoverChanging(value);
					this.SendPropertyChanging();
					this._Cover = value;
					this.SendPropertyChanged("Cover");
					this.OnCoverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Header", DbType="NVarChar(2000) NOT NULL", CanBeNull=false)]
		public string Header
		{
			get
			{
				return this._Header;
			}
			set
			{
				if ((this._Header != value))
				{
					this.OnHeaderChanging(value);
					this.SendPropertyChanging();
					this._Header = value;
					this.SendPropertyChanged("Header");
					this.OnHeaderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(2000) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bibliographic", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Bibliographic
		{
			get
			{
				return this._Bibliographic;
			}
			set
			{
				if ((this._Bibliographic != value))
				{
					this.OnBibliographicChanging(value);
					this.SendPropertyChanging();
					this._Bibliographic = value;
					this.SendPropertyChanged("Bibliographic");
					this.OnBibliographicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int")]
		public System.Nullable<int> Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Teaser", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Teaser
		{
			get
			{
				return this._Teaser;
			}
			set
			{
				if ((this._Teaser != value))
				{
					this.OnTeaserChanging(value);
					this.SendPropertyChanging();
					this._Teaser = value;
					this.SendPropertyChanged("Teaser");
					this.OnTeaserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChangedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ChangedDate
		{
			get
			{
				return this._ChangedDate;
			}
			set
			{
				if ((this._ChangedDate != value))
				{
					this.OnChangedDateChanging(value);
					this.SendPropertyChanging();
					this._ChangedDate = value;
					this.SendPropertyChanged("ChangedDate");
					this.OnChangedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModeratedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModeratedDate
		{
			get
			{
				return this._ModeratedDate;
			}
			set
			{
				if ((this._ModeratedDate != value))
				{
					this.OnModeratedDateChanging(value);
					this.SendPropertyChanging();
					this._ModeratedDate = value;
					this.SendPropertyChanged("ModeratedDate");
					this.OnModeratedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalLikes", DbType="Int NOT NULL")]
		public int TotalLikes
		{
			get
			{
				return this._TotalLikes;
			}
			set
			{
				if ((this._TotalLikes != value))
				{
					this.OnTotalLikesChanging(value);
					this.SendPropertyChanging();
					this._TotalLikes = value;
					this.SendPropertyChanged("TotalLikes");
					this.OnTotalLikesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publication_PublicationAccess", Storage="_PublicationAccesses", ThisKey="ID", OtherKey="PublicationID")]
		public EntitySet<PublicationAccess> PublicationAccesses
		{
			get
			{
				return this._PublicationAccesses;
			}
			set
			{
				this._PublicationAccesses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publication_PublicationSubject", Storage="_PublicationSubjects", ThisKey="ID", OtherKey="PublicationID")]
		public EntitySet<PublicationSubject> PublicationSubjects
		{
			get
			{
				return this._PublicationSubjects;
			}
			set
			{
				this._PublicationSubjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publication_PublicationComment", Storage="_PublicationComments", ThisKey="ID", OtherKey="PublicationID")]
		public EntitySet<PublicationComment> PublicationComments
		{
			get
			{
				return this._PublicationComments;
			}
			set
			{
				this._PublicationComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publication_PublicationFile", Storage="_PublicationFiles", ThisKey="ID", OtherKey="PublicationID")]
		public EntitySet<PublicationFile> PublicationFiles
		{
			get
			{
				return this._PublicationFiles;
			}
			set
			{
				this._PublicationFiles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publication_PublicationLike", Storage="_PublicationLikes", ThisKey="ID", OtherKey="PublicationID")]
		public EntitySet<PublicationLike> PublicationLikes
		{
			get
			{
				return this._PublicationLikes;
			}
			set
			{
				this._PublicationLikes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publication_PublicationLink", Storage="_PublicationLinks", ThisKey="ID", OtherKey="PublicationID")]
		public EntitySet<PublicationLink> PublicationLinks
		{
			get
			{
				return this._PublicationLinks;
			}
			set
			{
				this._PublicationLinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publication_PublicationOrganization", Storage="_PublicationOrganizations", ThisKey="ID", OtherKey="PublicationID")]
		public EntitySet<PublicationOrganization> PublicationOrganizations
		{
			get
			{
				return this._PublicationOrganizations;
			}
			set
			{
				this._PublicationOrganizations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publication_PublicationPerson", Storage="_PublicationPersons", ThisKey="ID", OtherKey="PublicationID")]
		public EntitySet<PublicationPerson> PublicationPersons
		{
			get
			{
				return this._PublicationPersons;
			}
			set
			{
				this._PublicationPersons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publication_PublicationRegion", Storage="_PublicationRegions", ThisKey="ID", OtherKey="PublicationID")]
		public EntitySet<PublicationRegion> PublicationRegions
		{
			get
			{
				return this._PublicationRegions;
			}
			set
			{
				this._PublicationRegions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publication_PublicationRecordRedirect", Storage="_PublicationRecordRedirects", ThisKey="ID", OtherKey="PublicationID")]
		public EntitySet<PublicationRecordRedirect> PublicationRecordRedirects
		{
			get
			{
				return this._PublicationRecordRedirects;
			}
			set
			{
				this._PublicationRecordRedirects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publication_Publication", Storage="_Publications", ThisKey="ID", OtherKey="ParentID")]
		public EntitySet<Publication> Publications
		{
			get
			{
				return this._Publications;
			}
			set
			{
				this._Publications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publication_PublicationSubscription", Storage="_PublicationSubscriptions", ThisKey="ID", OtherKey="PublicationID")]
		public EntitySet<PublicationSubscription> PublicationSubscriptions
		{
			get
			{
				return this._PublicationSubscriptions;
			}
			set
			{
				this._PublicationSubscriptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publication_Publication", Storage="_Publication1", ThisKey="ParentID", OtherKey="ID", IsForeignKey=true)]
		public Publication Publication1
		{
			get
			{
				return this._Publication1.Entity;
			}
			set
			{
				Publication previousValue = this._Publication1.Entity;
				if (((previousValue != value) 
							|| (this._Publication1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Publication1.Entity = null;
						previousValue.Publications.Remove(this);
					}
					this._Publication1.Entity = value;
					if ((value != null))
					{
						value.Publications.Add(this);
						this._ParentID = value.ID;
					}
					else
					{
						this._ParentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Publication1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Publication", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Publications.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Publications.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PublicationAccesses(PublicationAccess entity)
		{
			this.SendPropertyChanging();
			entity.Publication = this;
		}
		
		private void detach_PublicationAccesses(PublicationAccess entity)
		{
			this.SendPropertyChanging();
			entity.Publication = null;
		}
		
		private void attach_PublicationSubjects(PublicationSubject entity)
		{
			this.SendPropertyChanging();
			entity.Publication = this;
		}
		
		private void detach_PublicationSubjects(PublicationSubject entity)
		{
			this.SendPropertyChanging();
			entity.Publication = null;
		}
		
		private void attach_PublicationComments(PublicationComment entity)
		{
			this.SendPropertyChanging();
			entity.Publication = this;
		}
		
		private void detach_PublicationComments(PublicationComment entity)
		{
			this.SendPropertyChanging();
			entity.Publication = null;
		}
		
		private void attach_PublicationFiles(PublicationFile entity)
		{
			this.SendPropertyChanging();
			entity.Publication = this;
		}
		
		private void detach_PublicationFiles(PublicationFile entity)
		{
			this.SendPropertyChanging();
			entity.Publication = null;
		}
		
		private void attach_PublicationLikes(PublicationLike entity)
		{
			this.SendPropertyChanging();
			entity.Publication = this;
		}
		
		private void detach_PublicationLikes(PublicationLike entity)
		{
			this.SendPropertyChanging();
			entity.Publication = null;
		}
		
		private void attach_PublicationLinks(PublicationLink entity)
		{
			this.SendPropertyChanging();
			entity.Publication = this;
		}
		
		private void detach_PublicationLinks(PublicationLink entity)
		{
			this.SendPropertyChanging();
			entity.Publication = null;
		}
		
		private void attach_PublicationOrganizations(PublicationOrganization entity)
		{
			this.SendPropertyChanging();
			entity.Publication = this;
		}
		
		private void detach_PublicationOrganizations(PublicationOrganization entity)
		{
			this.SendPropertyChanging();
			entity.Publication = null;
		}
		
		private void attach_PublicationPersons(PublicationPerson entity)
		{
			this.SendPropertyChanging();
			entity.Publication = this;
		}
		
		private void detach_PublicationPersons(PublicationPerson entity)
		{
			this.SendPropertyChanging();
			entity.Publication = null;
		}
		
		private void attach_PublicationRegions(PublicationRegion entity)
		{
			this.SendPropertyChanging();
			entity.Publication = this;
		}
		
		private void detach_PublicationRegions(PublicationRegion entity)
		{
			this.SendPropertyChanging();
			entity.Publication = null;
		}
		
		private void attach_PublicationRecordRedirects(PublicationRecordRedirect entity)
		{
			this.SendPropertyChanging();
			entity.Publication = this;
		}
		
		private void detach_PublicationRecordRedirects(PublicationRecordRedirect entity)
		{
			this.SendPropertyChanging();
			entity.Publication = null;
		}
		
		private void attach_Publications(Publication entity)
		{
			this.SendPropertyChanging();
			entity.Publication1 = this;
		}
		
		private void detach_Publications(Publication entity)
		{
			this.SendPropertyChanging();
			entity.Publication1 = null;
		}
		
		private void attach_PublicationSubscriptions(PublicationSubscription entity)
		{
			this.SendPropertyChanging();
			entity.Publication = this;
		}
		
		private void detach_PublicationSubscriptions(PublicationSubscription entity)
		{
			this.SendPropertyChanging();
			entity.Publication = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Region")]
	public partial class Region : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _ParentID;
		
		private string _Name;
		
		private string _Url;
		
		private int _OrderBy;
		
		private string _Map;
		
		private string _Description;
		
		private string _Link;
		
		private bool _HasEntry;
		
		private EntitySet<BlogPostRegion> _BlogPostRegions;
		
		private EntitySet<EventRegion> _EventRegions;
		
		private EntitySet<ImageRegion> _ImageRegions;
		
		private EntitySet<OrganizationRegion> _OrganizationRegions;
		
		private EntitySet<PublicationRegion> _PublicationRegions;
		
		private EntitySet<StudyMaterialRegion> _StudyMaterialRegions;
		
		private EntitySet<WebLinkRegion> _WebLinkRegions;
		
		private EntitySet<PersonRegion> _PersonRegions;
		
		private EntitySet<DocumentRegion> _DocumentRegions;
		
		private EntitySet<Region> _Regions;
		
		private EntityRef<Region> _Region1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnParentIDChanging(System.Nullable<int> value);
    partial void OnParentIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnOrderByChanging(int value);
    partial void OnOrderByChanged();
    partial void OnMapChanging(string value);
    partial void OnMapChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnLinkChanging(string value);
    partial void OnLinkChanged();
    partial void OnHasEntryChanging(bool value);
    partial void OnHasEntryChanged();
    #endregion
		
		public Region()
		{
			this._BlogPostRegions = new EntitySet<BlogPostRegion>(new Action<BlogPostRegion>(this.attach_BlogPostRegions), new Action<BlogPostRegion>(this.detach_BlogPostRegions));
			this._EventRegions = new EntitySet<EventRegion>(new Action<EventRegion>(this.attach_EventRegions), new Action<EventRegion>(this.detach_EventRegions));
			this._ImageRegions = new EntitySet<ImageRegion>(new Action<ImageRegion>(this.attach_ImageRegions), new Action<ImageRegion>(this.detach_ImageRegions));
			this._OrganizationRegions = new EntitySet<OrganizationRegion>(new Action<OrganizationRegion>(this.attach_OrganizationRegions), new Action<OrganizationRegion>(this.detach_OrganizationRegions));
			this._PublicationRegions = new EntitySet<PublicationRegion>(new Action<PublicationRegion>(this.attach_PublicationRegions), new Action<PublicationRegion>(this.detach_PublicationRegions));
			this._StudyMaterialRegions = new EntitySet<StudyMaterialRegion>(new Action<StudyMaterialRegion>(this.attach_StudyMaterialRegions), new Action<StudyMaterialRegion>(this.detach_StudyMaterialRegions));
			this._WebLinkRegions = new EntitySet<WebLinkRegion>(new Action<WebLinkRegion>(this.attach_WebLinkRegions), new Action<WebLinkRegion>(this.detach_WebLinkRegions));
			this._PersonRegions = new EntitySet<PersonRegion>(new Action<PersonRegion>(this.attach_PersonRegions), new Action<PersonRegion>(this.detach_PersonRegions));
			this._DocumentRegions = new EntitySet<DocumentRegion>(new Action<DocumentRegion>(this.attach_DocumentRegions), new Action<DocumentRegion>(this.detach_DocumentRegions));
			this._Regions = new EntitySet<Region>(new Action<Region>(this.attach_Regions), new Action<Region>(this.detach_Regions));
			this._Region1 = default(EntityRef<Region>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int")]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._Region1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderBy", DbType="Int NOT NULL")]
		public int OrderBy
		{
			get
			{
				return this._OrderBy;
			}
			set
			{
				if ((this._OrderBy != value))
				{
					this.OnOrderByChanging(value);
					this.SendPropertyChanging();
					this._OrderBy = value;
					this.SendPropertyChanged("OrderBy");
					this.OnOrderByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Map", DbType="NVarChar(MAX)")]
		public string Map
		{
			get
			{
				return this._Map;
			}
			set
			{
				if ((this._Map != value))
				{
					this.OnMapChanging(value);
					this.SendPropertyChanging();
					this._Map = value;
					this.SendPropertyChanged("Map");
					this.OnMapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Link", DbType="NVarChar(500)")]
		public string Link
		{
			get
			{
				return this._Link;
			}
			set
			{
				if ((this._Link != value))
				{
					this.OnLinkChanging(value);
					this.SendPropertyChanging();
					this._Link = value;
					this.SendPropertyChanged("Link");
					this.OnLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasEntry", DbType="Bit NOT NULL")]
		public bool HasEntry
		{
			get
			{
				return this._HasEntry;
			}
			set
			{
				if ((this._HasEntry != value))
				{
					this.OnHasEntryChanging(value);
					this.SendPropertyChanging();
					this._HasEntry = value;
					this.SendPropertyChanged("HasEntry");
					this.OnHasEntryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_BlogPostRegion", Storage="_BlogPostRegions", ThisKey="ID", OtherKey="RegionID")]
		public EntitySet<BlogPostRegion> BlogPostRegions
		{
			get
			{
				return this._BlogPostRegions;
			}
			set
			{
				this._BlogPostRegions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_EventRegion", Storage="_EventRegions", ThisKey="ID", OtherKey="RegionID")]
		public EntitySet<EventRegion> EventRegions
		{
			get
			{
				return this._EventRegions;
			}
			set
			{
				this._EventRegions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_ImageRegion", Storage="_ImageRegions", ThisKey="ID", OtherKey="RegionID")]
		public EntitySet<ImageRegion> ImageRegions
		{
			get
			{
				return this._ImageRegions;
			}
			set
			{
				this._ImageRegions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_OrganizationRegion", Storage="_OrganizationRegions", ThisKey="ID", OtherKey="RegionID")]
		public EntitySet<OrganizationRegion> OrganizationRegions
		{
			get
			{
				return this._OrganizationRegions;
			}
			set
			{
				this._OrganizationRegions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_PublicationRegion", Storage="_PublicationRegions", ThisKey="ID", OtherKey="RegionID")]
		public EntitySet<PublicationRegion> PublicationRegions
		{
			get
			{
				return this._PublicationRegions;
			}
			set
			{
				this._PublicationRegions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_StudyMaterialRegion", Storage="_StudyMaterialRegions", ThisKey="ID", OtherKey="RegionID")]
		public EntitySet<StudyMaterialRegion> StudyMaterialRegions
		{
			get
			{
				return this._StudyMaterialRegions;
			}
			set
			{
				this._StudyMaterialRegions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_WebLinkRegion", Storage="_WebLinkRegions", ThisKey="ID", OtherKey="RegionID")]
		public EntitySet<WebLinkRegion> WebLinkRegions
		{
			get
			{
				return this._WebLinkRegions;
			}
			set
			{
				this._WebLinkRegions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_PersonRegion", Storage="_PersonRegions", ThisKey="ID", OtherKey="RegionID")]
		public EntitySet<PersonRegion> PersonRegions
		{
			get
			{
				return this._PersonRegions;
			}
			set
			{
				this._PersonRegions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_DocumentRegion", Storage="_DocumentRegions", ThisKey="ID", OtherKey="RegionID")]
		public EntitySet<DocumentRegion> DocumentRegions
		{
			get
			{
				return this._DocumentRegions;
			}
			set
			{
				this._DocumentRegions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_Region", Storage="_Regions", ThisKey="ID", OtherKey="ParentID")]
		public EntitySet<Region> Regions
		{
			get
			{
				return this._Regions;
			}
			set
			{
				this._Regions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_Region", Storage="_Region1", ThisKey="ParentID", OtherKey="ID", IsForeignKey=true)]
		public Region Region1
		{
			get
			{
				return this._Region1.Entity;
			}
			set
			{
				Region previousValue = this._Region1.Entity;
				if (((previousValue != value) 
							|| (this._Region1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Region1.Entity = null;
						previousValue.Regions.Remove(this);
					}
					this._Region1.Entity = value;
					if ((value != null))
					{
						value.Regions.Add(this);
						this._ParentID = value.ID;
					}
					else
					{
						this._ParentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Region1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BlogPostRegions(BlogPostRegion entity)
		{
			this.SendPropertyChanging();
			entity.Region = this;
		}
		
		private void detach_BlogPostRegions(BlogPostRegion entity)
		{
			this.SendPropertyChanging();
			entity.Region = null;
		}
		
		private void attach_EventRegions(EventRegion entity)
		{
			this.SendPropertyChanging();
			entity.Region = this;
		}
		
		private void detach_EventRegions(EventRegion entity)
		{
			this.SendPropertyChanging();
			entity.Region = null;
		}
		
		private void attach_ImageRegions(ImageRegion entity)
		{
			this.SendPropertyChanging();
			entity.Region = this;
		}
		
		private void detach_ImageRegions(ImageRegion entity)
		{
			this.SendPropertyChanging();
			entity.Region = null;
		}
		
		private void attach_OrganizationRegions(OrganizationRegion entity)
		{
			this.SendPropertyChanging();
			entity.Region = this;
		}
		
		private void detach_OrganizationRegions(OrganizationRegion entity)
		{
			this.SendPropertyChanging();
			entity.Region = null;
		}
		
		private void attach_PublicationRegions(PublicationRegion entity)
		{
			this.SendPropertyChanging();
			entity.Region = this;
		}
		
		private void detach_PublicationRegions(PublicationRegion entity)
		{
			this.SendPropertyChanging();
			entity.Region = null;
		}
		
		private void attach_StudyMaterialRegions(StudyMaterialRegion entity)
		{
			this.SendPropertyChanging();
			entity.Region = this;
		}
		
		private void detach_StudyMaterialRegions(StudyMaterialRegion entity)
		{
			this.SendPropertyChanging();
			entity.Region = null;
		}
		
		private void attach_WebLinkRegions(WebLinkRegion entity)
		{
			this.SendPropertyChanging();
			entity.Region = this;
		}
		
		private void detach_WebLinkRegions(WebLinkRegion entity)
		{
			this.SendPropertyChanging();
			entity.Region = null;
		}
		
		private void attach_PersonRegions(PersonRegion entity)
		{
			this.SendPropertyChanging();
			entity.Region = this;
		}
		
		private void detach_PersonRegions(PersonRegion entity)
		{
			this.SendPropertyChanging();
			entity.Region = null;
		}
		
		private void attach_DocumentRegions(DocumentRegion entity)
		{
			this.SendPropertyChanging();
			entity.Region = this;
		}
		
		private void detach_DocumentRegions(DocumentRegion entity)
		{
			this.SendPropertyChanging();
			entity.Region = null;
		}
		
		private void attach_Regions(Region entity)
		{
			this.SendPropertyChanging();
			entity.Region1 = this;
		}
		
		private void detach_Regions(Region entity)
		{
			this.SendPropertyChanging();
			entity.Region1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BlogPost")]
	public partial class BlogPost : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _BlogID;
		
		private System.Nullable<int> _LinkID;
		
		private string _Header;
		
		private string _Url;
		
		private string _Content;
		
		private System.DateTime _AddedDate;
		
		private System.DateTime _ChangedDate;
		
		private string _Source;
		
		private int _TotalLikes;
		
		private EntitySet<BlogPostComment> _BlogPostComments;
		
		private EntitySet<BlogPostSubject> _BlogPostSubjects;
		
		private EntitySet<BlogPostEvent> _BlogPostEvents;
		
		private EntitySet<BlogPostOrganization> _BlogPostOrganizations;
		
		private EntitySet<BlogPostPerson> _BlogPostPersons;
		
		private EntitySet<BlogPostRegion> _BlogPostRegions;
		
		private EntitySet<BlogPostRecordRedirect> _BlogPostRecordRedirects;
		
		private EntitySet<BlogPostSubscription> _BlogPostSubscriptions;
		
		private EntitySet<BlogPostLike> _BlogPostLikes;
		
		private EntityRef<Blog> _Blog;
		
		private EntityRef<Link> _Link;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnBlogIDChanging(int value);
    partial void OnBlogIDChanged();
    partial void OnLinkIDChanging(System.Nullable<int> value);
    partial void OnLinkIDChanged();
    partial void OnHeaderChanging(string value);
    partial void OnHeaderChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnChangedDateChanging(System.DateTime value);
    partial void OnChangedDateChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    partial void OnTotalLikesChanging(int value);
    partial void OnTotalLikesChanged();
    #endregion
		
		public BlogPost()
		{
			this._BlogPostComments = new EntitySet<BlogPostComment>(new Action<BlogPostComment>(this.attach_BlogPostComments), new Action<BlogPostComment>(this.detach_BlogPostComments));
			this._BlogPostSubjects = new EntitySet<BlogPostSubject>(new Action<BlogPostSubject>(this.attach_BlogPostSubjects), new Action<BlogPostSubject>(this.detach_BlogPostSubjects));
			this._BlogPostEvents = new EntitySet<BlogPostEvent>(new Action<BlogPostEvent>(this.attach_BlogPostEvents), new Action<BlogPostEvent>(this.detach_BlogPostEvents));
			this._BlogPostOrganizations = new EntitySet<BlogPostOrganization>(new Action<BlogPostOrganization>(this.attach_BlogPostOrganizations), new Action<BlogPostOrganization>(this.detach_BlogPostOrganizations));
			this._BlogPostPersons = new EntitySet<BlogPostPerson>(new Action<BlogPostPerson>(this.attach_BlogPostPersons), new Action<BlogPostPerson>(this.detach_BlogPostPersons));
			this._BlogPostRegions = new EntitySet<BlogPostRegion>(new Action<BlogPostRegion>(this.attach_BlogPostRegions), new Action<BlogPostRegion>(this.detach_BlogPostRegions));
			this._BlogPostRecordRedirects = new EntitySet<BlogPostRecordRedirect>(new Action<BlogPostRecordRedirect>(this.attach_BlogPostRecordRedirects), new Action<BlogPostRecordRedirect>(this.detach_BlogPostRecordRedirects));
			this._BlogPostSubscriptions = new EntitySet<BlogPostSubscription>(new Action<BlogPostSubscription>(this.attach_BlogPostSubscriptions), new Action<BlogPostSubscription>(this.detach_BlogPostSubscriptions));
			this._BlogPostLikes = new EntitySet<BlogPostLike>(new Action<BlogPostLike>(this.attach_BlogPostLikes), new Action<BlogPostLike>(this.detach_BlogPostLikes));
			this._Blog = default(EntityRef<Blog>);
			this._Link = default(EntityRef<Link>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlogID", DbType="Int NOT NULL")]
		public int BlogID
		{
			get
			{
				return this._BlogID;
			}
			set
			{
				if ((this._BlogID != value))
				{
					if (this._Blog.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogIDChanging(value);
					this.SendPropertyChanging();
					this._BlogID = value;
					this.SendPropertyChanged("BlogID");
					this.OnBlogIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkID", DbType="Int")]
		public System.Nullable<int> LinkID
		{
			get
			{
				return this._LinkID;
			}
			set
			{
				if ((this._LinkID != value))
				{
					if (this._Link.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLinkIDChanging(value);
					this.SendPropertyChanging();
					this._LinkID = value;
					this.SendPropertyChanged("LinkID");
					this.OnLinkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Header", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Header
		{
			get
			{
				return this._Header;
			}
			set
			{
				if ((this._Header != value))
				{
					this.OnHeaderChanging(value);
					this.SendPropertyChanging();
					this._Header = value;
					this.SendPropertyChanged("Header");
					this.OnHeaderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChangedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ChangedDate
		{
			get
			{
				return this._ChangedDate;
			}
			set
			{
				if ((this._ChangedDate != value))
				{
					this.OnChangedDateChanging(value);
					this.SendPropertyChanging();
					this._ChangedDate = value;
					this.SendPropertyChanged("ChangedDate");
					this.OnChangedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="NVarChar(500)")]
		public string Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalLikes", DbType="Int NOT NULL")]
		public int TotalLikes
		{
			get
			{
				return this._TotalLikes;
			}
			set
			{
				if ((this._TotalLikes != value))
				{
					this.OnTotalLikesChanging(value);
					this.SendPropertyChanging();
					this._TotalLikes = value;
					this.SendPropertyChanged("TotalLikes");
					this.OnTotalLikesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogPost_BlogPostComment", Storage="_BlogPostComments", ThisKey="ID", OtherKey="BlogPostID")]
		public EntitySet<BlogPostComment> BlogPostComments
		{
			get
			{
				return this._BlogPostComments;
			}
			set
			{
				this._BlogPostComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogPost_BlogPostSubject", Storage="_BlogPostSubjects", ThisKey="ID", OtherKey="BlogPostID")]
		public EntitySet<BlogPostSubject> BlogPostSubjects
		{
			get
			{
				return this._BlogPostSubjects;
			}
			set
			{
				this._BlogPostSubjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogPost_BlogPostEvent", Storage="_BlogPostEvents", ThisKey="ID", OtherKey="BlogPostID")]
		public EntitySet<BlogPostEvent> BlogPostEvents
		{
			get
			{
				return this._BlogPostEvents;
			}
			set
			{
				this._BlogPostEvents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogPost_BlogPostOrganization", Storage="_BlogPostOrganizations", ThisKey="ID", OtherKey="BlogPostID")]
		public EntitySet<BlogPostOrganization> BlogPostOrganizations
		{
			get
			{
				return this._BlogPostOrganizations;
			}
			set
			{
				this._BlogPostOrganizations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogPost_BlogPostPerson", Storage="_BlogPostPersons", ThisKey="ID", OtherKey="BlogPostID")]
		public EntitySet<BlogPostPerson> BlogPostPersons
		{
			get
			{
				return this._BlogPostPersons;
			}
			set
			{
				this._BlogPostPersons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogPost_BlogPostRegion", Storage="_BlogPostRegions", ThisKey="ID", OtherKey="BlogPostID")]
		public EntitySet<BlogPostRegion> BlogPostRegions
		{
			get
			{
				return this._BlogPostRegions;
			}
			set
			{
				this._BlogPostRegions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogPost_BlogPostRecordRedirect", Storage="_BlogPostRecordRedirects", ThisKey="ID", OtherKey="BlogPostID")]
		public EntitySet<BlogPostRecordRedirect> BlogPostRecordRedirects
		{
			get
			{
				return this._BlogPostRecordRedirects;
			}
			set
			{
				this._BlogPostRecordRedirects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogPost_BlogPostSubscription", Storage="_BlogPostSubscriptions", ThisKey="ID", OtherKey="BlogPostID")]
		public EntitySet<BlogPostSubscription> BlogPostSubscriptions
		{
			get
			{
				return this._BlogPostSubscriptions;
			}
			set
			{
				this._BlogPostSubscriptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogPost_BlogPostLike", Storage="_BlogPostLikes", ThisKey="ID", OtherKey="BlogPostID")]
		public EntitySet<BlogPostLike> BlogPostLikes
		{
			get
			{
				return this._BlogPostLikes;
			}
			set
			{
				this._BlogPostLikes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Blog_BlogPost", Storage="_Blog", ThisKey="BlogID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Blog Blog
		{
			get
			{
				return this._Blog.Entity;
			}
			set
			{
				Blog previousValue = this._Blog.Entity;
				if (((previousValue != value) 
							|| (this._Blog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Blog.Entity = null;
						previousValue.BlogPosts.Remove(this);
					}
					this._Blog.Entity = value;
					if ((value != null))
					{
						value.BlogPosts.Add(this);
						this._BlogID = value.ID;
					}
					else
					{
						this._BlogID = default(int);
					}
					this.SendPropertyChanged("Blog");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Link_BlogPost", Storage="_Link", ThisKey="LinkID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Link Link
		{
			get
			{
				return this._Link.Entity;
			}
			set
			{
				Link previousValue = this._Link.Entity;
				if (((previousValue != value) 
							|| (this._Link.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Link.Entity = null;
						previousValue.BlogPosts.Remove(this);
					}
					this._Link.Entity = value;
					if ((value != null))
					{
						value.BlogPosts.Add(this);
						this._LinkID = value.ID;
					}
					else
					{
						this._LinkID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Link");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BlogPostComments(BlogPostComment entity)
		{
			this.SendPropertyChanging();
			entity.BlogPost = this;
		}
		
		private void detach_BlogPostComments(BlogPostComment entity)
		{
			this.SendPropertyChanging();
			entity.BlogPost = null;
		}
		
		private void attach_BlogPostSubjects(BlogPostSubject entity)
		{
			this.SendPropertyChanging();
			entity.BlogPost = this;
		}
		
		private void detach_BlogPostSubjects(BlogPostSubject entity)
		{
			this.SendPropertyChanging();
			entity.BlogPost = null;
		}
		
		private void attach_BlogPostEvents(BlogPostEvent entity)
		{
			this.SendPropertyChanging();
			entity.BlogPost = this;
		}
		
		private void detach_BlogPostEvents(BlogPostEvent entity)
		{
			this.SendPropertyChanging();
			entity.BlogPost = null;
		}
		
		private void attach_BlogPostOrganizations(BlogPostOrganization entity)
		{
			this.SendPropertyChanging();
			entity.BlogPost = this;
		}
		
		private void detach_BlogPostOrganizations(BlogPostOrganization entity)
		{
			this.SendPropertyChanging();
			entity.BlogPost = null;
		}
		
		private void attach_BlogPostPersons(BlogPostPerson entity)
		{
			this.SendPropertyChanging();
			entity.BlogPost = this;
		}
		
		private void detach_BlogPostPersons(BlogPostPerson entity)
		{
			this.SendPropertyChanging();
			entity.BlogPost = null;
		}
		
		private void attach_BlogPostRegions(BlogPostRegion entity)
		{
			this.SendPropertyChanging();
			entity.BlogPost = this;
		}
		
		private void detach_BlogPostRegions(BlogPostRegion entity)
		{
			this.SendPropertyChanging();
			entity.BlogPost = null;
		}
		
		private void attach_BlogPostRecordRedirects(BlogPostRecordRedirect entity)
		{
			this.SendPropertyChanging();
			entity.BlogPost = this;
		}
		
		private void detach_BlogPostRecordRedirects(BlogPostRecordRedirect entity)
		{
			this.SendPropertyChanging();
			entity.BlogPost = null;
		}
		
		private void attach_BlogPostSubscriptions(BlogPostSubscription entity)
		{
			this.SendPropertyChanging();
			entity.BlogPost = this;
		}
		
		private void detach_BlogPostSubscriptions(BlogPostSubscription entity)
		{
			this.SendPropertyChanging();
			entity.BlogPost = null;
		}
		
		private void attach_BlogPostLikes(BlogPostLike entity)
		{
			this.SendPropertyChanging();
			entity.BlogPost = this;
		}
		
		private void detach_BlogPostLikes(BlogPostLike entity)
		{
			this.SendPropertyChanging();
			entity.BlogPost = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PublicationSubscription")]
	public partial class PublicationSubscription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PublicationID;
		
		private int _UserID;
		
		private EntityRef<Publication> _Publication;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPublicationIDChanging(int value);
    partial void OnPublicationIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public PublicationSubscription()
		{
			this._Publication = default(EntityRef<Publication>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublicationID", DbType="Int NOT NULL")]
		public int PublicationID
		{
			get
			{
				return this._PublicationID;
			}
			set
			{
				if ((this._PublicationID != value))
				{
					if (this._Publication.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPublicationIDChanging(value);
					this.SendPropertyChanging();
					this._PublicationID = value;
					this.SendPropertyChanged("PublicationID");
					this.OnPublicationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publication_PublicationSubscription", Storage="_Publication", ThisKey="PublicationID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Publication Publication
		{
			get
			{
				return this._Publication.Entity;
			}
			set
			{
				Publication previousValue = this._Publication.Entity;
				if (((previousValue != value) 
							|| (this._Publication.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Publication.Entity = null;
						previousValue.PublicationSubscriptions.Remove(this);
					}
					this._Publication.Entity = value;
					if ((value != null))
					{
						value.PublicationSubscriptions.Add(this);
						this._PublicationID = value.ID;
					}
					else
					{
						this._PublicationID = default(int);
					}
					this.SendPropertyChanged("Publication");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PublicationSubscription", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.PublicationSubscriptions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.PublicationSubscriptions.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventSubscription")]
	public partial class EventSubscription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _EventID;
		
		private int _UserID;
		
		private EntityRef<User> _User;
		
		private EntityRef<Event> _Event;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public EventSubscription()
		{
			this._User = default(EntityRef<User>);
			this._Event = default(EntityRef<Event>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", DbType="Int NOT NULL")]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_EventSubscription", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.EventSubscriptions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.EventSubscriptions.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventSubscription", Storage="_Event", ThisKey="EventID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.EventSubscriptions.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.EventSubscriptions.Add(this);
						this._EventID = value.ID;
					}
					else
					{
						this._EventID = default(int);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ImageSubscription")]
	public partial class ImageSubscription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ImageID;
		
		private int _UserID;
		
		private EntityRef<Image> _Image;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnImageIDChanging(int value);
    partial void OnImageIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public ImageSubscription()
		{
			this._Image = default(EntityRef<Image>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageID", DbType="Int NOT NULL")]
		public int ImageID
		{
			get
			{
				return this._ImageID;
			}
			set
			{
				if ((this._ImageID != value))
				{
					if (this._Image.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnImageIDChanging(value);
					this.SendPropertyChanging();
					this._ImageID = value;
					this.SendPropertyChanged("ImageID");
					this.OnImageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Image_ImageSubscription", Storage="_Image", ThisKey="ImageID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Image Image
		{
			get
			{
				return this._Image.Entity;
			}
			set
			{
				Image previousValue = this._Image.Entity;
				if (((previousValue != value) 
							|| (this._Image.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Image.Entity = null;
						previousValue.ImageSubscriptions.Remove(this);
					}
					this._Image.Entity = value;
					if ((value != null))
					{
						value.ImageSubscriptions.Add(this);
						this._ImageID = value.ID;
					}
					else
					{
						this._ImageID = default(int);
					}
					this.SendPropertyChanged("Image");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ImageSubscription", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ImageSubscriptions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ImageSubscriptions.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BlogPostSubscription")]
	public partial class BlogPostSubscription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _BlogPostID;
		
		private int _UserID;
		
		private EntityRef<BlogPost> _BlogPost;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnBlogPostIDChanging(int value);
    partial void OnBlogPostIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public BlogPostSubscription()
		{
			this._BlogPost = default(EntityRef<BlogPost>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlogPostID", DbType="Int NOT NULL")]
		public int BlogPostID
		{
			get
			{
				return this._BlogPostID;
			}
			set
			{
				if ((this._BlogPostID != value))
				{
					if (this._BlogPost.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogPostIDChanging(value);
					this.SendPropertyChanging();
					this._BlogPostID = value;
					this.SendPropertyChanged("BlogPostID");
					this.OnBlogPostIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogPost_BlogPostSubscription", Storage="_BlogPost", ThisKey="BlogPostID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public BlogPost BlogPost
		{
			get
			{
				return this._BlogPost.Entity;
			}
			set
			{
				BlogPost previousValue = this._BlogPost.Entity;
				if (((previousValue != value) 
							|| (this._BlogPost.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BlogPost.Entity = null;
						previousValue.BlogPostSubscriptions.Remove(this);
					}
					this._BlogPost.Entity = value;
					if ((value != null))
					{
						value.BlogPostSubscriptions.Add(this);
						this._BlogPostID = value.ID;
					}
					else
					{
						this._BlogPostID = default(int);
					}
					this.SendPropertyChanged("BlogPost");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_BlogPostSubscription", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.BlogPostSubscriptions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.BlogPostSubscriptions.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WebLinkSubscription")]
	public partial class WebLinkSubscription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _WebLinkID;
		
		private int _UserID;
		
		private EntityRef<WebLink> _WebLink;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnWebLinkIDChanging(int value);
    partial void OnWebLinkIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public WebLinkSubscription()
		{
			this._WebLink = default(EntityRef<WebLink>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebLinkID", DbType="Int NOT NULL")]
		public int WebLinkID
		{
			get
			{
				return this._WebLinkID;
			}
			set
			{
				if ((this._WebLinkID != value))
				{
					if (this._WebLink.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWebLinkIDChanging(value);
					this.SendPropertyChanging();
					this._WebLinkID = value;
					this.SendPropertyChanged("WebLinkID");
					this.OnWebLinkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WebLink_WebLinkSubscription", Storage="_WebLink", ThisKey="WebLinkID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public WebLink WebLink
		{
			get
			{
				return this._WebLink.Entity;
			}
			set
			{
				WebLink previousValue = this._WebLink.Entity;
				if (((previousValue != value) 
							|| (this._WebLink.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WebLink.Entity = null;
						previousValue.WebLinkSubscriptions.Remove(this);
					}
					this._WebLink.Entity = value;
					if ((value != null))
					{
						value.WebLinkSubscriptions.Add(this);
						this._WebLinkID = value.ID;
					}
					else
					{
						this._WebLinkID = default(int);
					}
					this.SendPropertyChanged("WebLink");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_WebLinkSubscription", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.WebLinkSubscriptions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.WebLinkSubscriptions.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudyMaterialSubscription")]
	public partial class StudyMaterialSubscription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _StudyMaterialID;
		
		private int _UserID;
		
		private EntityRef<StudyMaterial> _StudyMaterial;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnStudyMaterialIDChanging(int value);
    partial void OnStudyMaterialIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public StudyMaterialSubscription()
		{
			this._StudyMaterial = default(EntityRef<StudyMaterial>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudyMaterialID", DbType="Int NOT NULL")]
		public int StudyMaterialID
		{
			get
			{
				return this._StudyMaterialID;
			}
			set
			{
				if ((this._StudyMaterialID != value))
				{
					if (this._StudyMaterial.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudyMaterialIDChanging(value);
					this.SendPropertyChanging();
					this._StudyMaterialID = value;
					this.SendPropertyChanged("StudyMaterialID");
					this.OnStudyMaterialIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudyMaterial_StudyMaterialSubscription", Storage="_StudyMaterial", ThisKey="StudyMaterialID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public StudyMaterial StudyMaterial
		{
			get
			{
				return this._StudyMaterial.Entity;
			}
			set
			{
				StudyMaterial previousValue = this._StudyMaterial.Entity;
				if (((previousValue != value) 
							|| (this._StudyMaterial.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StudyMaterial.Entity = null;
						previousValue.StudyMaterialSubscriptions.Remove(this);
					}
					this._StudyMaterial.Entity = value;
					if ((value != null))
					{
						value.StudyMaterialSubscriptions.Add(this);
						this._StudyMaterialID = value.ID;
					}
					else
					{
						this._StudyMaterialID = default(int);
					}
					this.SendPropertyChanged("StudyMaterial");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_StudyMaterialSubscription", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.StudyMaterialSubscriptions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.StudyMaterialSubscriptions.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocumentSubscription")]
	public partial class DocumentSubscription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _DocumentID;
		
		private int _UserID;
		
		private EntityRef<Document> _Document;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDocumentIDChanging(int value);
    partial void OnDocumentIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public DocumentSubscription()
		{
			this._Document = default(EntityRef<Document>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentID", DbType="Int NOT NULL")]
		public int DocumentID
		{
			get
			{
				return this._DocumentID;
			}
			set
			{
				if ((this._DocumentID != value))
				{
					if (this._Document.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentID = value;
					this.SendPropertyChanged("DocumentID");
					this.OnDocumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_DocumentSubscription", Storage="_Document", ThisKey="DocumentID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Document Document
		{
			get
			{
				return this._Document.Entity;
			}
			set
			{
				Document previousValue = this._Document.Entity;
				if (((previousValue != value) 
							|| (this._Document.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Document.Entity = null;
						previousValue.DocumentSubscriptions.Remove(this);
					}
					this._Document.Entity = value;
					if ((value != null))
					{
						value.DocumentSubscriptions.Add(this);
						this._DocumentID = value.ID;
					}
					else
					{
						this._DocumentID = default(int);
					}
					this.SendPropertyChanged("Document");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_DocumentSubscription", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.DocumentSubscriptions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.DocumentSubscriptions.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubjectSubscription")]
	public partial class SubjectSubscription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _SubjectID;
		
		private int _UserID;
		
		private EntityRef<Subject> _Subject;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSubjectIDChanging(int value);
    partial void OnSubjectIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public SubjectSubscription()
		{
			this._Subject = default(EntityRef<Subject>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectID", DbType="Int NOT NULL")]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_SubjectSubscription", Storage="_Subject", ThisKey="SubjectID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.SubjectSubscriptions.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.SubjectSubscriptions.Add(this);
						this._SubjectID = value.ID;
					}
					else
					{
						this._SubjectID = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_SubjectSubscription", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.SubjectSubscriptions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.SubjectSubscriptions.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Login;
		
		private string _Password;
		
		private System.Nullable<System.DateTime> _AddedDate;
		
		private System.Nullable<System.DateTime> _ActivatedDate;
		
		private string _ActivatedLink;
		
		private System.DateTime _LastVisitDate;
		
		private bool _Invited;
		
		private int _Rating;
		
		private int _StartRating;
		
		private int _NoticeCommentPeriod;
		
		private int _NoticeUpdatePeriod;
		
		private int _Category;
		
		private EntitySet<UserSocial> _UserSocials;
		
		private EntitySet<UserRole> _UserRoles;
		
		private EntitySet<Blog> _Blogs;
		
		private EntitySet<Notice> _Notices;
		
		private EntitySet<Notice> _Notices1;
		
		private EntitySet<NoticeDistribution> _NoticeDistributions;
		
		private EntitySet<DocumentAccess> _DocumentAccesses;
		
		private EntitySet<DocumentLike> _DocumentLikes;
		
		private EntitySet<EventAccess> _EventAccesses;
		
		private EntitySet<EventLike> _EventLikes;
		
		private EntitySet<ImageAccess> _ImageAccesses;
		
		private EntitySet<ImageLike> _ImageLikes;
		
		private EntitySet<OrganizationAccess> _OrganizationAccesses;
		
		private EntitySet<OrganizationLike> _OrganizationLikes;
		
		private EntitySet<PersonAccess> _PersonAccesses;
		
		private EntitySet<PublicationAccess> _PublicationAccesses;
		
		private EntitySet<PublicationLike> _PublicationLikes;
		
		private EntitySet<StudyMaterialLike> _StudyMaterialLikes;
		
		private EntitySet<WebLinkAccess> _WebLinkAccesses;
		
		private EntitySet<WebLinkLike> _WebLinkLikes;
		
		private EntitySet<Document> _Documents;
		
		private EntitySet<StudyMaterial> _StudyMaterials;
		
		private EntitySet<StudyMaterialAccess> _StudyMaterialAccesses;
		
		private EntitySet<UserEmail> _UserEmails;
		
		private EntitySet<CommentLike> _CommentLikes;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<Publication> _Publications;
		
		private EntitySet<PublicationSubscription> _PublicationSubscriptions;
		
		private EntitySet<EventSubscription> _EventSubscriptions;
		
		private EntitySet<ImageSubscription> _ImageSubscriptions;
		
		private EntitySet<BlogPostSubscription> _BlogPostSubscriptions;
		
		private EntitySet<WebLinkSubscription> _WebLinkSubscriptions;
		
		private EntitySet<StudyMaterialSubscription> _StudyMaterialSubscriptions;
		
		private EntitySet<DocumentSubscription> _DocumentSubscriptions;
		
		private EntitySet<SubjectSubscription> _SubjectSubscriptions;
		
		private EntitySet<BlogPostLike> _BlogPostLikes;
		
		private EntitySet<Person> _Persons;
		
		private EntitySet<Person> _Persons1;
		
		private EntitySet<UpdateRecord> _UpdateRecords;
		
		private EntitySet<Invite> _Invites;
		
		private EntitySet<Invite> _Invites1;
		
		private EntitySet<SubscriptionPart> _SubscriptionParts;
		
		private EntitySet<Mail> _Mails;
		
		private EntitySet<Event> _Events;
		
		private EntitySet<Organization> _Organizations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnAddedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAddedDateChanged();
    partial void OnActivatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActivatedDateChanged();
    partial void OnActivatedLinkChanging(string value);
    partial void OnActivatedLinkChanged();
    partial void OnLastVisitDateChanging(System.DateTime value);
    partial void OnLastVisitDateChanged();
    partial void OnInvitedChanging(bool value);
    partial void OnInvitedChanged();
    partial void OnRatingChanging(int value);
    partial void OnRatingChanged();
    partial void OnStartRatingChanging(int value);
    partial void OnStartRatingChanged();
    partial void OnNoticeCommentPeriodChanging(int value);
    partial void OnNoticeCommentPeriodChanged();
    partial void OnNoticeUpdatePeriodChanging(int value);
    partial void OnNoticeUpdatePeriodChanged();
    partial void OnCategoryChanging(int value);
    partial void OnCategoryChanged();
    #endregion
		
		public User()
		{
			this._UserSocials = new EntitySet<UserSocial>(new Action<UserSocial>(this.attach_UserSocials), new Action<UserSocial>(this.detach_UserSocials));
			this._UserRoles = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRoles), new Action<UserRole>(this.detach_UserRoles));
			this._Blogs = new EntitySet<Blog>(new Action<Blog>(this.attach_Blogs), new Action<Blog>(this.detach_Blogs));
			this._Notices = new EntitySet<Notice>(new Action<Notice>(this.attach_Notices), new Action<Notice>(this.detach_Notices));
			this._Notices1 = new EntitySet<Notice>(new Action<Notice>(this.attach_Notices1), new Action<Notice>(this.detach_Notices1));
			this._NoticeDistributions = new EntitySet<NoticeDistribution>(new Action<NoticeDistribution>(this.attach_NoticeDistributions), new Action<NoticeDistribution>(this.detach_NoticeDistributions));
			this._DocumentAccesses = new EntitySet<DocumentAccess>(new Action<DocumentAccess>(this.attach_DocumentAccesses), new Action<DocumentAccess>(this.detach_DocumentAccesses));
			this._DocumentLikes = new EntitySet<DocumentLike>(new Action<DocumentLike>(this.attach_DocumentLikes), new Action<DocumentLike>(this.detach_DocumentLikes));
			this._EventAccesses = new EntitySet<EventAccess>(new Action<EventAccess>(this.attach_EventAccesses), new Action<EventAccess>(this.detach_EventAccesses));
			this._EventLikes = new EntitySet<EventLike>(new Action<EventLike>(this.attach_EventLikes), new Action<EventLike>(this.detach_EventLikes));
			this._ImageAccesses = new EntitySet<ImageAccess>(new Action<ImageAccess>(this.attach_ImageAccesses), new Action<ImageAccess>(this.detach_ImageAccesses));
			this._ImageLikes = new EntitySet<ImageLike>(new Action<ImageLike>(this.attach_ImageLikes), new Action<ImageLike>(this.detach_ImageLikes));
			this._OrganizationAccesses = new EntitySet<OrganizationAccess>(new Action<OrganizationAccess>(this.attach_OrganizationAccesses), new Action<OrganizationAccess>(this.detach_OrganizationAccesses));
			this._OrganizationLikes = new EntitySet<OrganizationLike>(new Action<OrganizationLike>(this.attach_OrganizationLikes), new Action<OrganizationLike>(this.detach_OrganizationLikes));
			this._PersonAccesses = new EntitySet<PersonAccess>(new Action<PersonAccess>(this.attach_PersonAccesses), new Action<PersonAccess>(this.detach_PersonAccesses));
			this._PublicationAccesses = new EntitySet<PublicationAccess>(new Action<PublicationAccess>(this.attach_PublicationAccesses), new Action<PublicationAccess>(this.detach_PublicationAccesses));
			this._PublicationLikes = new EntitySet<PublicationLike>(new Action<PublicationLike>(this.attach_PublicationLikes), new Action<PublicationLike>(this.detach_PublicationLikes));
			this._StudyMaterialLikes = new EntitySet<StudyMaterialLike>(new Action<StudyMaterialLike>(this.attach_StudyMaterialLikes), new Action<StudyMaterialLike>(this.detach_StudyMaterialLikes));
			this._WebLinkAccesses = new EntitySet<WebLinkAccess>(new Action<WebLinkAccess>(this.attach_WebLinkAccesses), new Action<WebLinkAccess>(this.detach_WebLinkAccesses));
			this._WebLinkLikes = new EntitySet<WebLinkLike>(new Action<WebLinkLike>(this.attach_WebLinkLikes), new Action<WebLinkLike>(this.detach_WebLinkLikes));
			this._Documents = new EntitySet<Document>(new Action<Document>(this.attach_Documents), new Action<Document>(this.detach_Documents));
			this._StudyMaterials = new EntitySet<StudyMaterial>(new Action<StudyMaterial>(this.attach_StudyMaterials), new Action<StudyMaterial>(this.detach_StudyMaterials));
			this._StudyMaterialAccesses = new EntitySet<StudyMaterialAccess>(new Action<StudyMaterialAccess>(this.attach_StudyMaterialAccesses), new Action<StudyMaterialAccess>(this.detach_StudyMaterialAccesses));
			this._UserEmails = new EntitySet<UserEmail>(new Action<UserEmail>(this.attach_UserEmails), new Action<UserEmail>(this.detach_UserEmails));
			this._CommentLikes = new EntitySet<CommentLike>(new Action<CommentLike>(this.attach_CommentLikes), new Action<CommentLike>(this.detach_CommentLikes));
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._Publications = new EntitySet<Publication>(new Action<Publication>(this.attach_Publications), new Action<Publication>(this.detach_Publications));
			this._PublicationSubscriptions = new EntitySet<PublicationSubscription>(new Action<PublicationSubscription>(this.attach_PublicationSubscriptions), new Action<PublicationSubscription>(this.detach_PublicationSubscriptions));
			this._EventSubscriptions = new EntitySet<EventSubscription>(new Action<EventSubscription>(this.attach_EventSubscriptions), new Action<EventSubscription>(this.detach_EventSubscriptions));
			this._ImageSubscriptions = new EntitySet<ImageSubscription>(new Action<ImageSubscription>(this.attach_ImageSubscriptions), new Action<ImageSubscription>(this.detach_ImageSubscriptions));
			this._BlogPostSubscriptions = new EntitySet<BlogPostSubscription>(new Action<BlogPostSubscription>(this.attach_BlogPostSubscriptions), new Action<BlogPostSubscription>(this.detach_BlogPostSubscriptions));
			this._WebLinkSubscriptions = new EntitySet<WebLinkSubscription>(new Action<WebLinkSubscription>(this.attach_WebLinkSubscriptions), new Action<WebLinkSubscription>(this.detach_WebLinkSubscriptions));
			this._StudyMaterialSubscriptions = new EntitySet<StudyMaterialSubscription>(new Action<StudyMaterialSubscription>(this.attach_StudyMaterialSubscriptions), new Action<StudyMaterialSubscription>(this.detach_StudyMaterialSubscriptions));
			this._DocumentSubscriptions = new EntitySet<DocumentSubscription>(new Action<DocumentSubscription>(this.attach_DocumentSubscriptions), new Action<DocumentSubscription>(this.detach_DocumentSubscriptions));
			this._SubjectSubscriptions = new EntitySet<SubjectSubscription>(new Action<SubjectSubscription>(this.attach_SubjectSubscriptions), new Action<SubjectSubscription>(this.detach_SubjectSubscriptions));
			this._BlogPostLikes = new EntitySet<BlogPostLike>(new Action<BlogPostLike>(this.attach_BlogPostLikes), new Action<BlogPostLike>(this.detach_BlogPostLikes));
			this._Persons = new EntitySet<Person>(new Action<Person>(this.attach_Persons), new Action<Person>(this.detach_Persons));
			this._Persons1 = new EntitySet<Person>(new Action<Person>(this.attach_Persons1), new Action<Person>(this.detach_Persons1));
			this._UpdateRecords = new EntitySet<UpdateRecord>(new Action<UpdateRecord>(this.attach_UpdateRecords), new Action<UpdateRecord>(this.detach_UpdateRecords));
			this._Invites = new EntitySet<Invite>(new Action<Invite>(this.attach_Invites), new Action<Invite>(this.detach_Invites));
			this._Invites1 = new EntitySet<Invite>(new Action<Invite>(this.attach_Invites1), new Action<Invite>(this.detach_Invites1));
			this._SubscriptionParts = new EntitySet<SubscriptionPart>(new Action<SubscriptionPart>(this.attach_SubscriptionParts), new Action<SubscriptionPart>(this.detach_SubscriptionParts));
			this._Mails = new EntitySet<Mail>(new Action<Mail>(this.attach_Mails), new Action<Mail>(this.detach_Mails));
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			this._Organizations = new EntitySet<Organization>(new Action<Organization>(this.attach_Organizations), new Action<Organization>(this.detach_Organizations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ActivatedDate
		{
			get
			{
				return this._ActivatedDate;
			}
			set
			{
				if ((this._ActivatedDate != value))
				{
					this.OnActivatedDateChanging(value);
					this.SendPropertyChanging();
					this._ActivatedDate = value;
					this.SendPropertyChanged("ActivatedDate");
					this.OnActivatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivatedLink", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ActivatedLink
		{
			get
			{
				return this._ActivatedLink;
			}
			set
			{
				if ((this._ActivatedLink != value))
				{
					this.OnActivatedLinkChanging(value);
					this.SendPropertyChanging();
					this._ActivatedLink = value;
					this.SendPropertyChanged("ActivatedLink");
					this.OnActivatedLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastVisitDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastVisitDate
		{
			get
			{
				return this._LastVisitDate;
			}
			set
			{
				if ((this._LastVisitDate != value))
				{
					this.OnLastVisitDateChanging(value);
					this.SendPropertyChanging();
					this._LastVisitDate = value;
					this.SendPropertyChanged("LastVisitDate");
					this.OnLastVisitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Invited", DbType="Bit NOT NULL")]
		public bool Invited
		{
			get
			{
				return this._Invited;
			}
			set
			{
				if ((this._Invited != value))
				{
					this.OnInvitedChanging(value);
					this.SendPropertyChanging();
					this._Invited = value;
					this.SendPropertyChanged("Invited");
					this.OnInvitedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rating", DbType="Int NOT NULL")]
		public int Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartRating", DbType="Int NOT NULL")]
		public int StartRating
		{
			get
			{
				return this._StartRating;
			}
			set
			{
				if ((this._StartRating != value))
				{
					this.OnStartRatingChanging(value);
					this.SendPropertyChanging();
					this._StartRating = value;
					this.SendPropertyChanged("StartRating");
					this.OnStartRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoticeCommentPeriod", DbType="Int NOT NULL")]
		public int NoticeCommentPeriod
		{
			get
			{
				return this._NoticeCommentPeriod;
			}
			set
			{
				if ((this._NoticeCommentPeriod != value))
				{
					this.OnNoticeCommentPeriodChanging(value);
					this.SendPropertyChanging();
					this._NoticeCommentPeriod = value;
					this.SendPropertyChanged("NoticeCommentPeriod");
					this.OnNoticeCommentPeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoticeUpdatePeriod", DbType="Int NOT NULL")]
		public int NoticeUpdatePeriod
		{
			get
			{
				return this._NoticeUpdatePeriod;
			}
			set
			{
				if ((this._NoticeUpdatePeriod != value))
				{
					this.OnNoticeUpdatePeriodChanging(value);
					this.SendPropertyChanging();
					this._NoticeUpdatePeriod = value;
					this.SendPropertyChanged("NoticeUpdatePeriod");
					this.OnNoticeUpdatePeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category", DbType="Int NOT NULL")]
		public int Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserSocial", Storage="_UserSocials", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<UserSocial> UserSocials
		{
			get
			{
				return this._UserSocials;
			}
			set
			{
				this._UserSocials.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRole", Storage="_UserRoles", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<UserRole> UserRoles
		{
			get
			{
				return this._UserRoles;
			}
			set
			{
				this._UserRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Blog", Storage="_Blogs", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Blog> Blogs
		{
			get
			{
				return this._Blogs;
			}
			set
			{
				this._Blogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Notice", Storage="_Notices", ThisKey="ID", OtherKey="ReceiverID")]
		public EntitySet<Notice> Notices
		{
			get
			{
				return this._Notices;
			}
			set
			{
				this._Notices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Notice1", Storage="_Notices1", ThisKey="ID", OtherKey="SenderID")]
		public EntitySet<Notice> Notices1
		{
			get
			{
				return this._Notices1;
			}
			set
			{
				this._Notices1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_NoticeDistribution", Storage="_NoticeDistributions", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<NoticeDistribution> NoticeDistributions
		{
			get
			{
				return this._NoticeDistributions;
			}
			set
			{
				this._NoticeDistributions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_DocumentAccess", Storage="_DocumentAccesses", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<DocumentAccess> DocumentAccesses
		{
			get
			{
				return this._DocumentAccesses;
			}
			set
			{
				this._DocumentAccesses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_DocumentLike", Storage="_DocumentLikes", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<DocumentLike> DocumentLikes
		{
			get
			{
				return this._DocumentLikes;
			}
			set
			{
				this._DocumentLikes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_EventAccess", Storage="_EventAccesses", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<EventAccess> EventAccesses
		{
			get
			{
				return this._EventAccesses;
			}
			set
			{
				this._EventAccesses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_EventLike", Storage="_EventLikes", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<EventLike> EventLikes
		{
			get
			{
				return this._EventLikes;
			}
			set
			{
				this._EventLikes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ImageAccess", Storage="_ImageAccesses", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<ImageAccess> ImageAccesses
		{
			get
			{
				return this._ImageAccesses;
			}
			set
			{
				this._ImageAccesses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ImageLike", Storage="_ImageLikes", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<ImageLike> ImageLikes
		{
			get
			{
				return this._ImageLikes;
			}
			set
			{
				this._ImageLikes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_OrganizationAccess", Storage="_OrganizationAccesses", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<OrganizationAccess> OrganizationAccesses
		{
			get
			{
				return this._OrganizationAccesses;
			}
			set
			{
				this._OrganizationAccesses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_OrganizationLike", Storage="_OrganizationLikes", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<OrganizationLike> OrganizationLikes
		{
			get
			{
				return this._OrganizationLikes;
			}
			set
			{
				this._OrganizationLikes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PersonAccess", Storage="_PersonAccesses", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<PersonAccess> PersonAccesses
		{
			get
			{
				return this._PersonAccesses;
			}
			set
			{
				this._PersonAccesses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PublicationAccess", Storage="_PublicationAccesses", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<PublicationAccess> PublicationAccesses
		{
			get
			{
				return this._PublicationAccesses;
			}
			set
			{
				this._PublicationAccesses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PublicationLike", Storage="_PublicationLikes", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<PublicationLike> PublicationLikes
		{
			get
			{
				return this._PublicationLikes;
			}
			set
			{
				this._PublicationLikes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_StudyMaterialLike", Storage="_StudyMaterialLikes", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<StudyMaterialLike> StudyMaterialLikes
		{
			get
			{
				return this._StudyMaterialLikes;
			}
			set
			{
				this._StudyMaterialLikes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_WebLinkAccess", Storage="_WebLinkAccesses", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<WebLinkAccess> WebLinkAccesses
		{
			get
			{
				return this._WebLinkAccesses;
			}
			set
			{
				this._WebLinkAccesses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_WebLinkLike", Storage="_WebLinkLikes", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<WebLinkLike> WebLinkLikes
		{
			get
			{
				return this._WebLinkLikes;
			}
			set
			{
				this._WebLinkLikes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Document", Storage="_Documents", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Document> Documents
		{
			get
			{
				return this._Documents;
			}
			set
			{
				this._Documents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_StudyMaterial", Storage="_StudyMaterials", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<StudyMaterial> StudyMaterials
		{
			get
			{
				return this._StudyMaterials;
			}
			set
			{
				this._StudyMaterials.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_StudyMaterialAccess", Storage="_StudyMaterialAccesses", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<StudyMaterialAccess> StudyMaterialAccesses
		{
			get
			{
				return this._StudyMaterialAccesses;
			}
			set
			{
				this._StudyMaterialAccesses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserEmail", Storage="_UserEmails", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<UserEmail> UserEmails
		{
			get
			{
				return this._UserEmails;
			}
			set
			{
				this._UserEmails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CommentLike", Storage="_CommentLikes", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<CommentLike> CommentLikes
		{
			get
			{
				return this._CommentLikes;
			}
			set
			{
				this._CommentLikes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_Comments", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Publication", Storage="_Publications", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Publication> Publications
		{
			get
			{
				return this._Publications;
			}
			set
			{
				this._Publications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PublicationSubscription", Storage="_PublicationSubscriptions", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<PublicationSubscription> PublicationSubscriptions
		{
			get
			{
				return this._PublicationSubscriptions;
			}
			set
			{
				this._PublicationSubscriptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_EventSubscription", Storage="_EventSubscriptions", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<EventSubscription> EventSubscriptions
		{
			get
			{
				return this._EventSubscriptions;
			}
			set
			{
				this._EventSubscriptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ImageSubscription", Storage="_ImageSubscriptions", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<ImageSubscription> ImageSubscriptions
		{
			get
			{
				return this._ImageSubscriptions;
			}
			set
			{
				this._ImageSubscriptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_BlogPostSubscription", Storage="_BlogPostSubscriptions", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<BlogPostSubscription> BlogPostSubscriptions
		{
			get
			{
				return this._BlogPostSubscriptions;
			}
			set
			{
				this._BlogPostSubscriptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_WebLinkSubscription", Storage="_WebLinkSubscriptions", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<WebLinkSubscription> WebLinkSubscriptions
		{
			get
			{
				return this._WebLinkSubscriptions;
			}
			set
			{
				this._WebLinkSubscriptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_StudyMaterialSubscription", Storage="_StudyMaterialSubscriptions", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<StudyMaterialSubscription> StudyMaterialSubscriptions
		{
			get
			{
				return this._StudyMaterialSubscriptions;
			}
			set
			{
				this._StudyMaterialSubscriptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_DocumentSubscription", Storage="_DocumentSubscriptions", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<DocumentSubscription> DocumentSubscriptions
		{
			get
			{
				return this._DocumentSubscriptions;
			}
			set
			{
				this._DocumentSubscriptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_SubjectSubscription", Storage="_SubjectSubscriptions", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<SubjectSubscription> SubjectSubscriptions
		{
			get
			{
				return this._SubjectSubscriptions;
			}
			set
			{
				this._SubjectSubscriptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_BlogPostLike", Storage="_BlogPostLikes", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<BlogPostLike> BlogPostLikes
		{
			get
			{
				return this._BlogPostLikes;
			}
			set
			{
				this._BlogPostLikes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Person", Storage="_Persons", ThisKey="ID", OtherKey="AuthorID")]
		public EntitySet<Person> Persons
		{
			get
			{
				return this._Persons;
			}
			set
			{
				this._Persons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Person1", Storage="_Persons1", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Person> Persons1
		{
			get
			{
				return this._Persons1;
			}
			set
			{
				this._Persons1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UpdateRecord", Storage="_UpdateRecords", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<UpdateRecord> UpdateRecords
		{
			get
			{
				return this._UpdateRecords;
			}
			set
			{
				this._UpdateRecords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Invite", Storage="_Invites", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Invite> Invites
		{
			get
			{
				return this._Invites;
			}
			set
			{
				this._Invites.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Invite1", Storage="_Invites1", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Invite> Invites1
		{
			get
			{
				return this._Invites1;
			}
			set
			{
				this._Invites1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_SubscriptionPart", Storage="_SubscriptionParts", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<SubscriptionPart> SubscriptionParts
		{
			get
			{
				return this._SubscriptionParts;
			}
			set
			{
				this._SubscriptionParts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Mail", Storage="_Mails", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Mail> Mails
		{
			get
			{
				return this._Mails;
			}
			set
			{
				this._Mails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Event", Storage="_Events", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Organization", Storage="_Organizations", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Organization> Organizations
		{
			get
			{
				return this._Organizations;
			}
			set
			{
				this._Organizations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserSocials(UserSocial entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserSocials(UserSocial entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Blogs(Blog entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Blogs(Blog entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Notices(Notice entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Notices(Notice entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Notices1(Notice entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Notices1(Notice entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_NoticeDistributions(NoticeDistribution entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_NoticeDistributions(NoticeDistribution entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_DocumentAccesses(DocumentAccess entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_DocumentAccesses(DocumentAccess entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_DocumentLikes(DocumentLike entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_DocumentLikes(DocumentLike entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_EventAccesses(EventAccess entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_EventAccesses(EventAccess entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_EventLikes(EventLike entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_EventLikes(EventLike entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ImageAccesses(ImageAccess entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ImageAccesses(ImageAccess entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ImageLikes(ImageLike entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ImageLikes(ImageLike entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_OrganizationAccesses(OrganizationAccess entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_OrganizationAccesses(OrganizationAccess entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_OrganizationLikes(OrganizationLike entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_OrganizationLikes(OrganizationLike entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_PersonAccesses(PersonAccess entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_PersonAccesses(PersonAccess entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_PublicationAccesses(PublicationAccess entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_PublicationAccesses(PublicationAccess entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_PublicationLikes(PublicationLike entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_PublicationLikes(PublicationLike entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_StudyMaterialLikes(StudyMaterialLike entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_StudyMaterialLikes(StudyMaterialLike entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_WebLinkAccesses(WebLinkAccess entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_WebLinkAccesses(WebLinkAccess entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_WebLinkLikes(WebLinkLike entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_WebLinkLikes(WebLinkLike entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_StudyMaterials(StudyMaterial entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_StudyMaterials(StudyMaterial entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_StudyMaterialAccesses(StudyMaterialAccess entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_StudyMaterialAccesses(StudyMaterialAccess entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserEmails(UserEmail entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserEmails(UserEmail entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_CommentLikes(CommentLike entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_CommentLikes(CommentLike entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Publications(Publication entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Publications(Publication entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_PublicationSubscriptions(PublicationSubscription entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_PublicationSubscriptions(PublicationSubscription entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_EventSubscriptions(EventSubscription entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_EventSubscriptions(EventSubscription entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ImageSubscriptions(ImageSubscription entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ImageSubscriptions(ImageSubscription entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_BlogPostSubscriptions(BlogPostSubscription entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_BlogPostSubscriptions(BlogPostSubscription entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_WebLinkSubscriptions(WebLinkSubscription entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_WebLinkSubscriptions(WebLinkSubscription entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_StudyMaterialSubscriptions(StudyMaterialSubscription entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_StudyMaterialSubscriptions(StudyMaterialSubscription entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_DocumentSubscriptions(DocumentSubscription entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_DocumentSubscriptions(DocumentSubscription entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_SubjectSubscriptions(SubjectSubscription entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_SubjectSubscriptions(SubjectSubscription entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_BlogPostLikes(BlogPostLike entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_BlogPostLikes(BlogPostLike entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Persons1(Person entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Persons1(Person entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_UpdateRecords(UpdateRecord entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UpdateRecords(UpdateRecord entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Invites(Invite entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Invites(Invite entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Invites1(Invite entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Invites1(Invite entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_SubscriptionParts(SubscriptionPart entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_SubscriptionParts(SubscriptionPart entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Mails(Mail entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Mails(Mail entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Organizations(Organization entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Organizations(Organization entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BlogPostLike")]
	public partial class BlogPostLike : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _BlogPostID;
		
		private int _UserID;
		
		private bool _IsLike;
		
		private EntityRef<BlogPost> _BlogPost;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnBlogPostIDChanging(int value);
    partial void OnBlogPostIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnIsLikeChanging(bool value);
    partial void OnIsLikeChanged();
    #endregion
		
		public BlogPostLike()
		{
			this._BlogPost = default(EntityRef<BlogPost>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlogPostID", DbType="Int NOT NULL")]
		public int BlogPostID
		{
			get
			{
				return this._BlogPostID;
			}
			set
			{
				if ((this._BlogPostID != value))
				{
					if (this._BlogPost.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogPostIDChanging(value);
					this.SendPropertyChanging();
					this._BlogPostID = value;
					this.SendPropertyChanged("BlogPostID");
					this.OnBlogPostIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLike", DbType="Bit NOT NULL")]
		public bool IsLike
		{
			get
			{
				return this._IsLike;
			}
			set
			{
				if ((this._IsLike != value))
				{
					this.OnIsLikeChanging(value);
					this.SendPropertyChanging();
					this._IsLike = value;
					this.SendPropertyChanged("IsLike");
					this.OnIsLikeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlogPost_BlogPostLike", Storage="_BlogPost", ThisKey="BlogPostID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public BlogPost BlogPost
		{
			get
			{
				return this._BlogPost.Entity;
			}
			set
			{
				BlogPost previousValue = this._BlogPost.Entity;
				if (((previousValue != value) 
							|| (this._BlogPost.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BlogPost.Entity = null;
						previousValue.BlogPostLikes.Remove(this);
					}
					this._BlogPost.Entity = value;
					if ((value != null))
					{
						value.BlogPostLikes.Add(this);
						this._BlogPostID = value.ID;
					}
					else
					{
						this._BlogPostID = default(int);
					}
					this.SendPropertyChanged("BlogPost");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_BlogPostLike", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.BlogPostLikes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.BlogPostLikes.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Person")]
	public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _UserID;
		
		private int _AuthorID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Patronymic;
		
		private string _Url;
		
		private string _Photo;
		
		private string _Bio;
		
		private int _Category;
		
		private System.DateTime _AddedDate;
		
		private System.DateTime _ChangedDate;
		
		private System.Nullable<System.DateTime> _ModeratedDate;
		
		private EntitySet<BlogPostPerson> _BlogPostPersons;
		
		private EntitySet<EventPerson> _EventPersons;
		
		private EntitySet<ImagePerson> _ImagePersons;
		
		private EntitySet<PersonAccess> _PersonAccesses;
		
		private EntitySet<PersonSubject> _PersonSubjects;
		
		private EntitySet<PersonContact> _PersonContacts;
		
		private EntitySet<PersonLink> _PersonLinks;
		
		private EntitySet<PersonOrganization> _PersonOrganizations;
		
		private EntitySet<PublicationPerson> _PublicationPersons;
		
		private EntitySet<StudyMaterialPerson> _StudyMaterialPersons;
		
		private EntitySet<PersonRegion> _PersonRegions;
		
		private EntitySet<PersonRecordRedirect> _PersonRecordRedirects;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnAuthorIDChanging(int value);
    partial void OnAuthorIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnPatronymicChanging(string value);
    partial void OnPatronymicChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnPhotoChanging(string value);
    partial void OnPhotoChanged();
    partial void OnBioChanging(string value);
    partial void OnBioChanged();
    partial void OnCategoryChanging(int value);
    partial void OnCategoryChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnChangedDateChanging(System.DateTime value);
    partial void OnChangedDateChanged();
    partial void OnModeratedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModeratedDateChanged();
    #endregion
		
		public Person()
		{
			this._BlogPostPersons = new EntitySet<BlogPostPerson>(new Action<BlogPostPerson>(this.attach_BlogPostPersons), new Action<BlogPostPerson>(this.detach_BlogPostPersons));
			this._EventPersons = new EntitySet<EventPerson>(new Action<EventPerson>(this.attach_EventPersons), new Action<EventPerson>(this.detach_EventPersons));
			this._ImagePersons = new EntitySet<ImagePerson>(new Action<ImagePerson>(this.attach_ImagePersons), new Action<ImagePerson>(this.detach_ImagePersons));
			this._PersonAccesses = new EntitySet<PersonAccess>(new Action<PersonAccess>(this.attach_PersonAccesses), new Action<PersonAccess>(this.detach_PersonAccesses));
			this._PersonSubjects = new EntitySet<PersonSubject>(new Action<PersonSubject>(this.attach_PersonSubjects), new Action<PersonSubject>(this.detach_PersonSubjects));
			this._PersonContacts = new EntitySet<PersonContact>(new Action<PersonContact>(this.attach_PersonContacts), new Action<PersonContact>(this.detach_PersonContacts));
			this._PersonLinks = new EntitySet<PersonLink>(new Action<PersonLink>(this.attach_PersonLinks), new Action<PersonLink>(this.detach_PersonLinks));
			this._PersonOrganizations = new EntitySet<PersonOrganization>(new Action<PersonOrganization>(this.attach_PersonOrganizations), new Action<PersonOrganization>(this.detach_PersonOrganizations));
			this._PublicationPersons = new EntitySet<PublicationPerson>(new Action<PublicationPerson>(this.attach_PublicationPersons), new Action<PublicationPerson>(this.detach_PublicationPersons));
			this._StudyMaterialPersons = new EntitySet<StudyMaterialPerson>(new Action<StudyMaterialPerson>(this.attach_StudyMaterialPersons), new Action<StudyMaterialPerson>(this.detach_StudyMaterialPersons));
			this._PersonRegions = new EntitySet<PersonRegion>(new Action<PersonRegion>(this.attach_PersonRegions), new Action<PersonRegion>(this.detach_PersonRegions));
			this._PersonRecordRedirects = new EntitySet<PersonRecordRedirect>(new Action<PersonRecordRedirect>(this.attach_PersonRecordRedirects), new Action<PersonRecordRedirect>(this.detach_PersonRecordRedirects));
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorID", DbType="Int NOT NULL")]
		public int AuthorID
		{
			get
			{
				return this._AuthorID;
			}
			set
			{
				if ((this._AuthorID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthorIDChanging(value);
					this.SendPropertyChanging();
					this._AuthorID = value;
					this.SendPropertyChanged("AuthorID");
					this.OnAuthorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patronymic", DbType="NVarChar(150)")]
		public string Patronymic
		{
			get
			{
				return this._Patronymic;
			}
			set
			{
				if ((this._Patronymic != value))
				{
					this.OnPatronymicChanging(value);
					this.SendPropertyChanging();
					this._Patronymic = value;
					this.SendPropertyChanged("Patronymic");
					this.OnPatronymicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Photo", DbType="NVarChar(150)")]
		public string Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bio", DbType="NVarChar(MAX)")]
		public string Bio
		{
			get
			{
				return this._Bio;
			}
			set
			{
				if ((this._Bio != value))
				{
					this.OnBioChanging(value);
					this.SendPropertyChanging();
					this._Bio = value;
					this.SendPropertyChanged("Bio");
					this.OnBioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category", DbType="Int NOT NULL")]
		public int Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChangedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ChangedDate
		{
			get
			{
				return this._ChangedDate;
			}
			set
			{
				if ((this._ChangedDate != value))
				{
					this.OnChangedDateChanging(value);
					this.SendPropertyChanging();
					this._ChangedDate = value;
					this.SendPropertyChanged("ChangedDate");
					this.OnChangedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModeratedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModeratedDate
		{
			get
			{
				return this._ModeratedDate;
			}
			set
			{
				if ((this._ModeratedDate != value))
				{
					this.OnModeratedDateChanging(value);
					this.SendPropertyChanging();
					this._ModeratedDate = value;
					this.SendPropertyChanged("ModeratedDate");
					this.OnModeratedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_BlogPostPerson", Storage="_BlogPostPersons", ThisKey="ID", OtherKey="PersonID")]
		public EntitySet<BlogPostPerson> BlogPostPersons
		{
			get
			{
				return this._BlogPostPersons;
			}
			set
			{
				this._BlogPostPersons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_EventPerson", Storage="_EventPersons", ThisKey="ID", OtherKey="PersonID")]
		public EntitySet<EventPerson> EventPersons
		{
			get
			{
				return this._EventPersons;
			}
			set
			{
				this._EventPersons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_ImagePerson", Storage="_ImagePersons", ThisKey="ID", OtherKey="PersonID")]
		public EntitySet<ImagePerson> ImagePersons
		{
			get
			{
				return this._ImagePersons;
			}
			set
			{
				this._ImagePersons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_PersonAccess", Storage="_PersonAccesses", ThisKey="ID", OtherKey="PersonID")]
		public EntitySet<PersonAccess> PersonAccesses
		{
			get
			{
				return this._PersonAccesses;
			}
			set
			{
				this._PersonAccesses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_PersonSubject", Storage="_PersonSubjects", ThisKey="ID", OtherKey="PersonID")]
		public EntitySet<PersonSubject> PersonSubjects
		{
			get
			{
				return this._PersonSubjects;
			}
			set
			{
				this._PersonSubjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_PersonContact", Storage="_PersonContacts", ThisKey="ID", OtherKey="PersonID")]
		public EntitySet<PersonContact> PersonContacts
		{
			get
			{
				return this._PersonContacts;
			}
			set
			{
				this._PersonContacts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_PersonLink", Storage="_PersonLinks", ThisKey="ID", OtherKey="PersonID")]
		public EntitySet<PersonLink> PersonLinks
		{
			get
			{
				return this._PersonLinks;
			}
			set
			{
				this._PersonLinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_PersonOrganization", Storage="_PersonOrganizations", ThisKey="ID", OtherKey="PersonID")]
		public EntitySet<PersonOrganization> PersonOrganizations
		{
			get
			{
				return this._PersonOrganizations;
			}
			set
			{
				this._PersonOrganizations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_PublicationPerson", Storage="_PublicationPersons", ThisKey="ID", OtherKey="PersonID")]
		public EntitySet<PublicationPerson> PublicationPersons
		{
			get
			{
				return this._PublicationPersons;
			}
			set
			{
				this._PublicationPersons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_StudyMaterialPerson", Storage="_StudyMaterialPersons", ThisKey="ID", OtherKey="PersonID")]
		public EntitySet<StudyMaterialPerson> StudyMaterialPersons
		{
			get
			{
				return this._StudyMaterialPersons;
			}
			set
			{
				this._StudyMaterialPersons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_PersonRegion", Storage="_PersonRegions", ThisKey="ID", OtherKey="PersonID")]
		public EntitySet<PersonRegion> PersonRegions
		{
			get
			{
				return this._PersonRegions;
			}
			set
			{
				this._PersonRegions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_PersonRecordRedirect", Storage="_PersonRecordRedirects", ThisKey="ID", OtherKey="PersonID")]
		public EntitySet<PersonRecordRedirect> PersonRecordRedirects
		{
			get
			{
				return this._PersonRecordRedirects;
			}
			set
			{
				this._PersonRecordRedirects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Person", Storage="_User", ThisKey="AuthorID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Persons.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Persons.Add(this);
						this._AuthorID = value.ID;
					}
					else
					{
						this._AuthorID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Person1", Storage="_User1", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Persons1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Persons1.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BlogPostPersons(BlogPostPerson entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_BlogPostPersons(BlogPostPerson entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_EventPersons(EventPerson entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_EventPersons(EventPerson entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_ImagePersons(ImagePerson entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_ImagePersons(ImagePerson entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_PersonAccesses(PersonAccess entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_PersonAccesses(PersonAccess entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_PersonSubjects(PersonSubject entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_PersonSubjects(PersonSubject entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_PersonContacts(PersonContact entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_PersonContacts(PersonContact entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_PersonLinks(PersonLink entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_PersonLinks(PersonLink entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_PersonOrganizations(PersonOrganization entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_PersonOrganizations(PersonOrganization entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_PublicationPersons(PublicationPerson entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_PublicationPersons(PublicationPerson entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_StudyMaterialPersons(StudyMaterialPerson entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_StudyMaterialPersons(StudyMaterialPerson entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_PersonRegions(PersonRegion entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_PersonRegions(PersonRegion entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_PersonRecordRedirects(PersonRecordRedirect entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_PersonRecordRedirects(PersonRecordRedirect entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BlogParser")]
	public partial class BlogParser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _BlogID;
		
		private string _Link;
		
		private int _Type;
		
		private System.Nullable<System.DateTime> _LastUpdate;
		
		private EntityRef<Blog> _Blog;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnBlogIDChanging(int value);
    partial void OnBlogIDChanged();
    partial void OnLinkChanging(string value);
    partial void OnLinkChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnLastUpdateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public BlogParser()
		{
			this._Blog = default(EntityRef<Blog>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlogID", DbType="Int NOT NULL")]
		public int BlogID
		{
			get
			{
				return this._BlogID;
			}
			set
			{
				if ((this._BlogID != value))
				{
					if (this._Blog.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBlogIDChanging(value);
					this.SendPropertyChanging();
					this._BlogID = value;
					this.SendPropertyChanged("BlogID");
					this.OnBlogIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Link", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Link
		{
			get
			{
				return this._Link;
			}
			set
			{
				if ((this._Link != value))
				{
					this.OnLinkChanging(value);
					this.SendPropertyChanging();
					this._Link = value;
					this.SendPropertyChanged("Link");
					this.OnLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Blog_BlogParser", Storage="_Blog", ThisKey="BlogID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Blog Blog
		{
			get
			{
				return this._Blog.Entity;
			}
			set
			{
				Blog previousValue = this._Blog.Entity;
				if (((previousValue != value) 
							|| (this._Blog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Blog.Entity = null;
						previousValue.BlogParsers.Remove(this);
					}
					this._Blog.Entity = value;
					if ((value != null))
					{
						value.BlogParsers.Add(this);
						this._BlogID = value.ID;
					}
					else
					{
						this._BlogID = default(int);
					}
					this.SendPropertyChanged("Blog");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UpdateRecord")]
	public partial class UpdateRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _AddedDate;
		
		private System.Nullable<int> _UserID;
		
		private int _Type;
		
		private int _MaterialType;
		
		private int _ResourceID;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnMaterialTypeChanging(int value);
    partial void OnMaterialTypeChanged();
    partial void OnResourceIDChanging(int value);
    partial void OnResourceIDChanged();
    #endregion
		
		public UpdateRecord()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaterialType", DbType="Int NOT NULL")]
		public int MaterialType
		{
			get
			{
				return this._MaterialType;
			}
			set
			{
				if ((this._MaterialType != value))
				{
					this.OnMaterialTypeChanging(value);
					this.SendPropertyChanging();
					this._MaterialType = value;
					this.SendPropertyChanged("MaterialType");
					this.OnMaterialTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceID", DbType="Int NOT NULL")]
		public int ResourceID
		{
			get
			{
				return this._ResourceID;
			}
			set
			{
				if ((this._ResourceID != value))
				{
					this.OnResourceIDChanging(value);
					this.SendPropertyChanging();
					this._ResourceID = value;
					this.SendPropertyChanged("ResourceID");
					this.OnResourceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UpdateRecord", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UpdateRecords.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UpdateRecords.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Invite")]
	public partial class Invite : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private System.Nullable<int> _InvitedID;
		
		private string _Email;
		
		private string _Link;
		
		private System.DateTime _AddedDate;
		
		private System.Nullable<System.DateTime> _UsedDate;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnInvitedIDChanging(System.Nullable<int> value);
    partial void OnInvitedIDChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnLinkChanging(string value);
    partial void OnLinkChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnUsedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUsedDateChanged();
    #endregion
		
		public Invite()
		{
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if ((this._User.HasLoadedOrAssignedValue || this._User1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvitedID", DbType="Int")]
		public System.Nullable<int> InvitedID
		{
			get
			{
				return this._InvitedID;
			}
			set
			{
				if ((this._InvitedID != value))
				{
					this.OnInvitedIDChanging(value);
					this.SendPropertyChanging();
					this._InvitedID = value;
					this.SendPropertyChanged("InvitedID");
					this.OnInvitedIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Link", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Link
		{
			get
			{
				return this._Link;
			}
			set
			{
				if ((this._Link != value))
				{
					this.OnLinkChanging(value);
					this.SendPropertyChanging();
					this._Link = value;
					this.SendPropertyChanged("Link");
					this.OnLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UsedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UsedDate
		{
			get
			{
				return this._UsedDate;
			}
			set
			{
				if ((this._UsedDate != value))
				{
					this.OnUsedDateChanging(value);
					this.SendPropertyChanging();
					this._UsedDate = value;
					this.SendPropertyChanged("UsedDate");
					this.OnUsedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Invite", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Invites.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Invites.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Invite1", Storage="_User1", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Invites1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Invites1.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubscriptionTemplate")]
	public partial class SubscriptionTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _Type;
		
		private string _TemplateSample;
		
		private int _CountParameters;
		
		private bool _IsActive;
		
		private string _Template;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnTemplateSampleChanging(string value);
    partial void OnTemplateSampleChanged();
    partial void OnCountParametersChanging(int value);
    partial void OnCountParametersChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnTemplateChanging(string value);
    partial void OnTemplateChanged();
    #endregion
		
		public SubscriptionTemplate()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TemplateSample", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string TemplateSample
		{
			get
			{
				return this._TemplateSample;
			}
			set
			{
				if ((this._TemplateSample != value))
				{
					this.OnTemplateSampleChanging(value);
					this.SendPropertyChanging();
					this._TemplateSample = value;
					this.SendPropertyChanged("TemplateSample");
					this.OnTemplateSampleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountParameters", DbType="Int NOT NULL")]
		public int CountParameters
		{
			get
			{
				return this._CountParameters;
			}
			set
			{
				if ((this._CountParameters != value))
				{
					this.OnCountParametersChanging(value);
					this.SendPropertyChanging();
					this._CountParameters = value;
					this.SendPropertyChanged("CountParameters");
					this.OnCountParametersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Template", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Template
		{
			get
			{
				return this._Template;
			}
			set
			{
				if ((this._Template != value))
				{
					this.OnTemplateChanging(value);
					this.SendPropertyChanging();
					this._Template = value;
					this.SendPropertyChanged("Template");
					this.OnTemplateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubscriptionPart")]
	public partial class SubscriptionPart : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private System.DateTime _AddedDate;
		
		private string _Text;
		
		private int _UpdateType;
		
		private bool _IsProcessed;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnUpdateTypeChanging(int value);
    partial void OnUpdateTypeChanged();
    partial void OnIsProcessedChanging(bool value);
    partial void OnIsProcessedChanged();
    #endregion
		
		public SubscriptionPart()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateType", DbType="Int NOT NULL")]
		public int UpdateType
		{
			get
			{
				return this._UpdateType;
			}
			set
			{
				if ((this._UpdateType != value))
				{
					this.OnUpdateTypeChanging(value);
					this.SendPropertyChanging();
					this._UpdateType = value;
					this.SendPropertyChanged("UpdateType");
					this.OnUpdateTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsProcessed", DbType="Bit NOT NULL")]
		public bool IsProcessed
		{
			get
			{
				return this._IsProcessed;
			}
			set
			{
				if ((this._IsProcessed != value))
				{
					this.OnIsProcessedChanging(value);
					this.SendPropertyChanging();
					this._IsProcessed = value;
					this.SendPropertyChanged("IsProcessed");
					this.OnIsProcessedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_SubscriptionPart", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.SubscriptionParts.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.SubscriptionParts.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Distribution")]
	public partial class Distribution : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _AddedDate;
		
		private string _Subject;
		
		private string _Body;
		
		private bool _IsStart;
		
		private EntitySet<Mail> _Mails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    partial void OnIsStartChanging(bool value);
    partial void OnIsStartChanged();
    #endregion
		
		public Distribution()
		{
			this._Mails = new EntitySet<Mail>(new Action<Mail>(this.attach_Mails), new Action<Mail>(this.detach_Mails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Body", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsStart", DbType="Bit NOT NULL")]
		public bool IsStart
		{
			get
			{
				return this._IsStart;
			}
			set
			{
				if ((this._IsStart != value))
				{
					this.OnIsStartChanging(value);
					this.SendPropertyChanging();
					this._IsStart = value;
					this.SendPropertyChanged("IsStart");
					this.OnIsStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Distribution_Mail", Storage="_Mails", ThisKey="ID", OtherKey="DistributionID")]
		public EntitySet<Mail> Mails
		{
			get
			{
				return this._Mails;
			}
			set
			{
				this._Mails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Mails(Mail entity)
		{
			this.SendPropertyChanging();
			entity.Distribution = this;
		}
		
		private void detach_Mails(Mail entity)
		{
			this.SendPropertyChanging();
			entity.Distribution = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Mail")]
	public partial class Mail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _DistributionID;
		
		private int _UserID;
		
		private string _Email;
		
		private string _Subject;
		
		private string _Body;
		
		private System.DateTime _AddedDate;
		
		private System.Nullable<System.DateTime> _ProcessedDate;
		
		private EntityRef<Distribution> _Distribution;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDistributionIDChanging(System.Nullable<int> value);
    partial void OnDistributionIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnProcessedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnProcessedDateChanged();
    #endregion
		
		public Mail()
		{
			this._Distribution = default(EntityRef<Distribution>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistributionID", DbType="Int")]
		public System.Nullable<int> DistributionID
		{
			get
			{
				return this._DistributionID;
			}
			set
			{
				if ((this._DistributionID != value))
				{
					if (this._Distribution.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDistributionIDChanging(value);
					this.SendPropertyChanging();
					this._DistributionID = value;
					this.SendPropertyChanged("DistributionID");
					this.OnDistributionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Body", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcessedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ProcessedDate
		{
			get
			{
				return this._ProcessedDate;
			}
			set
			{
				if ((this._ProcessedDate != value))
				{
					this.OnProcessedDateChanging(value);
					this.SendPropertyChanging();
					this._ProcessedDate = value;
					this.SendPropertyChanged("ProcessedDate");
					this.OnProcessedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Distribution_Mail", Storage="_Distribution", ThisKey="DistributionID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Distribution Distribution
		{
			get
			{
				return this._Distribution.Entity;
			}
			set
			{
				Distribution previousValue = this._Distribution.Entity;
				if (((previousValue != value) 
							|| (this._Distribution.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Distribution.Entity = null;
						previousValue.Mails.Remove(this);
					}
					this._Distribution.Entity = value;
					if ((value != null))
					{
						value.Mails.Add(this);
						this._DistributionID = value.ID;
					}
					else
					{
						this._DistributionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Distribution");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Mail", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Mails.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Mails.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Event")]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Image;
		
		private string _Header;
		
		private string _Url;
		
		private string _Teaser;
		
		private System.Nullable<System.DateTime> _EventDate;
		
		private System.Nullable<int> _Year;
		
		private System.DateTime _AddedDate;
		
		private System.DateTime _ChangedDate;
		
		private System.Nullable<System.DateTime> _ModeratedDate;
		
		private int _TotalLikes;
		
		private int _UserID;
		
		private EntitySet<BlogPostEvent> _BlogPostEvents;
		
		private EntitySet<EventAccess> _EventAccesses;
		
		private EntitySet<EventSubject> _EventSubjects;
		
		private EntitySet<EventComment> _EventComments;
		
		private EntitySet<EventFile> _EventFiles;
		
		private EntitySet<EventLike> _EventLikes;
		
		private EntitySet<EventLink> _EventLinks;
		
		private EntitySet<EventOrganization> _EventOrganizations;
		
		private EntitySet<EventPerson> _EventPersons;
		
		private EntitySet<EventRegion> _EventRegions;
		
		private EntitySet<Document> _Documents;
		
		private EntitySet<EventRecordRedirect> _EventRecordRedirects;
		
		private EntitySet<EventSubscription> _EventSubscriptions;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnHeaderChanging(string value);
    partial void OnHeaderChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnTeaserChanging(string value);
    partial void OnTeaserChanged();
    partial void OnEventDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEventDateChanged();
    partial void OnYearChanging(System.Nullable<int> value);
    partial void OnYearChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnChangedDateChanging(System.DateTime value);
    partial void OnChangedDateChanged();
    partial void OnModeratedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModeratedDateChanged();
    partial void OnTotalLikesChanging(int value);
    partial void OnTotalLikesChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public Event()
		{
			this._BlogPostEvents = new EntitySet<BlogPostEvent>(new Action<BlogPostEvent>(this.attach_BlogPostEvents), new Action<BlogPostEvent>(this.detach_BlogPostEvents));
			this._EventAccesses = new EntitySet<EventAccess>(new Action<EventAccess>(this.attach_EventAccesses), new Action<EventAccess>(this.detach_EventAccesses));
			this._EventSubjects = new EntitySet<EventSubject>(new Action<EventSubject>(this.attach_EventSubjects), new Action<EventSubject>(this.detach_EventSubjects));
			this._EventComments = new EntitySet<EventComment>(new Action<EventComment>(this.attach_EventComments), new Action<EventComment>(this.detach_EventComments));
			this._EventFiles = new EntitySet<EventFile>(new Action<EventFile>(this.attach_EventFiles), new Action<EventFile>(this.detach_EventFiles));
			this._EventLikes = new EntitySet<EventLike>(new Action<EventLike>(this.attach_EventLikes), new Action<EventLike>(this.detach_EventLikes));
			this._EventLinks = new EntitySet<EventLink>(new Action<EventLink>(this.attach_EventLinks), new Action<EventLink>(this.detach_EventLinks));
			this._EventOrganizations = new EntitySet<EventOrganization>(new Action<EventOrganization>(this.attach_EventOrganizations), new Action<EventOrganization>(this.detach_EventOrganizations));
			this._EventPersons = new EntitySet<EventPerson>(new Action<EventPerson>(this.attach_EventPersons), new Action<EventPerson>(this.detach_EventPersons));
			this._EventRegions = new EntitySet<EventRegion>(new Action<EventRegion>(this.attach_EventRegions), new Action<EventRegion>(this.detach_EventRegions));
			this._Documents = new EntitySet<Document>(new Action<Document>(this.attach_Documents), new Action<Document>(this.detach_Documents));
			this._EventRecordRedirects = new EntitySet<EventRecordRedirect>(new Action<EventRecordRedirect>(this.attach_EventRecordRedirects), new Action<EventRecordRedirect>(this.detach_EventRecordRedirects));
			this._EventSubscriptions = new EntitySet<EventSubscription>(new Action<EventSubscription>(this.attach_EventSubscriptions), new Action<EventSubscription>(this.detach_EventSubscriptions));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="NVarChar(150)")]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Header", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Header
		{
			get
			{
				return this._Header;
			}
			set
			{
				if ((this._Header != value))
				{
					this.OnHeaderChanging(value);
					this.SendPropertyChanging();
					this._Header = value;
					this.SendPropertyChanged("Header");
					this.OnHeaderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Teaser", DbType="NVarChar(MAX)")]
		public string Teaser
		{
			get
			{
				return this._Teaser;
			}
			set
			{
				if ((this._Teaser != value))
				{
					this.OnTeaserChanging(value);
					this.SendPropertyChanging();
					this._Teaser = value;
					this.SendPropertyChanged("Teaser");
					this.OnTeaserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EventDate
		{
			get
			{
				return this._EventDate;
			}
			set
			{
				if ((this._EventDate != value))
				{
					this.OnEventDateChanging(value);
					this.SendPropertyChanging();
					this._EventDate = value;
					this.SendPropertyChanged("EventDate");
					this.OnEventDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int")]
		public System.Nullable<int> Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChangedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ChangedDate
		{
			get
			{
				return this._ChangedDate;
			}
			set
			{
				if ((this._ChangedDate != value))
				{
					this.OnChangedDateChanging(value);
					this.SendPropertyChanging();
					this._ChangedDate = value;
					this.SendPropertyChanged("ChangedDate");
					this.OnChangedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModeratedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModeratedDate
		{
			get
			{
				return this._ModeratedDate;
			}
			set
			{
				if ((this._ModeratedDate != value))
				{
					this.OnModeratedDateChanging(value);
					this.SendPropertyChanging();
					this._ModeratedDate = value;
					this.SendPropertyChanged("ModeratedDate");
					this.OnModeratedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalLikes", DbType="Int NOT NULL")]
		public int TotalLikes
		{
			get
			{
				return this._TotalLikes;
			}
			set
			{
				if ((this._TotalLikes != value))
				{
					this.OnTotalLikesChanging(value);
					this.SendPropertyChanging();
					this._TotalLikes = value;
					this.SendPropertyChanged("TotalLikes");
					this.OnTotalLikesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_BlogPostEvent", Storage="_BlogPostEvents", ThisKey="ID", OtherKey="EventID")]
		public EntitySet<BlogPostEvent> BlogPostEvents
		{
			get
			{
				return this._BlogPostEvents;
			}
			set
			{
				this._BlogPostEvents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventAccess", Storage="_EventAccesses", ThisKey="ID", OtherKey="EventID")]
		public EntitySet<EventAccess> EventAccesses
		{
			get
			{
				return this._EventAccesses;
			}
			set
			{
				this._EventAccesses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventSubject", Storage="_EventSubjects", ThisKey="ID", OtherKey="EventID")]
		public EntitySet<EventSubject> EventSubjects
		{
			get
			{
				return this._EventSubjects;
			}
			set
			{
				this._EventSubjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventComment", Storage="_EventComments", ThisKey="ID", OtherKey="EventID")]
		public EntitySet<EventComment> EventComments
		{
			get
			{
				return this._EventComments;
			}
			set
			{
				this._EventComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventFile", Storage="_EventFiles", ThisKey="ID", OtherKey="EventID")]
		public EntitySet<EventFile> EventFiles
		{
			get
			{
				return this._EventFiles;
			}
			set
			{
				this._EventFiles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventLike", Storage="_EventLikes", ThisKey="ID", OtherKey="EventID")]
		public EntitySet<EventLike> EventLikes
		{
			get
			{
				return this._EventLikes;
			}
			set
			{
				this._EventLikes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventLink", Storage="_EventLinks", ThisKey="ID", OtherKey="EventID")]
		public EntitySet<EventLink> EventLinks
		{
			get
			{
				return this._EventLinks;
			}
			set
			{
				this._EventLinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventOrganization", Storage="_EventOrganizations", ThisKey="ID", OtherKey="EventID")]
		public EntitySet<EventOrganization> EventOrganizations
		{
			get
			{
				return this._EventOrganizations;
			}
			set
			{
				this._EventOrganizations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventPerson", Storage="_EventPersons", ThisKey="ID", OtherKey="EventID")]
		public EntitySet<EventPerson> EventPersons
		{
			get
			{
				return this._EventPersons;
			}
			set
			{
				this._EventPersons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventRegion", Storage="_EventRegions", ThisKey="ID", OtherKey="EventID")]
		public EntitySet<EventRegion> EventRegions
		{
			get
			{
				return this._EventRegions;
			}
			set
			{
				this._EventRegions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_Document", Storage="_Documents", ThisKey="ID", OtherKey="EventID")]
		public EntitySet<Document> Documents
		{
			get
			{
				return this._Documents;
			}
			set
			{
				this._Documents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventRecordRedirect", Storage="_EventRecordRedirects", ThisKey="ID", OtherKey="EventID")]
		public EntitySet<EventRecordRedirect> EventRecordRedirects
		{
			get
			{
				return this._EventRecordRedirects;
			}
			set
			{
				this._EventRecordRedirects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventSubscription", Storage="_EventSubscriptions", ThisKey="ID", OtherKey="EventID")]
		public EntitySet<EventSubscription> EventSubscriptions
		{
			get
			{
				return this._EventSubscriptions;
			}
			set
			{
				this._EventSubscriptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Event", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BlogPostEvents(BlogPostEvent entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_BlogPostEvents(BlogPostEvent entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
		
		private void attach_EventAccesses(EventAccess entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_EventAccesses(EventAccess entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
		
		private void attach_EventSubjects(EventSubject entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_EventSubjects(EventSubject entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
		
		private void attach_EventComments(EventComment entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_EventComments(EventComment entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
		
		private void attach_EventFiles(EventFile entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_EventFiles(EventFile entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
		
		private void attach_EventLikes(EventLike entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_EventLikes(EventLike entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
		
		private void attach_EventLinks(EventLink entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_EventLinks(EventLink entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
		
		private void attach_EventOrganizations(EventOrganization entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_EventOrganizations(EventOrganization entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
		
		private void attach_EventPersons(EventPerson entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_EventPersons(EventPerson entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
		
		private void attach_EventRegions(EventRegion entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_EventRegions(EventRegion entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
		
		private void attach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
		
		private void attach_EventRecordRedirects(EventRecordRedirect entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_EventRecordRedirects(EventRecordRedirect entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
		
		private void attach_EventSubscriptions(EventSubscription entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_EventSubscriptions(EventSubscription entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Organization")]
	public partial class Organization : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private string _Name;
		
		private string _Url;
		
		private string _Logo;
		
		private string _Info;
		
		private System.DateTime _AddedDate;
		
		private System.DateTime _ChangedDate;
		
		private System.Nullable<System.DateTime> _ModeratedDate;
		
		private int _TotalLikes;
		
		private EntitySet<BlogPostOrganization> _BlogPostOrganizations;
		
		private EntitySet<DocumentOrganization> _DocumentOrganizations;
		
		private EntitySet<EventOrganization> _EventOrganizations;
		
		private EntitySet<OrganizationAccess> _OrganizationAccesses;
		
		private EntitySet<OrganizationSubject> _OrganizationSubjects;
		
		private EntitySet<OrganizationContact> _OrganizationContacts;
		
		private EntitySet<OrganizationLike> _OrganizationLikes;
		
		private EntitySet<OrganizationLink> _OrganizationLinks;
		
		private EntitySet<OrganizationRegion> _OrganizationRegions;
		
		private EntitySet<PersonOrganization> _PersonOrganizations;
		
		private EntitySet<PublicationOrganization> _PublicationOrganizations;
		
		private EntitySet<StudyMaterialOrganization> _StudyMaterialOrganizations;
		
		private EntitySet<OrganizationRecordRedirect> _OrganizationRecordRedirects;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnLogoChanging(string value);
    partial void OnLogoChanged();
    partial void OnInfoChanging(string value);
    partial void OnInfoChanged();
    partial void OnAddedDateChanging(System.DateTime value);
    partial void OnAddedDateChanged();
    partial void OnChangedDateChanging(System.DateTime value);
    partial void OnChangedDateChanged();
    partial void OnModeratedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModeratedDateChanged();
    partial void OnTotalLikesChanging(int value);
    partial void OnTotalLikesChanged();
    #endregion
		
		public Organization()
		{
			this._BlogPostOrganizations = new EntitySet<BlogPostOrganization>(new Action<BlogPostOrganization>(this.attach_BlogPostOrganizations), new Action<BlogPostOrganization>(this.detach_BlogPostOrganizations));
			this._DocumentOrganizations = new EntitySet<DocumentOrganization>(new Action<DocumentOrganization>(this.attach_DocumentOrganizations), new Action<DocumentOrganization>(this.detach_DocumentOrganizations));
			this._EventOrganizations = new EntitySet<EventOrganization>(new Action<EventOrganization>(this.attach_EventOrganizations), new Action<EventOrganization>(this.detach_EventOrganizations));
			this._OrganizationAccesses = new EntitySet<OrganizationAccess>(new Action<OrganizationAccess>(this.attach_OrganizationAccesses), new Action<OrganizationAccess>(this.detach_OrganizationAccesses));
			this._OrganizationSubjects = new EntitySet<OrganizationSubject>(new Action<OrganizationSubject>(this.attach_OrganizationSubjects), new Action<OrganizationSubject>(this.detach_OrganizationSubjects));
			this._OrganizationContacts = new EntitySet<OrganizationContact>(new Action<OrganizationContact>(this.attach_OrganizationContacts), new Action<OrganizationContact>(this.detach_OrganizationContacts));
			this._OrganizationLikes = new EntitySet<OrganizationLike>(new Action<OrganizationLike>(this.attach_OrganizationLikes), new Action<OrganizationLike>(this.detach_OrganizationLikes));
			this._OrganizationLinks = new EntitySet<OrganizationLink>(new Action<OrganizationLink>(this.attach_OrganizationLinks), new Action<OrganizationLink>(this.detach_OrganizationLinks));
			this._OrganizationRegions = new EntitySet<OrganizationRegion>(new Action<OrganizationRegion>(this.attach_OrganizationRegions), new Action<OrganizationRegion>(this.detach_OrganizationRegions));
			this._PersonOrganizations = new EntitySet<PersonOrganization>(new Action<PersonOrganization>(this.attach_PersonOrganizations), new Action<PersonOrganization>(this.detach_PersonOrganizations));
			this._PublicationOrganizations = new EntitySet<PublicationOrganization>(new Action<PublicationOrganization>(this.attach_PublicationOrganizations), new Action<PublicationOrganization>(this.detach_PublicationOrganizations));
			this._StudyMaterialOrganizations = new EntitySet<StudyMaterialOrganization>(new Action<StudyMaterialOrganization>(this.attach_StudyMaterialOrganizations), new Action<StudyMaterialOrganization>(this.detach_StudyMaterialOrganizations));
			this._OrganizationRecordRedirects = new EntitySet<OrganizationRecordRedirect>(new Action<OrganizationRecordRedirect>(this.attach_OrganizationRecordRedirects), new Action<OrganizationRecordRedirect>(this.detach_OrganizationRecordRedirects));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Logo", DbType="NVarChar(150)")]
		public string Logo
		{
			get
			{
				return this._Logo;
			}
			set
			{
				if ((this._Logo != value))
				{
					this.OnLogoChanging(value);
					this.SendPropertyChanging();
					this._Logo = value;
					this.SendPropertyChanged("Logo");
					this.OnLogoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Info", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Info
		{
			get
			{
				return this._Info;
			}
			set
			{
				if ((this._Info != value))
				{
					this.OnInfoChanging(value);
					this.SendPropertyChanging();
					this._Info = value;
					this.SendPropertyChanged("Info");
					this.OnInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime NOT NULL")]
		public System.DateTime AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChangedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ChangedDate
		{
			get
			{
				return this._ChangedDate;
			}
			set
			{
				if ((this._ChangedDate != value))
				{
					this.OnChangedDateChanging(value);
					this.SendPropertyChanging();
					this._ChangedDate = value;
					this.SendPropertyChanged("ChangedDate");
					this.OnChangedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModeratedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModeratedDate
		{
			get
			{
				return this._ModeratedDate;
			}
			set
			{
				if ((this._ModeratedDate != value))
				{
					this.OnModeratedDateChanging(value);
					this.SendPropertyChanging();
					this._ModeratedDate = value;
					this.SendPropertyChanged("ModeratedDate");
					this.OnModeratedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalLikes", DbType="Int NOT NULL")]
		public int TotalLikes
		{
			get
			{
				return this._TotalLikes;
			}
			set
			{
				if ((this._TotalLikes != value))
				{
					this.OnTotalLikesChanging(value);
					this.SendPropertyChanging();
					this._TotalLikes = value;
					this.SendPropertyChanged("TotalLikes");
					this.OnTotalLikesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_BlogPostOrganization", Storage="_BlogPostOrganizations", ThisKey="ID", OtherKey="OrganizationID")]
		public EntitySet<BlogPostOrganization> BlogPostOrganizations
		{
			get
			{
				return this._BlogPostOrganizations;
			}
			set
			{
				this._BlogPostOrganizations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_DocumentOrganization", Storage="_DocumentOrganizations", ThisKey="ID", OtherKey="OrganizationID")]
		public EntitySet<DocumentOrganization> DocumentOrganizations
		{
			get
			{
				return this._DocumentOrganizations;
			}
			set
			{
				this._DocumentOrganizations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_EventOrganization", Storage="_EventOrganizations", ThisKey="ID", OtherKey="OrganizationID")]
		public EntitySet<EventOrganization> EventOrganizations
		{
			get
			{
				return this._EventOrganizations;
			}
			set
			{
				this._EventOrganizations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_OrganizationAccess", Storage="_OrganizationAccesses", ThisKey="ID", OtherKey="OrganizationID")]
		public EntitySet<OrganizationAccess> OrganizationAccesses
		{
			get
			{
				return this._OrganizationAccesses;
			}
			set
			{
				this._OrganizationAccesses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_OrganizationSubject", Storage="_OrganizationSubjects", ThisKey="ID", OtherKey="OrganizationID")]
		public EntitySet<OrganizationSubject> OrganizationSubjects
		{
			get
			{
				return this._OrganizationSubjects;
			}
			set
			{
				this._OrganizationSubjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_OrganizationContact", Storage="_OrganizationContacts", ThisKey="ID", OtherKey="OrganizationID")]
		public EntitySet<OrganizationContact> OrganizationContacts
		{
			get
			{
				return this._OrganizationContacts;
			}
			set
			{
				this._OrganizationContacts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_OrganizationLike", Storage="_OrganizationLikes", ThisKey="ID", OtherKey="OrganizationID")]
		public EntitySet<OrganizationLike> OrganizationLikes
		{
			get
			{
				return this._OrganizationLikes;
			}
			set
			{
				this._OrganizationLikes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_OrganizationLink", Storage="_OrganizationLinks", ThisKey="ID", OtherKey="OrganizationID")]
		public EntitySet<OrganizationLink> OrganizationLinks
		{
			get
			{
				return this._OrganizationLinks;
			}
			set
			{
				this._OrganizationLinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_OrganizationRegion", Storage="_OrganizationRegions", ThisKey="ID", OtherKey="OrganizationID")]
		public EntitySet<OrganizationRegion> OrganizationRegions
		{
			get
			{
				return this._OrganizationRegions;
			}
			set
			{
				this._OrganizationRegions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_PersonOrganization", Storage="_PersonOrganizations", ThisKey="ID", OtherKey="OrganizationID")]
		public EntitySet<PersonOrganization> PersonOrganizations
		{
			get
			{
				return this._PersonOrganizations;
			}
			set
			{
				this._PersonOrganizations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_PublicationOrganization", Storage="_PublicationOrganizations", ThisKey="ID", OtherKey="OrganizationID")]
		public EntitySet<PublicationOrganization> PublicationOrganizations
		{
			get
			{
				return this._PublicationOrganizations;
			}
			set
			{
				this._PublicationOrganizations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_StudyMaterialOrganization", Storage="_StudyMaterialOrganizations", ThisKey="ID", OtherKey="OrganizationID")]
		public EntitySet<StudyMaterialOrganization> StudyMaterialOrganizations
		{
			get
			{
				return this._StudyMaterialOrganizations;
			}
			set
			{
				this._StudyMaterialOrganizations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_OrganizationRecordRedirect", Storage="_OrganizationRecordRedirects", ThisKey="ID", OtherKey="OrganizationID")]
		public EntitySet<OrganizationRecordRedirect> OrganizationRecordRedirects
		{
			get
			{
				return this._OrganizationRecordRedirects;
			}
			set
			{
				this._OrganizationRecordRedirects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Organization", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Organizations.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Organizations.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BlogPostOrganizations(BlogPostOrganization entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_BlogPostOrganizations(BlogPostOrganization entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
		
		private void attach_DocumentOrganizations(DocumentOrganization entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_DocumentOrganizations(DocumentOrganization entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
		
		private void attach_EventOrganizations(EventOrganization entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_EventOrganizations(EventOrganization entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
		
		private void attach_OrganizationAccesses(OrganizationAccess entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_OrganizationAccesses(OrganizationAccess entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
		
		private void attach_OrganizationSubjects(OrganizationSubject entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_OrganizationSubjects(OrganizationSubject entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
		
		private void attach_OrganizationContacts(OrganizationContact entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_OrganizationContacts(OrganizationContact entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
		
		private void attach_OrganizationLikes(OrganizationLike entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_OrganizationLikes(OrganizationLike entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
		
		private void attach_OrganizationLinks(OrganizationLink entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_OrganizationLinks(OrganizationLink entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
		
		private void attach_OrganizationRegions(OrganizationRegion entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_OrganizationRegions(OrganizationRegion entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
		
		private void attach_PersonOrganizations(PersonOrganization entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_PersonOrganizations(PersonOrganization entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
		
		private void attach_PublicationOrganizations(PublicationOrganization entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_PublicationOrganizations(PublicationOrganization entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
		
		private void attach_StudyMaterialOrganizations(StudyMaterialOrganization entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_StudyMaterialOrganizations(StudyMaterialOrganization entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
		
		private void attach_OrganizationRecordRedirects(OrganizationRecordRedirect entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_OrganizationRecordRedirects(OrganizationRecordRedirect entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
	}
}
#pragma warning restore 1591
